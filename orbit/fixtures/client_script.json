[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Project Agreement",
  "enabled": 1,
  "modified": "2025-08-31 13:28:10.430286",
  "module": "Orbit",
  "name": "Add Tender Fees item to the table",
  "script": "frappe.ui.form.on('Project Agreement', {\r\n    add_tender_fees: function(frm) {\r\n        add_tender_fees_item(frm);\r\n    },\r\n    project_amount: function(frm) {\r\n        calculate_profit_value(frm);\r\n        calculate_profit_ratio(frm);\r\n    },\r\n    profit_ratio: function(frm) {\r\n        calculate_profit_value(frm);\r\n    },\r\n    profit_value: function(frm) {\r\n        calculate_profit_ratio(frm);\r\n    }\r\n});\r\n\r\nfunction calculate_profit_value(frm) {\r\n    if (frm.doc.project_amount && frm.doc.profit_ratio) {\r\n        frm.set_value('profit_value', (frm.doc.project_amount * frm.doc.profit_ratio) / 100);\r\n    }\r\n}\r\n\r\nfunction calculate_profit_ratio(frm) {\r\n    if (frm.doc.project_amount && frm.doc.profit_value) {\r\n        frm.set_value('profit_ratio', (frm.doc.profit_value / frm.doc.project_amount) * 100);\r\n    }\r\n}\r\n\r\nfunction add_tender_fees_item(frm) {\r\n    if (!frm.doc.profit_value || frm.doc.profit_value <= 0) {\r\n        frappe.msgprint(__(\"Please set a valid profit value first\"));\r\n        return;\r\n    }\r\n\r\n    // Check if item already exists in the table\r\n    const item_exists = frm.doc.contractors_services?.some(item => item.item === \"اتعاب مناقصة\");\r\n    \r\n    if (item_exists) {\r\n        frappe.msgprint(__(\"Tender fees item already exists in the table\"));\r\n        return;\r\n    }\r\n\r\n    // Add new item to the table\r\n    frm.add_child(\"contractors_services\", {\r\n        item: \"اتعاب مناقصة\",\r\n        amount: frm.doc.profit_value\r\n    });\r\n    \r\n    frm.refresh_field(\"contractors_services\");\r\n    frappe.msgprint(__(\"Tender fees item added successfully\"));\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Project Payment",
  "enabled": 0,
  "modified": "2025-08-31 13:27:43.264900",
  "module": "Orbit",
  "name": "Popup",
  "script": "frappe.ui.form.on('Project Payment', {\r\n    onload: function(frm) {\r\n        if (frm.is_new()) {\r\n            // Show popup when creating new record\r\n            show_payment_popup(frm);\r\n        }\r\n    }\r\n});\r\n\r\nfunction show_payment_popup(frm) {\r\n    let dialog = new frappe.ui.Dialog({\r\n        title: 'Select Project and Payment Details',\r\n        fields: [\r\n            {\r\n                label: 'Customer',\r\n                fieldname: 'customer',\r\n                fieldtype: 'Link',\r\n                options: 'Customer',\r\n                reqd: 1,\r\n                change: function() {\r\n                    let customer = dialog.get_value('customer');\r\n                    if (customer) {\r\n                        // Clear and reload project agreements field\r\n                        dialog.set_value('project_agreements', []);\r\n                        dialog.fields_dict.project_agreements.get_query = function() {\r\n                            return {\r\n                                filters: {\r\n                                    'customer': customer,\r\n                                    'docstatus': 1\r\n                                }\r\n                            };\r\n                        };\r\n                        dialog.fields_dict.project_agreements.refresh();\r\n                        // Clear invoices when customer changes\r\n                        dialog.fields_dict.invoices_html.$wrapper.html('');\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                label: 'Project Agreements',\r\n                fieldname: 'project_agreements',\r\n                fieldtype: 'MultiSelectList',\r\n                get_data: function() {\r\n                    let customer = dialog.get_value('customer');\r\n                    if (!customer) return [];\r\n                    \r\n                    return frappe.db.get_list('Project Agreement', {\r\n                        filters: {\r\n                            'customer': customer,\r\n                            'docstatus': 1\r\n                        },\r\n                        fields: ['name', 'project_name']\r\n                    }).then(function(data) {\r\n                        return data.map(function(d) {\r\n                            return {\r\n                                value: d.name,\r\n                                description: d.project_name || d.name\r\n                            };\r\n                        });\r\n                    });\r\n                },\r\n                change: function() {\r\n                    let project_agreements = dialog.get_value('project_agreements');\r\n                    if (project_agreements && project_agreements.length > 0) {\r\n                        load_invoices_for_projects(dialog, project_agreements);\r\n                    } else {\r\n                        dialog.fields_dict.invoices_html.$wrapper.html('');\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                label: 'Invoice Payment Details',\r\n                fieldname: 'invoice_section',\r\n                fieldtype: 'Section Break'\r\n            },\r\n            {\r\n                label: 'Invoices',\r\n                fieldname: 'invoices_html',\r\n                fieldtype: 'HTML'\r\n            },\r\n            {\r\n                label: 'Government Fees',\r\n                fieldname: 'govt_fees_section',\r\n                fieldtype: 'Section Break'\r\n            },\r\n            {\r\n                label: 'Include Government Fees?',\r\n                fieldname: 'include_govt_fees',\r\n                fieldtype: 'Check',\r\n                change: function() {\r\n                    let include_fees = dialog.get_value('include_govt_fees');\r\n                    toggle_govt_fees_section(dialog, include_fees);\r\n                }\r\n            },\r\n            {\r\n                label: 'Government Fees',\r\n                fieldname: 'govt_fees_html',\r\n                fieldtype: 'HTML',\r\n                hidden: 1\r\n            }\r\n        ],\r\n        size: 'large',\r\n        primary_action_label: 'Create Payment',\r\n        primary_action: function(values) {\r\n            process_payment_data(frm, dialog, values);\r\n        }\r\n    });\r\n\r\n    dialog.show();\r\n    \r\n    // Initialize government fees section as hidden\r\n    toggle_govt_fees_section(dialog, false);\r\n}\r\n\r\nfunction load_invoices_for_projects(dialog, project_agreements) {\r\n    let all_invoices = [];\r\n    let processed_projects = 0;\r\n    \r\n    project_agreements.forEach(function(project_agreement) {\r\n        frappe.call({\r\n            method: 'frappe.client.get_list',\r\n            args: {\r\n                doctype: 'Sales Invoice',\r\n                filters: {\r\n                    'custom_project_agreement': project_agreement,\r\n                    'outstanding_amount': ['>', 0],\r\n                    'docstatus': 1\r\n                },\r\n                fields: ['name', 'customer', 'grand_total', 'outstanding_amount', 'total_taxes_and_charges']\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.length > 0) {\r\n                    r.message.forEach(function(invoice) {\r\n                        invoice.project_agreement = project_agreement;\r\n                        all_invoices.push(invoice);\r\n                    });\r\n                }\r\n                \r\n                processed_projects++;\r\n                if (processed_projects === project_agreements.length) {\r\n                    if (all_invoices.length > 0) {\r\n                        render_invoice_table(dialog, all_invoices);\r\n                    } else {\r\n                        dialog.fields_dict.invoices_html.$wrapper.html('<p>No open invoices found for selected project agreements.</p>');\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction render_invoice_table(dialog, invoices) {\r\n    let html = `\r\n        <div style=\"overflow-x: auto; margin-top: 15px;\">\r\n            <table class=\"table table-bordered table-hover\" style=\"min-width: 1400px; font-size: 11px;\">\r\n                <thead class=\"thead-light\">\r\n                    <tr style=\"background-color: #f8f9fa;\">\r\n                        <th style=\"min-width: 80px;\">Project</th>\r\n                        <th style=\"min-width: 100px;\">Item Code</th>\r\n                        <th style=\"min-width: 90px;\">Item Total</th>\r\n                        <th style=\"min-width: 80px;\">Tax Amount</th>\r\n                        <th style=\"min-width: 70px;\">Tax %</th>\r\n                        <th style=\"min-width: 90px;\">Outstanding</th>\r\n                        <th style=\"min-width: 80px;\">Out. %</th>\r\n                        <th style=\"min-width: 80px;\">Balance</th>\r\n                        <th style=\"min-width: 100px;\">Payment</th>\r\n                        <th style=\"min-width: 90px;\">Payment Tax</th>\r\n                        <th style=\"min-width: 200px;\">Remarks</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n        `;\r\n\r\n    let processed_count = 0;\r\n    invoices.forEach(function(invoice, index) {\r\n        // Get full invoice details including item information\r\n        get_invoice_details(invoice.name, function(invoice_details) {\r\n            let tax_ratio = invoice_details.tax_ratio || 0;\r\n            let item_code = invoice_details.item_code || '';\r\n            let item_total = invoice_details.item_total || 0;\r\n            let total_with_tax = item_total + (invoice.total_taxes_and_charges || 0);\r\n            let outstanding_ratio = total_with_tax > 0 ? (invoice.outstanding_amount / total_with_tax) : 0;\r\n            let balance = outstanding_ratio * item_total;\r\n            \r\n            html += `\r\n                <tr data-invoice=\"${invoice.name}\" data-project=\"${invoice.project_agreement}\" data-index=\"${index}\" style=\"border-bottom: 1px solid #dee2e6;\">\r\n                    <td style=\"font-size: 10px; padding: 8px 4px;\">\r\n                        <span title=\"${invoice.project_agreement}\">${invoice.project_agreement.substring(0, 8)}...</span>\r\n                    </td>\r\n                    <td style=\"font-weight: 500; padding: 8px 4px;\">${item_code}</td>\r\n                    <td style=\"text-align: right; padding: 8px 4px;\">${format_currency_compact(item_total)}</td>\r\n                    <td style=\"text-align: right; padding: 8px 4px;\">${format_currency_compact(invoice.total_taxes_and_charges || 0)}</td>\r\n                    <td style=\"text-align: center; padding: 8px 4px;\"><span class=\"badge badge-info\">${tax_ratio}%</span></td>\r\n                    <td style=\"text-align: right; padding: 8px 4px;\">${format_currency_compact(invoice.outstanding_amount)}</td>\r\n                    <td style=\"text-align: center; padding: 8px 4px;\"><span class=\"outstanding-ratio badge badge-secondary\">${(outstanding_ratio * 100).toFixed(1)}%</span></td>\r\n                    <td style=\"text-align: right; padding: 8px 4px;\"><span class=\"balance\" style=\"font-weight: 500;\">${format_currency_compact(balance)}</span></td>\r\n                    <td style=\"padding: 4px;\">\r\n                        <input type=\"number\" \r\n                               class=\"form-control payment-amount\" \r\n                               data-invoice=\"${invoice.name}\"\r\n                               data-outstanding=\"${invoice.outstanding_amount}\"\r\n                               data-tax-ratio=\"${tax_ratio}\"\r\n                               data-balance=\"${balance}\"\r\n                               step=\"0.01\"\r\n                               min=\"0\"\r\n                               max=\"${balance}\"\r\n                               style=\"width: 95px; font-size: 11px; padding: 4px;\">\r\n                    </td>\r\n                    <td style=\"text-align: right; padding: 8px 4px;\">\r\n                        <span class=\"payment-tax\" style=\"font-weight: 500; color: #28a745;\">0.00</span>\r\n                    </td>\r\n                    <td style=\"padding: 4px;\">\r\n                        <textarea class=\"form-control remark-field\" \r\n                                  data-invoice=\"${invoice.name}\"\r\n                                  rows=\"2\"\r\n                                  style=\"width: 190px; font-size: 11px; resize: vertical;\"\r\n                                  placeholder=\"Enter payment remarks...\"></textarea>\r\n                    </td>\r\n                </tr>\r\n            `;\r\n            \r\n            processed_count++;\r\n            // If this is the last invoice, close the table and add event listeners\r\n            if (processed_count === invoices.length) {\r\n                html += '</tbody></table></div>';\r\n                dialog.fields_dict.invoices_html.$wrapper.html(html);\r\n                add_payment_amount_listeners(dialog);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction get_invoice_details(invoice_name, callback) {\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Sales Invoice',\r\n            name: invoice_name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                let invoice = r.message;\r\n                let tax_ratio = 0;\r\n                let item_code = '';\r\n                let item_total = 0;\r\n                \r\n                // Get tax ratio from taxes table\r\n                if (invoice.taxes && invoice.taxes.length > 0) {\r\n                    tax_ratio = invoice.taxes[0].rate || 0;\r\n                }\r\n                \r\n                // Get item details (assuming one item per invoice)\r\n                if (invoice.items && invoice.items.length > 0) {\r\n                    item_code = invoice.items[0].item_code || '';\r\n                    item_total = invoice.items[0].amount || 0; // This is total for item without tax\r\n                }\r\n                \r\n                callback({\r\n                    tax_ratio: tax_ratio,\r\n                    item_code: item_code,\r\n                    item_total: item_total,\r\n                    invoice: invoice\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction add_payment_amount_listeners(dialog) {\r\n    dialog.fields_dict.invoices_html.$wrapper.find('.payment-amount').on('input', function() {\r\n        let payment_amount = parseFloat($(this).val()) || 0;\r\n        let balance = parseFloat($(this).data('balance'));\r\n        let tax_ratio = parseFloat($(this).data('tax-ratio')) || 0;\r\n        let invoice_name = $(this).data('invoice');\r\n        \r\n        // Validate payment amount doesn't exceed balance\r\n        if (payment_amount > balance) {\r\n            frappe.msgprint(`Payment amount cannot exceed balance amount of ${format_currency_compact(balance)}`);\r\n            $(this).val(balance);\r\n            payment_amount = balance;\r\n        }\r\n        \r\n        // Calculate and display payment tax\r\n        let payment_tax = (payment_amount * tax_ratio) / 100;\r\n        $(this).closest('tr').find('.payment-tax').text(format_currency_compact(payment_tax));\r\n    });\r\n}\r\n\r\nfunction format_currency_compact(amount) {\r\n    if (!amount) return '0.00';\r\n    return parseFloat(amount).toLocaleString('en-US', {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2\r\n    });\r\n}\r\n\r\nfunction toggle_govt_fees_section(dialog, show) {\r\n    if (show) {\r\n        dialog.fields_dict.govt_fees_html.df.hidden = 0;\r\n        dialog.fields_dict.govt_fees_html.refresh();\r\n        render_govt_fees_section(dialog);\r\n    } else {\r\n        dialog.fields_dict.govt_fees_html.df.hidden = 1;\r\n        dialog.fields_dict.govt_fees_html.refresh();\r\n    }\r\n}\r\n\r\nfunction render_govt_fees_section(dialog) {\r\n    let html = `\r\n        <div class=\"govt-fees-container\" style=\"margin-top: 15px;\">\r\n            <div style=\"margin-bottom: 15px;\">\r\n                <button type=\"button\" class=\"btn btn-sm btn-success add-govt-fee\">\r\n                    <i class=\"fa fa-plus\"></i> Add Government Fee\r\n                </button>\r\n            </div>\r\n            <div style=\"overflow-x: auto;\">\r\n                <table class=\"table table-bordered govt-fees-table\" style=\"min-width: 600px;\">\r\n                    <thead class=\"thead-light\">\r\n                        <tr style=\"background-color: #f8f9fa;\">\r\n                            <th style=\"min-width: 150px;\">Project Agreement</th>\r\n                            <th style=\"min-width: 100px;\">Amount</th>\r\n                            <th style=\"min-width: 250px;\">Remarks</th>\r\n                            <th style=\"min-width: 80px;\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody class=\"govt-fees-body\">\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    `;\r\n    \r\n    dialog.fields_dict.govt_fees_html.$wrapper.html(html);\r\n    \r\n    // Add event listener for adding new government fee rows\r\n    dialog.fields_dict.govt_fees_html.$wrapper.find('.add-govt-fee').on('click', function() {\r\n        add_govt_fee_row(dialog);\r\n    });\r\n    \r\n    // Add first row by default\r\n    add_govt_fee_row(dialog);\r\n}\r\n\r\nfunction add_govt_fee_row(dialog) {\r\n    let customer = dialog.get_value('customer');\r\n    let project_agreements = dialog.get_value('project_agreements') || [];\r\n    \r\n    // Build project agreement options\r\n    let project_options = '';\r\n    project_agreements.forEach(function(project) {\r\n        project_options += `<option value=\"${project}\">${project}</option>`;\r\n    });\r\n    \r\n    let row_html = `\r\n        <tr class=\"govt-fee-row\">\r\n            <td style=\"padding: 8px;\">\r\n                <select class=\"form-control govt-fee-project\" style=\"font-size: 11px;\">\r\n                    <option value=\"\">Select Project</option>\r\n                    ${project_options}\r\n                </select>\r\n            </td>\r\n            <td style=\"padding: 8px;\">\r\n                <input type=\"number\" class=\"form-control govt-fee-amount\" step=\"0.01\" min=\"0\" \r\n                       style=\"font-size: 11px;\" placeholder=\"0.00\">\r\n            </td>\r\n            <td style=\"padding: 8px;\">\r\n                <textarea class=\"form-control govt-fee-remark\" rows=\"2\" \r\n                          style=\"font-size: 11px; resize: vertical;\" \r\n                          placeholder=\"Enter government fee remarks...\"></textarea>\r\n            </td>\r\n            <td style=\"padding: 8px; text-align: center;\">\r\n                <button type=\"button\" class=\"btn btn-sm btn-danger remove-govt-fee\">\r\n                    <i class=\"fa fa-trash\"></i>\r\n                </button>\r\n            </td>\r\n        </tr>\r\n    `;\r\n    \r\n    dialog.fields_dict.govt_fees_html.$wrapper.find('.govt-fees-body').append(row_html);\r\n    \r\n    // Add remove button listener\r\n    dialog.fields_dict.govt_fees_html.$wrapper.find('.remove-govt-fee').last().on('click', function() {\r\n        $(this).closest('tr').remove();\r\n    });\r\n}\r\n\r\nfunction process_payment_data(frm, dialog, values) {\r\n    let customer = values.customer;\r\n    let project_agreements = values.project_agreements || [];\r\n    \r\n    // Set customer in main form\r\n    frm.set_value('customer', customer);\r\n    \r\n    // Clear existing rows\r\n    frm.clear_table('service_payment_details');\r\n    frm.clear_table('government_fees');\r\n    \r\n    // Process invoice payments\r\n    let invoice_rows = dialog.fields_dict.invoices_html.$wrapper.find('tbody tr');\r\n    let promises = [];\r\n    \r\n    invoice_rows.each(function() {\r\n        let row = $(this);\r\n        let invoice_name = row.data('invoice');\r\n        let project_agreement = row.data('project');\r\n        let payment_amount = parseFloat(row.find('.payment-amount').val()) || 0;\r\n        let remark = row.find('.remark-field').val() || '';\r\n        \r\n        if (payment_amount > 0) {\r\n            let promise = new Promise((resolve) => {\r\n                get_full_invoice_details(invoice_name, function(invoice_data) {\r\n                    let invoice = invoice_data.invoice;\r\n                    let item = invoice.items[0]; // Since each invoice has one item\r\n                    let tax_ratio = invoice_data.tax_ratio;\r\n                    let item_total = invoice_data.item_total;\r\n                    \r\n                    let child_row = frm.add_child('service_payment_details');\r\n                    child_row.invoice = invoice_name;\r\n                    child_row.item = item.item_code;\r\n                    child_row.total = item_total; // Using item total instead of grand_total\r\n                    child_row.total_taxes = invoice.total_taxes_and_charges || 0;\r\n                    child_row.outstanding = invoice.outstanding_amount;\r\n                    child_row.paid_amount = invoice.grand_total - invoice.outstanding_amount;\r\n                    child_row.payment_amount = payment_amount;\r\n                    child_row.tax_ratio = tax_ratio;\r\n                    child_row.payment_tax = (payment_amount * tax_ratio) / 100;\r\n                    child_row.unearned_account = item.income_account;\r\n                    child_row.revenue_account = item.custom_default_earning_account;\r\n                    child_row.project_agreement_reference = project_agreement;\r\n                    child_row.remark = remark;\r\n                    \r\n                    resolve();\r\n                });\r\n            });\r\n            promises.push(promise);\r\n        }\r\n    });\r\n    \r\n    // Process government fees if included\r\n    if (values.include_govt_fees) {\r\n        let govt_fee_rows = dialog.fields_dict.govt_fees_html.$wrapper.find('.govt-fee-row');\r\n        govt_fee_rows.each(function() {\r\n            let project_agreement = $(this).find('.govt-fee-project').val();\r\n            let amount = parseFloat($(this).find('.govt-fee-amount').val()) || 0;\r\n            let remark = $(this).find('.govt-fee-remark').val() || '';\r\n            \r\n            if (amount > 0 && project_agreement) {\r\n                let child_row = frm.add_child('government_fees');\r\n                child_row.amount = amount;\r\n                child_row.remark = remark;\r\n                child_row.project_agreement = project_agreement;\r\n                // You might want to add project_agreement reference to government_fees table if the field exists\r\n                \r\n            }\r\n        });\r\n    }\r\n    \r\n    // Wait for all invoice processing to complete\r\n    Promise.all(promises).then(() => {\r\n        frm.refresh_field('service_payment_details');\r\n        frm.refresh_field('government_fees');\r\n        dialog.hide();\r\n        frappe.msgprint('Payment details have been populated successfully.');\r\n    });\r\n}\r\n\r\nfunction get_full_invoice_details(invoice_name, callback) {\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Sales Invoice',\r\n            name: invoice_name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                let invoice = r.message;\r\n                let tax_ratio = 0;\r\n                let item_total = 0;\r\n                \r\n                // Get tax ratio from taxes table\r\n                if (invoice.taxes && invoice.taxes.length > 0) {\r\n                    tax_ratio = invoice.taxes[0].rate || 0;\r\n                }\r\n                \r\n                // Get item total (amount without tax)\r\n                if (invoice.items && invoice.items.length > 0) {\r\n                    item_total = invoice.items[0].amount || 0;\r\n                }\r\n                \r\n                callback({\r\n                    tax_ratio: tax_ratio,\r\n                    item_total: item_total,\r\n                    invoice: invoice\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction format_currency(amount) {\r\n    return frappe.format(amount, {fieldtype: 'Currency'});\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Project Payment",
  "enabled": 1,
  "modified": "2025-08-31 13:28:11.301814",
  "module": "Orbit",
  "name": "Fetch Accounts and filter",
  "script": "frappe.ui.form.on('Project Payment', {\r\n    setup: function(frm) {\r\n        // Filter Mode of Payment based on company linked to user\r\n        frm.set_query(\"mode_of_payment\", function() {\r\n            return {\r\n                filters: {\r\n                    company: frappe.defaults.get_user_default('company')\r\n                }\r\n            };\r\n        });\r\n        \r\n        // Filter Customer based on custom_company field\r\n        frm.set_query(\"customer\", function() {\r\n            return {\r\n                filters: {\r\n                    custom_company: frappe.defaults.get_user_default('company')\r\n                }\r\n            };\r\n        });\r\n        \r\n        // Filter Tax Account based on company\r\n        frm.set_query(\"tax_account\", function() {\r\n            return {\r\n                filters: {\r\n                    company: frappe.defaults.get_user_default('company'),\r\n                    is_group: 0,\r\n                    account_type: \"Tax\"\r\n                }\r\n            };\r\n        });\r\n        \r\n        // Filter Party Account based on company\r\n        frm.set_query(\"party_account\", function() {\r\n            return {\r\n                filters: {\r\n                    company: frappe.defaults.get_user_default('company'),\r\n                    is_group: 0\r\n                }\r\n            };\r\n        });\r\n        \r\n        // Filter Advance Account based on company\r\n        frm.set_query(\"advance_account\", function() {\r\n            return {\r\n                filters: {\r\n                    company: frappe.defaults.get_user_default('company'),\r\n                    is_group: 0\r\n                }\r\n            };\r\n        });\r\n    },\r\n    \r\n    customer: function(frm) {\r\n        if (frm.doc.customer) {\r\n            // Fetch Customer's accounts to get default account and advance account\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Customer',\r\n                    name: frm.doc.customer\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.accounts && r.message.accounts.length > 0) {\r\n                        const company = frappe.defaults.get_user_default('company');\r\n                        \r\n                        // Find the account entry for the current company\r\n                        const company_account = r.message.accounts.find(acc => acc.company === company);\r\n                        \r\n                        if (company_account) {\r\n                            // Set party account (default receivable account)\r\n                            if (company_account.account) {\r\n                                frm.set_value('party_account', company_account.account);\r\n                            }\r\n                            \r\n                            // Set advance account if available\r\n                            if (company_account.advance_account) {\r\n                                frm.set_value('advance_account', company_account.advance_account);\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                    // If no accounts found in customer accounts table, try to get default receivable account\r\n                    if (!frm.doc.party_account) {\r\n                        frappe.call({\r\n                            method: 'erpnext.accounts.party.get_party_account',\r\n                            args: {\r\n                                party_type: 'Customer',\r\n                                party: frm.doc.customer,\r\n                                company: frappe.defaults.get_user_default('company')\r\n                            },\r\n                            callback: function(account_response) {\r\n                                if (account_response.message) {\r\n                                    frm.set_value('party_account', account_response.message);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // Clear accounts when customer is cleared\r\n            frm.set_value('party_account', '');\r\n            frm.set_value('advance_account', '');\r\n        }\r\n    },\r\n    \r\n    mode_of_payment: function(frm) {\r\n        if (frm.doc.mode_of_payment) {\r\n            // Fetch the Mode of Payment's accounts table\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Mode of Payment',\r\n                    name: frm.doc.mode_of_payment\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.accounts && r.message.accounts.length > 0) {\r\n                        const company = frappe.defaults.get_user_default('company');\r\n                        \r\n                        // Find the account entry for the current company\r\n                        const company_account = r.message.accounts.find(acc => acc.company === company);\r\n                        \r\n                        if (company_account && company_account.default_account) {\r\n                            frm.set_value('receiving_account', company_account.default_account);\r\n                        } else if (r.message.accounts[0].default_account) {\r\n                            // Fallback to first account if company-specific account not found\r\n                            frm.set_value('receiving_account', r.message.accounts[0].default_account);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            \r\n            // Clear fields based on mode of payment change\r\n            if (frm.doc.mode_of_payment !== 'Bank Transfer Orbit (AED)') {\r\n                frm.set_value('reference_number', '');\r\n            }\r\n            \r\n            if (frm.doc.mode_of_payment !== 'Cheque') {\r\n                frm.set_value('due_date', '');\r\n                frm.set_value('cheque_number', '');\r\n                frm.set_value('bank_name', '');\r\n            }\r\n            \r\n            if (frm.doc.mode_of_payment !== 'Visa') {\r\n                frm.set_value('visa_number', '');\r\n            }\r\n        }\r\n    },\r\n    \r\n    visa_number: function(frm) {\r\n        if (frm.doc.visa_number) {\r\n            // Validate Visa number - must be exactly 14 digits\r\n            const visaNumber = frm.doc.visa_number.toString().trim();\r\n            if (!/^\\d{14}$/.test(visaNumber)) {\r\n                frappe.msgprint(__('Visa Number must be exactly 14 digits'));\r\n                frm.set_value('visa_number', '');\r\n            }\r\n        }\r\n    },\r\n    \r\n    // Optional: Refresh accounts when company changes (if company field exists)\r\n    company: function(frm) {\r\n        if (frm.doc.customer) {\r\n            // Re-trigger customer function to update accounts for new company\r\n            frm.trigger('customer');\r\n        }\r\n        if (frm.doc.mode_of_payment) {\r\n            // Re-trigger mode_of_payment function to update receiving account\r\n            frm.trigger('mode_of_payment');\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Project Payment",
  "enabled": 1,
  "modified": "2025-08-31 13:28:10.252263",
  "module": "Orbit",
  "name": "calculates various totals and amounts",
  "script": "// Project Payment Client Script\r\n// This script calculates various totals and amounts based on child table data\r\n\r\nfrappe.ui.form.on('Project Payment', {\r\n    // Trigger calculations on form refresh\r\n    refresh: function(frm) {\r\n        calculate_totals(frm);\r\n    },\r\n    \r\n    // Trigger calculations when form is validated (before save)\r\n    validate: function(frm) {\r\n        calculate_totals(frm);\r\n    },\r\n    \r\n    // Trigger calculations on form load\r\n    onload: function(frm) {\r\n        calculate_totals(frm);\r\n    }\r\n});\r\n\r\n// Service Payment Details child table events\r\nfrappe.ui.form.on('Service Payment Details', {\r\n    // Recalculate when a row is added\r\n    service_payment_details_add: function(frm, cdt, cdn) {\r\n        calculate_totals(frm);\r\n    },\r\n    \r\n    // Recalculate when a row is removed\r\n    service_payment_details_remove: function(frm, cdt, cdn) {\r\n        calculate_totals(frm);\r\n    },\r\n    \r\n    // Recalculate when payment_amount changes\r\n    payment_amount: function(frm, cdt, cdn) {\r\n        calculate_totals(frm);\r\n    },\r\n    \r\n    // Recalculate when payment_tax changes\r\n    payment_tax: function(frm, cdt, cdn) {\r\n        calculate_totals(frm);\r\n    },\r\n    \r\n    // Recalculate when total changes\r\n    total: function(frm, cdt, cdn) {\r\n        calculate_totals(frm);\r\n    },\r\n    \r\n    // Recalculate when total_taxes changes\r\n    total_taxes: function(frm, cdt, cdn) {\r\n        calculate_totals(frm);\r\n    },\r\n    \r\n    // Recalculate when outstanding changes\r\n    outstanding: function(frm, cdt, cdn) {\r\n        calculate_totals(frm);\r\n    }\r\n});\r\n\r\n// Government Fees child table events\r\nfrappe.ui.form.on('Government Fees Payment', {\r\n    // Recalculate when a row is added\r\n    government_fees_add: function(frm, cdt, cdn) {\r\n        calculate_totals(frm);\r\n    },\r\n    \r\n    // Recalculate when a row is removed\r\n    government_fees_remove: function(frm, cdt, cdn) {\r\n        calculate_totals(frm);\r\n    },\r\n    \r\n    // Recalculate when amount changes\r\n    amount: function(frm, cdt, cdn) {\r\n        calculate_totals(frm);\r\n    }\r\n});\r\n\r\n// Trust Fees Payment child table events\r\nfrappe.ui.form.on('Trust Fees Payment', {\r\n    // Recalculate when a row is added\r\n    trust_fees_payment_add: function(frm, cdt, cdn) {\r\n        calculate_totals(frm);\r\n    },\r\n    \r\n    // Recalculate when a row is removed\r\n    trust_fees_payment_remove: function(frm, cdt, cdn) {\r\n        calculate_totals(frm);\r\n    },\r\n    \r\n    // Recalculate when amount changes\r\n    amount: function(frm, cdt, cdn) {\r\n        calculate_totals(frm);\r\n    }\r\n});\r\n\r\n// Main calculation function\r\nfunction calculate_totals(frm) {\r\n    if (!frm.doc) return;\r\n    \r\n    // Initialize totals\r\n    let total_government_fees = 0;\r\n    let total_trust_fees = 0;\r\n    let total_services = 0;\r\n    let tax_amount = 0;\r\n    let outstanding_amount = 0;\r\n    let service_total_amount = 0;\r\n    let service_total_taxes = 0;\r\n    \r\n    // Calculate totals from Service Payment Details table\r\n    if (frm.doc.service_payment_details) {\r\n        frm.doc.service_payment_details.forEach(function(row) {\r\n            // Sum of payment_amount for Total Services\r\n            if (row.payment_amount) {\r\n                total_services += flt(row.payment_amount);\r\n            }\r\n            \r\n            // Sum of payment_tax for Tax Amount\r\n            if (row.payment_tax) {\r\n                tax_amount += flt(row.payment_tax);\r\n            }\r\n            \r\n            // Sum of outstanding for Outstanding Amount\r\n            if (row.outstanding) {\r\n                outstanding_amount += flt(row.outstanding);\r\n            }\r\n            \r\n            // Sum of total field for paid_amount calculation\r\n            if (row.total) {\r\n                service_total_amount += flt(row.total);\r\n            }\r\n            \r\n            // Sum of total_taxes field for paid_amount calculation\r\n            if (row.total_taxes) {\r\n                service_total_taxes += flt(row.total_taxes);\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Calculate totals from Government Fees table\r\n    if (frm.doc.government_fees) {\r\n        frm.doc.government_fees.forEach(function(row) {\r\n            // Sum of amount for Total Government Fees\r\n            if (row.amount) {\r\n                total_government_fees += flt(row.amount);\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Calculate totals from Trust Fees Payment table\r\n    if (frm.doc.trust_fees_payment) {\r\n        frm.doc.trust_fees_payment.forEach(function(row) {\r\n            // Sum of amount for Total Trust Fees\r\n            if (row.amount) {\r\n                total_trust_fees += flt(row.amount);\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Calculate Claim Amount (Total Government Fees + Total Services + Total Trust Fees + Tax Amount)\r\n    let claim_amount = total_government_fees + total_services + total_trust_fees + tax_amount;\r\n    \r\n    // Calculate Paid Amount ((Total \"total\" + \"total_taxes\" from service_payment_details) - total outstanding + total_services + tax_amount)\r\n    let paid_amount = (service_total_amount + service_total_taxes) - outstanding_amount + total_services + tax_amount;\r\n    \r\n    // Set calculated values in the form\r\n    frm.set_value('total_government_fees', total_government_fees);\r\n    frm.set_value('total_trust_fees', total_trust_fees);\r\n    frm.set_value('total_services', total_services);\r\n    frm.set_value('tax_amount', tax_amount);\r\n    frm.set_value('paid_amount', paid_amount);\r\n    frm.set_value('outstanding_amount', outstanding_amount);\r\n    frm.set_value('claim_amount', claim_amount);\r\n    \r\n    // Refresh the fields to show updated values\r\n    frm.refresh_fields([\r\n        'total_government_fees',\r\n        'total_trust_fees',\r\n        'total_services', \r\n        'tax_amount',\r\n        'paid_amount',\r\n        'outstanding_amount',\r\n        'claim_amount'\r\n    ]);\r\n}\r\n\r\n// Utility function to handle floating point calculations\r\nfunction flt(value, precision = 2) {\r\n    if (value == null || value == undefined || value === '') {\r\n        return 0.0;\r\n    }\r\n    if (typeof value === 'string') {\r\n        value = parseFloat(value);\r\n    }\r\n    return Math.round(value * Math.pow(10, precision)) / Math.pow(10, precision);\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Project Expenses",
  "enabled": 1,
  "modified": "2025-08-31 13:28:10.183747",
  "module": "Orbit",
  "name": "employee advance fetching and allocation logic",
  "script": "// Copyright (c) 2025, SVG and contributors\r\n// For license information, please see license.txt\r\n\r\n// Client Script for Project Expenses - Employee Advance Management\r\n// This script handles employee advance fetching and allocation logic without APIs\r\n\r\nfrappe.ui.form.on(\"Project Expenses\", {\r\n    refresh: function(frm) {\r\n        // Set up field dependencies and filters\r\n        setup_field_dependencies(frm);\r\n\r\n        // Ensure allocations are synchronized on form load\r\n        if (!frm.doc.__islocal) {\r\n            synchronize_allocations(frm);\r\n        }\r\n\r\n        // Calculate totals on form load\r\n        calculate_totals(frm);\r\n\r\n        // Add custom buttons\r\n        if (!frm.doc.__islocal && frm.doc.docstatus === 0) {\r\n            frm.add_custom_button(__('Refresh Advances'), function() {\r\n                if (frm.doc.employee) {\r\n                    fetch_employee_advances(frm);\r\n                } else {\r\n                    frappe.msgprint(__('Please select an employee first'));\r\n                }\r\n            }, __('Actions'));\r\n\r\n            // DEBUG: Add button to manually test pending amount calculation\r\n            frm.add_custom_button(__('Test Pending Calculation'), function() {\r\n                console.log('=== MANUAL PENDING CALCULATION TEST ===');\r\n                update_all_pending_amounts(frm);\r\n                update_pending_items_table(frm);\r\n                calculate_totals(frm);\r\n                console.log('=== TEST COMPLETE ===');\r\n            }, __('Debug'));\r\n        }\r\n    },\r\n\r\n    employee: function(frm) {\r\n        // When employee is selected, fetch their available advances\r\n        if (frm.doc.employee) {\r\n            fetch_employee_advances(frm);\r\n        } else {\r\n            // Clear advances table if employee is cleared\r\n            frm.clear_table('advances');\r\n            frm.refresh_field('advances');\r\n            calculate_totals(frm);\r\n        }\r\n    },\r\n\r\n    setup: function(frm) {\r\n        // Set up filters for various fields\r\n        setup_field_dependencies(frm);\r\n    },\r\n\r\n    validate: function(frm) {\r\n        // Validate allocation limits before saving\r\n        return validate_before_save(frm);\r\n    },\r\n\r\n    before_save: function(frm) {\r\n        // Final validation before save\r\n        return validate_before_save(frm);\r\n    },\r\n\r\n    project_balance: function(frm) {\r\n        // Update all pending amounts when project balance changes\r\n        update_all_pending_amounts(frm);\r\n        update_pending_items_table(frm);\r\n        calculate_totals(frm);\r\n    }\r\n});\r\n\r\n// Advances child table events\r\nfrappe.ui.form.on(\"Expense Claim Advance\", {\r\n    allocated_amount: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        validate_advance_allocation(frm, row);\r\n        validate_total_allocation_limit(frm);\r\n        calculate_totals(frm);\r\n    },\r\n\r\n    advances_remove: function(frm) {\r\n        calculate_totals(frm);\r\n    }\r\n});\r\n\r\n// Expenses Items child table events\r\nfrappe.ui.form.on(\"Expenses Items\", {\r\n    amount: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        console.log('Expenses Items amount event triggered for:', row.amount);\r\n\r\n        // Validate and auto-allocate based on limits\r\n        validate_and_allocate_expense_row(frm, row);\r\n\r\n        // Update pending amounts, pending items and totals\r\n        update_all_pending_amounts(frm);\r\n        update_pending_items_table(frm);\r\n        calculate_totals(frm);\r\n\r\n        console.log('Expenses Items amount event completed');\r\n    },\r\n\r\n    allocated_amount: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        validate_expense_allocation(frm, row);\r\n        update_pending_amount(frm);\r\n        update_pending_items_table(frm);\r\n        calculate_totals(frm);\r\n    },\r\n\r\n    expense_account: function(frm) {\r\n        // Update pending items when expense account changes\r\n        update_pending_items_table(frm);\r\n    },\r\n\r\n    expenses_items_remove: function(frm, cdt, cdn) {\r\n        // When an expense item is removed, we need to recalculate all allocations\r\n        // to ensure advance allocations are properly updated\r\n        recalculate_all_allocations(frm);\r\n\r\n        // Rebuild pending items table when expense item is removed\r\n        update_pending_items_table(frm);\r\n        calculate_totals(frm);\r\n    }\r\n});\r\n\r\n// Pending Items child table events\r\nfrappe.ui.form.on(\"Pending Items\", {\r\n    amount: function(frm) {\r\n        calculate_totals(frm);\r\n    },\r\n\r\n    paid: function(frm) {\r\n        calculate_totals(frm);\r\n    },\r\n\r\n    pending_items_remove: function(frm) {\r\n        calculate_totals(frm);\r\n    }\r\n});\r\n\r\n// Trust Fees Expenses child table events\r\nfrappe.ui.form.on(\"Trust Fees Expenses\", {\r\n    amount: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n\r\n        // Validate trust fees balance first\r\n        validate_trust_fees_allocation(frm, row);\r\n\r\n        // Then auto-allocate from advances\r\n        validate_and_allocate_trust_fee_row(frm, row);\r\n\r\n        calculate_totals(frm);\r\n    },\r\n\r\n    allocated_amount: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        validate_trust_fee_allocation(frm, row);\r\n        calculate_totals(frm);\r\n    },\r\n\r\n    contractor: function(frm, cdt, cdn) {\r\n        calculate_totals(frm);\r\n    },\r\n\r\n    employee_advance: function(frm, cdt, cdn) {\r\n        calculate_totals(frm);\r\n    },\r\n\r\n    expense_trust_fees_via_: function(frm) {\r\n        console.log('expense_trust_fees_via_ changed to:', frm.doc.expense_trust_fees_via_);\r\n        \r\n        // If changed to 'Other', clear all trust fees allocations from advances\r\n        if (frm.doc.expense_trust_fees_via_ === 'Other') {\r\n            clear_trust_fees_allocations(frm);\r\n        } else {\r\n            // Recalculate all trust fees allocations based on new setting\r\n            if (frm.doc.trust_fees_expenses) {\r\n                frm.doc.trust_fees_expenses.forEach(function(item) {\r\n                    if (item.amount && flt(item.amount) > 0) {\r\n                        validate_and_allocate_trust_fee_row(frm, item);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        \r\n        calculate_totals(frm);\r\n        frm.refresh_field('advances');\r\n        frm.refresh_field('trust_fees_expenses');\r\n    },\r\n\r\n    trust_fees_expenses_remove: function(frm, cdt, cdn) {\r\n        // When a trust fee row is removed, we need to deallocate from advances\r\n        let row = locals[cdt][cdn];\r\n        if (row && row.allocated_amount && row.allocated_amount > 0) {\r\n            remove_trust_fee_allocation(frm, row);\r\n            frm.refresh_field('advances');\r\n        }\r\n        calculate_totals(frm);\r\n    }\r\n});\r\n\r\n// Helper Functions\r\n\r\nfunction setup_field_dependencies(frm) {\r\n    // Filter employees based on company\r\n    frm.set_query(\"employee\", function() {\r\n        return {\r\n            filters: {\r\n                company: frm.doc.company || frappe.defaults.get_user_default('company')\r\n            }\r\n        };\r\n    });\r\n\r\n    // Filter customers based on company\r\n    frm.set_query(\"customer\", function() {\r\n        return {\r\n            filters: {\r\n                custom_company: frm.doc.company || frappe.defaults.get_user_default('company')\r\n            }\r\n        };\r\n    });\r\n\r\n    // Filter expense accounts\r\n    frm.set_query(\"expense_account\", \"expenses_items\", function() {\r\n        return {\r\n            filters: {\r\n                company: frm.doc.company || frappe.defaults.get_user_default('company'),\r\n                is_group: 0,\r\n                account_type: [\"in\", [\"Expense Account\", \"Cost of Goods Sold\"]]\r\n            }\r\n        };\r\n    });\r\n\r\n    // Filter advance accounts\r\n    frm.set_query(\"advance_account\", \"advances\", function() {\r\n        return {\r\n            filters: {\r\n                company: frm.doc.company || frappe.defaults.get_user_default('company'),\r\n                is_group: 0,\r\n                account_type: \"Receivable\"\r\n            }\r\n        };\r\n    });\r\n}\r\n\r\nfunction fetch_employee_advances(frm) {\r\n    if (!frm.doc.employee) {\r\n        return;\r\n    }\r\n\r\n    frappe.show_alert({\r\n        message: __('Fetching employee advances...'),\r\n        indicator: 'blue'\r\n    }, 3);\r\n\r\n    // Use frappe.db.get_list to fetch Employee Advances directly\r\n    frappe.db.get_list('Employee Advance', {\r\n        filters: {\r\n            employee: frm.doc.employee,\r\n            company: frm.doc.company || frappe.defaults.get_user_default('company'),\r\n            docstatus: 1,\r\n            status: ['in', ['Paid', 'Claimed']]\r\n        },\r\n        fields: ['name', 'posting_date', 'advance_amount', 'paid_amount', 'claimed_amount', 'return_amount', 'status']\r\n    }).then(function(advances) {\r\n        // Filter advances with unclaimed amounts > 0\r\n        let available_advances = [];\r\n\r\n        advances.forEach(function(advance) {\r\n            // Calculate unclaimed amount correctly: advance_amount - claimed_amount - return_amount\r\n            let unclaimed_amount = flt(advance.advance_amount) - flt(advance.claimed_amount) - flt(advance.return_amount || 0);\r\n            if (unclaimed_amount > 0) {\r\n                advance.unclaimed_amount = unclaimed_amount;\r\n                advance.returned_amount = flt(advance.return_amount || 0);\r\n                available_advances.push(advance);\r\n            }\r\n        });\r\n\r\n        if (available_advances.length > 0) {\r\n            // Fetch additional details for each advance\r\n            fetch_advance_details(frm, available_advances);\r\n        } else {\r\n            frappe.msgprint({\r\n                title: __('No Advances Found'),\r\n                message: __('No employee advances with unclaimed amounts found for this employee.'),\r\n                indicator: 'orange'\r\n            });\r\n            // Clear existing advances\r\n            frm.clear_table('advances');\r\n            frm.refresh_field('advances');\r\n            calculate_totals(frm);\r\n        }\r\n    }).catch(function(error) {\r\n        frappe.msgprint({\r\n            title: __('Error'),\r\n            message: __('Failed to fetch employee advances. Please try again.'),\r\n            indicator: 'red'\r\n        });\r\n        console.error('Error fetching advances:', error);\r\n    });\r\n}\r\n\r\nfunction fetch_advance_details(frm, available_advances) {\r\n    // Populate with the basic data we have\r\n    // Note: Some fields like advance_account may need to be set manually\r\n    // due to permission restrictions on certain Employee Advance fields\r\n    populate_advances_table(frm, available_advances);\r\n\r\n    frappe.show_alert({\r\n        message: __('Found {0} available advances', [available_advances.length]),\r\n        indicator: 'green'\r\n    }, 3);\r\n\r\n    // Show info about manual setup if needed\r\n    if (available_advances.length > 0) {\r\n        frappe.show_alert({\r\n            message: __('Note: Please set advance accounts manually in the advances table if required'),\r\n            indicator: 'blue'\r\n        }, 5);\r\n    }\r\n\r\n    calculate_totals(frm);\r\n}\r\n\r\nfunction populate_advances_table(frm, advances_data) {\r\n    // Clear existing advances\r\n    frm.clear_table('advances');\r\n\r\n    // Add new advances\r\n    advances_data.forEach(function(advance) {\r\n        let row = frm.add_child('advances');\r\n        row.employee_advance = advance.name;\r\n        row.posting_date = advance.posting_date;\r\n        row.advance_paid = advance.paid_amount || advance.advance_amount;\r\n        row.unclaimed_amount = advance.unclaimed_amount;\r\n        row.returned_amount = advance.returned_amount;\r\n        row.allocated_amount = 0; // Start with 0 allocation\r\n        // Set advance_account to empty string for now - user can set manually if needed\r\n        row.advance_account = '';\r\n    });\r\n\r\n    frm.refresh_field('advances');\r\n}\r\n\r\nfunction validate_advance_allocation(frm, advance_row) {\r\n    if (flt(advance_row.allocated_amount) > flt(advance_row.unclaimed_amount)) {\r\n        frappe.msgprint({\r\n            title: __('Invalid Allocation'),\r\n            message: __('Allocated amount ({0}) cannot exceed unclaimed amount ({1}) for advance {2}',\r\n                [format_currency(advance_row.allocated_amount),\r\n                 format_currency(advance_row.unclaimed_amount),\r\n                 advance_row.employee_advance]),\r\n            indicator: 'red'\r\n        });\r\n        advance_row.allocated_amount = advance_row.unclaimed_amount;\r\n        frm.refresh_field('advances');\r\n    }\r\n}\r\n\r\nfunction auto_allocate_expense(frm, expense_row) {\r\n    if (!expense_row.amount || flt(expense_row.amount) <= 0) {\r\n        return;\r\n    }\r\n\r\n    console.log('auto_allocate_expense called for amount:', expense_row.amount);\r\n\r\n    // Calculate current total allocated amount (excluding this expense item)\r\n    let current_total_allocated = 0;\r\n\r\n    // Add from other expenses_items (excluding current row)\r\n    if (frm.doc.expenses_items) {\r\n        frm.doc.expenses_items.forEach(function(item) {\r\n            if (item.name !== expense_row.name) { // Exclude current row\r\n                current_total_allocated += flt(item.allocated_amount);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Add from trust_fees_expenses (only those via Employee Advance)\r\n    if (frm.doc.trust_fees_expenses) {\r\n        frm.doc.trust_fees_expenses.forEach(function(item) {\r\n            // Only count allocated amounts from trust fees via Employee Advance\r\n            if (frm.doc.expense_trust_fees_via_ === 'Employee Advance' || !frm.doc.expense_trust_fees_via_) {\r\n                current_total_allocated += flt(item.allocated_amount);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Calculate total unclaimed amount (hard limit)\r\n    let total_unclaimed = 0;\r\n    if (frm.doc.advances) {\r\n        frm.doc.advances.forEach(function(advance) {\r\n            total_unclaimed += flt(advance.unclaimed_amount);\r\n        });\r\n    }\r\n\r\n    // Calculate project balance (soft limit for pending amounts)\r\n    let project_balance = flt(frm.doc.project_balance) || 0;\r\n\r\n    // Calculate maximum we can allocate for this expense item (based on unclaimed amount - hard limit)\r\n    let max_allocatable_unclaimed = total_unclaimed - current_total_allocated;\r\n\r\n    console.log('Allocation calculation:', {\r\n        total_unclaimed: total_unclaimed,\r\n        current_total_allocated: current_total_allocated,\r\n        max_allocatable_unclaimed: max_allocatable_unclaimed,\r\n        expense_amount: expense_row.amount\r\n    });\r\n\r\n    // Use unclaimed amount as the hard limit for allocation\r\n    let remaining_amount = Math.min(flt(expense_row.amount), max_allocatable_unclaimed);\r\n    let total_allocated = 0;\r\n    let allocations = [];\r\n\r\n    console.log('Remaining amount to allocate:', remaining_amount);\r\n\r\n    // Try to allocate from available advances\r\n    if (frm.doc.advances && remaining_amount > 0) {\r\n        frm.doc.advances.forEach(function(advance) {\r\n            if (remaining_amount > 0) {\r\n                let available = flt(advance.unclaimed_amount) - flt(advance.allocated_amount);\r\n                if (available > 0) {\r\n                    let allocate = Math.min(remaining_amount, available);\r\n                    total_allocated += allocate;\r\n                    remaining_amount -= allocate;\r\n\r\n                    // Update advance allocated amount\r\n                    advance.allocated_amount = flt(advance.allocated_amount) + allocate;\r\n                    allocations.push({\r\n                        advance: advance.employee_advance,\r\n                        amount: allocate\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // Set allocated amount\r\n    expense_row.allocated_amount = total_allocated;\r\n\r\n    console.log('Final allocation result:', {\r\n        expense_amount: expense_row.amount,\r\n        allocated_amount: total_allocated,\r\n        remaining_unallocated: flt(expense_row.amount) - total_allocated\r\n    });\r\n\r\n    // Refresh fields to show real-time updates\r\n    frm.refresh_field('expenses_items');\r\n    frm.refresh_field('advances');\r\n\r\n    // Don't calculate pending amount here - will be done by update_all_pending_amounts\r\n    // This ensures consistent calculation across all expense items\r\n\r\n    // Show allocation details if any\r\n    if (allocations.length > 0) {\r\n        let allocation_msg = allocations.map(a =>\r\n            `${a.advance}: ${format_currency(a.amount)}`\r\n        ).join('<br>');\r\n\r\n        frappe.show_alert({\r\n            message: __('Auto-allocated from advances:<br>{0}', [allocation_msg]),\r\n            indicator: 'green'\r\n        }, 5);\r\n    }\r\n\r\n    // Show warning if we couldn't allocate the full amount due to unclaimed limit\r\n    if (flt(expense_row.amount) > max_allocatable_unclaimed && max_allocatable_unclaimed >= 0) {\r\n        frappe.show_alert({\r\n            message: __('Could only allocate {0} of {1} due to unclaimed amount limit',\r\n                [format_currency(total_allocated), format_currency(expense_row.amount)]),\r\n            indicator: 'orange'\r\n        }, 5);\r\n    }\r\n\r\n    // Calculate total allocated amount for project balance warning\r\n    let total_expense_allocated = current_total_allocated + total_allocated;\r\n\r\n    // Show warning if project balance is exceeded (soft warning)\r\n    if (project_balance > 0 && total_expense_allocated > project_balance) {\r\n        frappe.show_alert({\r\n            message: __('Warning: Total allocations ({0}) exceed project balance ({1})',\r\n                [format_currency(total_expense_allocated), format_currency(project_balance)]),\r\n            indicator: 'yellow'\r\n        }, 5);\r\n    }\r\n\r\n    // Update all pending amounts based on project_balance\r\n    update_all_pending_amounts(frm);\r\n\r\n    frm.refresh_field('expenses_items');\r\n    frm.refresh_field('advances');\r\n}\r\n\r\nfunction validate_expense_allocation(frm, expense_row) {\r\n    if (flt(expense_row.allocated_amount) > flt(expense_row.amount)) {\r\n        frappe.msgprint({\r\n            title: __('Invalid Allocation'),\r\n            message: __('Allocated amount ({0}) cannot exceed expense amount ({1})',\r\n                [format_currency(expense_row.allocated_amount),\r\n                 format_currency(expense_row.amount)]),\r\n            indicator: 'red'\r\n        });\r\n        expense_row.allocated_amount = expense_row.amount;\r\n        frm.refresh_field('expenses_items');\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction validate_before_save(frm) {\r\n    // Calculate total allocated amount from all expense items and trust fees expenses\r\n    let total_allocated = 0;\r\n    if (frm.doc.expenses_items) {\r\n        frm.doc.expenses_items.forEach(function(item) {\r\n            total_allocated += flt(item.allocated_amount);\r\n        });\r\n    }\r\n\r\n    // Calculate total claimed trust fees and their allocated amounts\r\n    let total_claimed_trust_fees = 0;\r\n    if (frm.doc.trust_fees_expenses) {\r\n        frm.doc.trust_fees_expenses.forEach(function(item) {\r\n            total_claimed_trust_fees += flt(item.amount);\r\n            // Only include allocated amounts from trust fees via Employee Advance\r\n            if (frm.doc.expense_trust_fees_via_ === 'Employee Advance' || !frm.doc.expense_trust_fees_via_) {\r\n                total_allocated += flt(item.allocated_amount);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Validate trust fees don't exceed trust fees balance\r\n    let trust_fees_balance = flt(frm.doc.trust_fees_balance) || 0;\r\n    if (total_claimed_trust_fees > trust_fees_balance) {\r\n        frappe.msgprint({\r\n            title: __('Cannot Save - Trust Fees Limit Exceeded'),\r\n            message: __('Total claimed trust fees ({0}) exceeds available trust fees balance ({1})',\r\n                [format_currency(total_claimed_trust_fees), format_currency(trust_fees_balance)]),\r\n            indicator: 'red'\r\n        });\r\n        frappe.validated = false;\r\n        return false;\r\n    }\r\n\r\n    // Calculate total unclaimed amount from advances (HARD LIMIT)\r\n    let total_unclaimed = 0;\r\n    if (frm.doc.advances) {\r\n        frm.doc.advances.forEach(function(advance) {\r\n            total_unclaimed += flt(advance.unclaimed_amount);\r\n        });\r\n    }\r\n\r\n    // HARD LIMIT: Check if total allocated exceeds total unclaimed (BLOCKS SAVING)\r\n    if (total_allocated > total_unclaimed) {\r\n        // Offer to clear and re-allocate\r\n        frappe.confirm(\r\n            __('Cannot Save - Total allocated amount ({0}) exceeds unclaimed amount ({1}).<br><br>Would you like to automatically clear all allocations and re-allocate within the limit?',\r\n                [format_currency(total_allocated), format_currency(total_unclaimed)]),\r\n            function() {\r\n                // Clear and re-allocate\r\n                clear_excess_allocations(frm);\r\n            },\r\n            function() {\r\n                // User declined, show manual options\r\n                frappe.msgprint({\r\n                    title: __('Manual Correction Required'),\r\n                    message: __('Please manually:<br>• Reduce allocated amounts in expense items<br>• Add more employee advances<br>• Or remove some expense items'),\r\n                    indicator: 'red'\r\n                });\r\n            }\r\n        );\r\n\r\n        frappe.validated = false; // This prevents saving\r\n        return false;\r\n    }\r\n\r\n    // HARD LIMIT: Check individual advance allocations (BLOCKS SAVING)\r\n    if (frm.doc.advances) {\r\n        for (let advance of frm.doc.advances) {\r\n            if (flt(advance.allocated_amount) > flt(advance.unclaimed_amount)) {\r\n                frappe.msgprint({\r\n                    title: __('Cannot Save - Individual Advance Limit Exceeded'),\r\n                    message: __('Allocated amount ({0}) exceeds unclaimed amount ({1}) for advance {2}',\r\n                        [format_currency(advance.allocated_amount),\r\n                         format_currency(advance.unclaimed_amount),\r\n                         advance.employee_advance]),\r\n                    indicator: 'red'\r\n                });\r\n\r\n                frappe.validated = false; // This prevents saving\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // SOFT WARNING: Check project balance (ALLOWS SAVING but shows warning)\r\n    let project_balance = flt(frm.doc.project_balance) || 0;\r\n    if (project_balance > 0 && total_allocated > project_balance) {\r\n        frappe.show_alert({\r\n            message: __('Warning: Total allocations ({0}) exceed project balance ({1}). Document will still be saved.',\r\n                [format_currency(total_allocated), format_currency(project_balance)]),\r\n            indicator: 'yellow'\r\n        }, 8);\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction update_pending_amount(frm) {\r\n    // Recalculate pending amounts for ALL expense items based on project_balance\r\n    update_all_pending_amounts(frm);\r\n}\r\n\r\nfunction update_all_pending_amounts(frm) {\r\n    let project_balance = flt(frm.doc.project_balance) || 0;\r\n\r\n    console.log('update_all_pending_amounts called with project_balance:', project_balance);\r\n\r\n    if (project_balance <= 0) {\r\n        // When project balance is negative or zero, ALL expenses should be pending\r\n        console.log('Project balance <= 0, setting all expenses as pending');\r\n        if (frm.doc.expenses_items) {\r\n            frm.doc.expenses_items.forEach(function(item) {\r\n                item.pending_amount = flt(item.amount);\r\n            });\r\n        }\r\n        frm.refresh_field('expenses_items');\r\n        return;\r\n    }\r\n\r\n    // Calculate pending amounts based on project_balance (independent of allocated amounts)\r\n    let cumulative_amount = 0;\r\n    console.log('Starting pending amount calculation with project_balance:', project_balance);\r\n\r\n    if (frm.doc.expenses_items) {\r\n        frm.doc.expenses_items.forEach(function(item, index) {\r\n            let item_amount = flt(item.amount);\r\n            let previous_cumulative = cumulative_amount;\r\n            cumulative_amount += item_amount;\r\n\r\n            console.log(`Item ${index + 1}:`, {\r\n                amount: item_amount,\r\n                previous_cumulative: previous_cumulative,\r\n                new_cumulative: cumulative_amount,\r\n                project_balance: project_balance\r\n            });\r\n\r\n            if (previous_cumulative >= project_balance) {\r\n                // This entire item exceeds project balance\r\n                item.pending_amount = item_amount;\r\n                console.log(`Item ${index + 1}: Entire amount pending (${item_amount})`);\r\n            } else if (cumulative_amount > project_balance) {\r\n                // This item partially exceeds project balance\r\n                let within_balance = project_balance - previous_cumulative;\r\n                item.pending_amount = item_amount - within_balance;\r\n                console.log(`Item ${index + 1}: Partial pending - within_balance: ${within_balance}, pending: ${item.pending_amount}`);\r\n            } else {\r\n                // This item is fully within project balance\r\n                item.pending_amount = 0;\r\n                console.log(`Item ${index + 1}: No pending amount`);\r\n            }\r\n        });\r\n    }\r\n\r\n    frm.refresh_field('expenses_items');\r\n}\r\n\r\n\r\n\r\nfunction validate_and_allocate_expense_row(frm, expense_row) {\r\n    console.log('validate_and_allocate_expense_row called for:', expense_row.amount);\r\n\r\n    if (!expense_row.amount || flt(expense_row.amount) <= 0) {\r\n        expense_row.allocated_amount = 0;\r\n        expense_row.pending_amount = 0;\r\n        return;\r\n    }\r\n\r\n    // Calculate current totals (excluding this row)\r\n    let current_total_allocated = 0;\r\n    let current_total_expenses = 0;\r\n\r\n    // Add from other expenses_items (excluding current row)\r\n    if (frm.doc.expenses_items) {\r\n        frm.doc.expenses_items.forEach(function(item) {\r\n            if (item.name !== expense_row.name) {\r\n                current_total_allocated += flt(item.allocated_amount);\r\n                current_total_expenses += flt(item.amount);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Add from trust_fees_expenses (only those via Employee Advance)\r\n    if (frm.doc.trust_fees_expenses) {\r\n        frm.doc.trust_fees_expenses.forEach(function(item) {\r\n            // Only count allocated amounts from trust fees via Employee Advance\r\n            if (frm.doc.expense_trust_fees_via_ === 'Employee Advance' || !frm.doc.expense_trust_fees_via_) {\r\n                current_total_allocated += flt(item.allocated_amount);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Get limits\r\n    let total_unclaimed = flt(frm.doc.total_unclaimed_amount) || 0;\r\n    let project_balance = flt(frm.doc.project_balance) || 0;\r\n\r\n    // Calculate available amounts\r\n    let available_unclaimed = total_unclaimed - current_total_allocated;\r\n\r\n    // HARD LIMIT CHECK: Cannot exceed unclaimed amount\r\n    if (flt(expense_row.amount) > available_unclaimed) {\r\n        frappe.msgprint({\r\n            title: __('Expense Blocked'),\r\n            message: __('Amount {0} exceeds available {1}. Reduce amount or add more advances.',\r\n                [format_currency(expense_row.amount),\r\n                 format_currency(available_unclaimed)]),\r\n            indicator: 'red'\r\n        });\r\n\r\n        // Clear the amount to prevent saving\r\n        expense_row.amount = 0;\r\n        expense_row.allocated_amount = 0;\r\n        expense_row.pending_amount = 0;\r\n        frm.refresh_field('expenses_items');\r\n        return;\r\n    }\r\n\r\n    // Auto-allocate using the individual allocation system (preserves trust fees)\r\n    auto_allocate_expense(frm, expense_row);\r\n\r\n    // Calculate pending amounts based on project_balance (separate from allocation)\r\n    update_all_pending_amounts(frm);\r\n\r\n    // Ensure all fields are refreshed for real-time updates\r\n    frm.refresh_field('expenses_items');\r\n    frm.refresh_field('advances');\r\n\r\n    // PROJECT BALANCE WARNING: Soft limit check\r\n    if (project_balance > 0) {\r\n        let new_total_expenses = current_total_expenses + flt(expense_row.amount);\r\n\r\n        if (new_total_expenses > project_balance) {\r\n            let excess = new_total_expenses - project_balance;\r\n            frappe.show_alert({\r\n                message: __('Warning: Project balance exceeded by {0}', [format_currency(excess)]),\r\n                indicator: 'yellow'\r\n            }, 5);\r\n        }\r\n    }\r\n\r\n    frm.refresh_field('expenses_items');\r\n}\r\n\r\n// REMOVED: update_advance_allocations() function\r\n// This function was overwriting advance allocations and ignoring trust fees\r\n// Individual allocation functions (auto_allocate_expense, auto_allocate_trust_fee) now handle this\r\n\r\nfunction recalculate_all_allocations(frm) {\r\n    // Reset all advance allocations to 0\r\n    if (frm.doc.advances) {\r\n        frm.doc.advances.forEach(function(advance) {\r\n            advance.allocated_amount = 0;\r\n        });\r\n    }\r\n\r\n    // Recalculate allocations for all expenses_items\r\n    if (frm.doc.expenses_items) {\r\n        frm.doc.expenses_items.forEach(function(item) {\r\n            if (item.amount && flt(item.amount) > 0) {\r\n                auto_allocate_expense(frm, item);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Recalculate allocations for all trust_fees_expenses\r\n    if (frm.doc.trust_fees_expenses) {\r\n        frm.doc.trust_fees_expenses.forEach(function(item) {\r\n            if (item.amount && flt(item.amount) > 0) {\r\n                // Check expense_trust_fees_via_ field before allocating\r\n                if (frm.doc.expense_trust_fees_via_ === 'Employee Advance') {\r\n                    auto_allocate_trust_fee(frm, item);\r\n                } else if (frm.doc.expense_trust_fees_via_ === 'Other') {\r\n                    // Don't allocate from advances\r\n                    item.allocated_amount = 0;\r\n                } else {\r\n                    // Default behavior for backward compatibility\r\n                    auto_allocate_trust_fee(frm, item);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    frm.refresh_field('advances');\r\n}\r\n\r\nfunction synchronize_allocations(frm) {\r\n    // This function ensures that advance allocations match the sum of\r\n    // allocated amounts from both expenses_items and trust_fees_expenses\r\n    // Used on form load to fix any inconsistencies\r\n\r\n    console.log('Synchronizing allocations...');\r\n\r\n    // Calculate expected allocations for each advance\r\n    let advance_allocations = {};\r\n\r\n    // Initialize all advances to 0\r\n    if (frm.doc.advances) {\r\n        frm.doc.advances.forEach(function(advance) {\r\n            advance_allocations[advance.employee_advance] = 0;\r\n        });\r\n    }\r\n\r\n    // Add allocations from expenses_items\r\n    if (frm.doc.expenses_items) {\r\n        frm.doc.expenses_items.forEach(function(item) {\r\n            if (item.allocated_amount && flt(item.allocated_amount) > 0) {\r\n                // For expenses_items, we need to distribute the allocation across advances\r\n                // This is a simplified approach - in practice, we'd need to track which advance each allocation came from\r\n                let remaining = flt(item.allocated_amount);\r\n                if (frm.doc.advances) {\r\n                    frm.doc.advances.forEach(function(advance) {\r\n                        if (remaining > 0) {\r\n                            let available = flt(advance.unclaimed_amount) - advance_allocations[advance.employee_advance];\r\n                            if (available > 0) {\r\n                                let allocate = Math.min(remaining, available);\r\n                                advance_allocations[advance.employee_advance] += allocate;\r\n                                remaining -= allocate;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // Add allocations from trust_fees_expenses (only if via Employee Advance)\r\n    if (frm.doc.trust_fees_expenses) {\r\n        frm.doc.trust_fees_expenses.forEach(function(item) {\r\n            // Only count allocated amounts from trust fees that are via Employee Advance\r\n            if (item.allocated_amount && flt(item.allocated_amount) > 0 && \r\n                (frm.doc.expense_trust_fees_via_ === 'Employee Advance' || !frm.doc.expense_trust_fees_via_)) {\r\n                let remaining = flt(item.allocated_amount);\r\n                if (frm.doc.advances) {\r\n                    frm.doc.advances.forEach(function(advance) {\r\n                        if (remaining > 0) {\r\n                            let available = flt(advance.unclaimed_amount) - advance_allocations[advance.employee_advance];\r\n                            if (available > 0) {\r\n                                let allocate = Math.min(remaining, available);\r\n                                advance_allocations[advance.employee_advance] += allocate;\r\n                                remaining -= allocate;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // Update advance allocated amounts\r\n    if (frm.doc.advances) {\r\n        frm.doc.advances.forEach(function(advance) {\r\n            advance.allocated_amount = advance_allocations[advance.employee_advance] || 0;\r\n        });\r\n    }\r\n\r\n    console.log('Allocation synchronization complete');\r\n    frm.refresh_field('advances');\r\n}\r\n\r\nfunction update_pending_items_table(frm) {\r\n    console.log('update_pending_items_table called');\r\n\r\n    // Clear existing pending items\r\n    frm.clear_table('pending_items');\r\n\r\n    // Add pending items for expenses with pending amounts\r\n    if (frm.doc.expenses_items) {\r\n        frm.doc.expenses_items.forEach(function(expense_item, index) {\r\n            let pending_amount = flt(expense_item.pending_amount);\r\n\r\n            console.log(`Checking expense item ${index + 1} for pending:`, {\r\n                amount: expense_item.amount,\r\n                pending_amount: pending_amount,\r\n                will_add_to_pending_items: pending_amount > 0\r\n            });\r\n\r\n            if (pending_amount > 0) {\r\n                let pending_item = frm.add_child('pending_items');\r\n                pending_item.amount = pending_amount;\r\n                pending_item.expense_account = expense_item.expense_account || '';\r\n                pending_item.paid = 0;\r\n                console.log(`Added pending item with amount: ${pending_amount}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    frm.refresh_field('pending_items');\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction calculate_totals(frm) {\r\n    let total_expenses = 0;\r\n    let total_pending = 0;\r\n    let total_advances = 0;\r\n    let total_pending_items = 0;\r\n    let total_unclaimed_amount = 0;\r\n    let total_allocated = 0;\r\n    let total_claimed_trust_fees = 0;\r\n\r\n    // Calculate total expenses, pending, and allocated from expenses_items\r\n    if (frm.doc.expenses_items) {\r\n        frm.doc.expenses_items.forEach(function(item) {\r\n            total_expenses += flt(item.amount);\r\n            total_pending += flt(item.pending_amount);\r\n            total_allocated += flt(item.allocated_amount);\r\n        });\r\n    }\r\n\r\n    // Calculate total claimed trust fees from trust_fees_expenses\r\n    if (frm.doc.trust_fees_expenses) {\r\n        frm.doc.trust_fees_expenses.forEach(function(item) {\r\n            total_claimed_trust_fees += flt(item.amount);\r\n            // Only add trust fees allocated amounts from those via Employee Advance\r\n            if (item.expense_trust_fees_via_ === 'Employee Advance' || !item.expense_trust_fees_via_) {\r\n                total_allocated += flt(item.allocated_amount);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Calculate total from pending_items table\r\n    if (frm.doc.pending_items) {\r\n        frm.doc.pending_items.forEach(function(item) {\r\n            total_pending_items += flt(item.amount);\r\n        });\r\n    }\r\n\r\n    // Calculate total advances and unclaimed amounts\r\n    if (frm.doc.advances) {\r\n        frm.doc.advances.forEach(function(advance) {\r\n            total_advances += flt(advance.advance_paid);\r\n            total_unclaimed_amount += flt(advance.unclaimed_amount);\r\n        });\r\n    }\r\n\r\n    // Update totals\r\n    frm.set_value('total_expenses', total_expenses);\r\n    frm.set_value('total_pending', total_pending_items); // Use pending_items total\r\n    frm.set_value('total_advances', total_advances);\r\n    frm.set_value('total_unclaimed_amount', total_unclaimed_amount);\r\n    frm.set_value('total_claimed_trust_fees', total_claimed_trust_fees);\r\n\r\n    console.log('calculate_totals result:', {\r\n        total_expenses: total_expenses,\r\n        total_allocated: total_allocated,\r\n        total_unclaimed_amount: total_unclaimed_amount,\r\n        total_pending_items: total_pending_items\r\n    });\r\n\r\n    // Show warnings for project balance if exceeded\r\n    let project_balance = flt(frm.doc.project_balance) || 0;\r\n    let total_project_usage = total_allocated + total_pending;\r\n\r\n    if (project_balance > 0 && total_project_usage > project_balance) {\r\n        // Update form indicator or add visual cue\r\n        frm.dashboard.add_indicator(__('Project Balance Exceeded'), 'orange');\r\n    } else if (project_balance > 0) {\r\n        frm.dashboard.add_indicator(__('Within Project Balance'), 'green');\r\n    }\r\n}\r\n\r\n// Utility function for currency formatting\r\nfunction format_currency(amount) {\r\n    return frappe.format(amount, {fieldtype: 'Currency'});\r\n}\r\n\r\n// Trust fees validation and allocation functions\r\nfunction validate_and_allocate_trust_fee_row(frm, row) {\r\n    console.log('validate_and_allocate_trust_fee_row called for amount:', row.amount);\r\n    let amount = flt(row.amount) || 0;\r\n    let trust_fees_balance = flt(frm.doc.trust_fees_balance) || 0;\r\n\r\n    // First validate against trust fees balance\r\n    if (amount > trust_fees_balance) {\r\n        frappe.msgprint({\r\n            title: __('Trust Fees Balance Exceeded'),\r\n            message: __('Amount ({0}) exceeds available trust fees balance ({1})',\r\n                [format_currency(amount), format_currency(trust_fees_balance)]),\r\n            indicator: 'orange'\r\n        });\r\n\r\n        // Set to maximum allowed amount\r\n        frappe.model.set_value(row.doctype, row.name, 'amount', trust_fees_balance);\r\n        amount = trust_fees_balance;\r\n    }\r\n\r\n    // Check expense_trust_fees_via_ field to determine allocation behavior\r\n    if (frm.doc.expense_trust_fees_via_ === 'Employee Advance') {\r\n        // Auto-allocate from advances (similar to regular expenses)\r\n        auto_allocate_trust_fee(frm, row);\r\n    } else if (frm.doc.expense_trust_fees_via_ === 'Other') {\r\n        // Don't allocate from advances, set allocated_amount to 0\r\n        row.allocated_amount = 0;\r\n        console.log('Trust fee set to Other - no advance allocation');\r\n    } else {\r\n        // Default behavior for backward compatibility - allocate from advances\r\n        auto_allocate_trust_fee(frm, row);\r\n    }\r\n}\r\n\r\nfunction auto_allocate_trust_fee(frm, trust_fee_row) {\r\n    if (!trust_fee_row.amount || flt(trust_fee_row.amount) <= 0) {\r\n        // Clear any previous allocation for this row\r\n        if (trust_fee_row.allocated_amount && trust_fee_row.allocated_amount > 0) {\r\n            // Remove previous allocation from advances\r\n            remove_trust_fee_allocation(frm, trust_fee_row);\r\n        }\r\n        trust_fee_row.allocated_amount = 0;\r\n        return;\r\n    }\r\n\r\n    // Check if expense_trust_fees_via_ is set to 'Other' - if so, don't allocate from advances\r\n    if (frm.doc.expense_trust_fees_via_ === 'Other') {\r\n        // Clear any previous allocation for this row\r\n        if (trust_fee_row.allocated_amount && trust_fee_row.allocated_amount > 0) {\r\n            remove_trust_fee_allocation(frm, trust_fee_row);\r\n        }\r\n        trust_fee_row.allocated_amount = 0;\r\n        console.log('Trust fee via Other - skipping advance allocation');\r\n        return;\r\n    }\r\n\r\n    // Remove any previous allocation for this row first\r\n    if (trust_fee_row.allocated_amount && trust_fee_row.allocated_amount > 0) {\r\n        remove_trust_fee_allocation(frm, trust_fee_row);\r\n    }\r\n\r\n    // Calculate current total allocated amount (excluding this trust fee item)\r\n    let current_total_allocated = 0;\r\n\r\n    // Add from expenses_items\r\n    if (frm.doc.expenses_items) {\r\n        frm.doc.expenses_items.forEach(function(item) {\r\n            current_total_allocated += flt(item.allocated_amount);\r\n        });\r\n    }\r\n\r\n    // Add from other trust_fees_expenses (excluding current row, only those via Employee Advance)\r\n    if (frm.doc.trust_fees_expenses) {\r\n        frm.doc.trust_fees_expenses.forEach(function(item) {\r\n            if (item.name !== trust_fee_row.name) { // Exclude current row\r\n                // Only count allocated amounts from trust fees via Employee Advance\r\n                if (frm.doc.expense_trust_fees_via_ === 'Employee Advance' || !frm.doc.expense_trust_fees_via_) {\r\n                    current_total_allocated += flt(item.allocated_amount);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    console.log('Trust fee allocation - Current total allocated:', current_total_allocated);\r\n\r\n    // Calculate total unclaimed amount (hard limit)\r\n    let total_unclaimed = 0;\r\n    if (frm.doc.advances) {\r\n        frm.doc.advances.forEach(function(advance) {\r\n            total_unclaimed += flt(advance.unclaimed_amount);\r\n        });\r\n    }\r\n\r\n    console.log('Trust fee allocation - Total unclaimed:', total_unclaimed);\r\n\r\n    // Calculate maximum we can allocate for this trust fee item\r\n    let max_allocatable_unclaimed = total_unclaimed - current_total_allocated;\r\n\r\n    console.log('Trust fee allocation - Max allocatable:', max_allocatable_unclaimed);\r\n\r\n    // Use unclaimed amount as the hard limit for allocation\r\n    let remaining_amount = Math.min(flt(trust_fee_row.amount), max_allocatable_unclaimed);\r\n    let total_allocated = 0;\r\n    let allocations = [];\r\n\r\n    console.log('Trust fee allocation - Remaining to allocate:', remaining_amount);\r\n\r\n    // Try to allocate from available advances\r\n    if (frm.doc.advances && remaining_amount > 0) {\r\n        frm.doc.advances.forEach(function(advance) {\r\n            if (remaining_amount > 0) {\r\n                let available = flt(advance.unclaimed_amount) - flt(advance.allocated_amount);\r\n                console.log('Advance', advance.employee_advance, 'available:', available);\r\n                if (available > 0) {\r\n                    let allocate = Math.min(remaining_amount, available);\r\n                    total_allocated += allocate;\r\n                    remaining_amount -= allocate;\r\n\r\n                    // Update advance allocated amount\r\n                    let old_allocated = flt(advance.allocated_amount);\r\n                    advance.allocated_amount = old_allocated + allocate;\r\n                    console.log('Updated advance', advance.employee_advance, 'from', old_allocated, 'to', advance.allocated_amount);\r\n\r\n                    allocations.push({\r\n                        advance: advance.employee_advance,\r\n                        amount: allocate\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // Set allocated amount\r\n    trust_fee_row.allocated_amount = total_allocated;\r\n    console.log('Trust fee row allocated amount set to:', total_allocated);\r\n\r\n    // Show warning if not fully allocated\r\n    if (total_allocated < flt(trust_fee_row.amount)) {\r\n        frappe.msgprint({\r\n            title: __('Partial Trust Fee Allocation'),\r\n            message: __('Only {0} out of {1} could be allocated from available advances',\r\n                [format_currency(total_allocated), format_currency(trust_fee_row.amount)]),\r\n            indicator: 'yellow'\r\n        });\r\n    }\r\n\r\n    // Refresh advances table\r\n    frm.refresh_field('advances');\r\n    frm.refresh_field('trust_fees_expenses');\r\n}\r\n\r\nfunction remove_trust_fee_allocation(frm, trust_fee_row) {\r\n    let previous_allocation = flt(trust_fee_row.allocated_amount);\r\n    if (previous_allocation <= 0) return;\r\n\r\n    console.log('Removing previous trust fee allocation:', previous_allocation);\r\n\r\n    // Remove allocation from advances (in reverse order)\r\n    let remaining_to_remove = previous_allocation;\r\n    if (frm.doc.advances) {\r\n        // Process advances in reverse order to remove allocation\r\n        for (let i = frm.doc.advances.length - 1; i >= 0 && remaining_to_remove > 0; i--) {\r\n            let advance = frm.doc.advances[i];\r\n            let current_allocated = flt(advance.allocated_amount);\r\n\r\n            if (current_allocated > 0) {\r\n                let to_remove = Math.min(remaining_to_remove, current_allocated);\r\n                advance.allocated_amount = current_allocated - to_remove;\r\n                remaining_to_remove -= to_remove;\r\n                console.log('Removed', to_remove, 'from advance', advance.employee_advance, 'new allocated:', advance.allocated_amount);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction validate_trust_fee_allocation(frm, row) {\r\n    let allocated_amount = flt(row.allocated_amount) || 0;\r\n    let total_amount = flt(row.amount) || 0;\r\n    let total_unclaimed = get_total_unclaimed_advances(frm);\r\n\r\n    // Check if allocated amount exceeds total amount\r\n    if (allocated_amount > total_amount) {\r\n        frappe.msgprint({\r\n            title: __('Invalid Allocation'),\r\n            message: __('Allocated amount ({0}) cannot exceed total amount ({1})',\r\n                [format_currency(allocated_amount), format_currency(total_amount)]),\r\n            indicator: 'red'\r\n        });\r\n\r\n        frappe.model.set_value(row.doctype, row.name, 'allocated_amount', total_amount);\r\n        return;\r\n    }\r\n\r\n    // Check if allocated amount exceeds unclaimed advances\r\n    if (allocated_amount > total_unclaimed) {\r\n        frappe.msgprint({\r\n            title: __('Insufficient Advances'),\r\n            message: __('Allocated amount ({0}) exceeds available unclaimed advances ({1})',\r\n                [format_currency(allocated_amount), format_currency(total_unclaimed)]),\r\n            indicator: 'orange'\r\n        });\r\n\r\n        frappe.model.set_value(row.doctype, row.name, 'allocated_amount', total_unclaimed);\r\n    }\r\n}\r\n\r\nfunction validate_trust_fees_allocation(frm, row) {\r\n    let trust_fees_balance = flt(frm.doc.trust_fees_balance) || 0;\r\n    let current_amount = flt(row.amount) || 0;\r\n\r\n    // Calculate total claimed trust fees excluding current row\r\n    let total_other_trust_fees = 0;\r\n    if (frm.doc.trust_fees_expenses) {\r\n        frm.doc.trust_fees_expenses.forEach(function(item) {\r\n            if (item.name !== row.name) {\r\n                total_other_trust_fees += flt(item.amount);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Check if current amount would exceed trust fees balance\r\n    if (current_amount + total_other_trust_fees > trust_fees_balance) {\r\n        let max_allowed = trust_fees_balance - total_other_trust_fees;\r\n        if (max_allowed < 0) max_allowed = 0;\r\n\r\n        frappe.msgprint({\r\n            title: __('Trust Fees Limit Exceeded'),\r\n            message: __('Amount ({0}) would exceed available trust fees balance. Maximum allowed: {1}',\r\n                [format_currency(current_amount), format_currency(max_allowed)]),\r\n            indicator: 'orange'\r\n        });\r\n\r\n        // Set to maximum allowed amount\r\n        frappe.model.set_value(row.doctype, row.name, 'amount', max_allowed);\r\n    }\r\n}\r\n\r\n// Update advances allocation based on total allocated amounts\r\nfunction update_advances_allocation(frm) {\r\n    // Calculate total allocated amount from all sources\r\n    let total_allocated = 0;\r\n\r\n    // Add from expenses_items\r\n    if (frm.doc.expenses_items) {\r\n        frm.doc.expenses_items.forEach(function(item) {\r\n            total_allocated += flt(item.allocated_amount);\r\n        });\r\n    }\r\n\r\n    // Add from trust_fees_expenses (only those via Employee Advance)\r\n    if (frm.doc.trust_fees_expenses) {\r\n        frm.doc.trust_fees_expenses.forEach(function(item) {\r\n            // Only count allocated amounts from trust fees via Employee Advance\r\n            if (frm.doc.expense_trust_fees_via_ === 'Employee Advance' || !frm.doc.expense_trust_fees_via_) {\r\n                total_allocated += flt(item.allocated_amount);\r\n            }\r\n        });\r\n    }\r\n\r\n    console.log('Total allocated to distribute:', total_allocated);\r\n\r\n    // If no allocation, clear all advance allocations\r\n    if (total_allocated === 0) {\r\n        if (frm.doc.advances) {\r\n            frm.doc.advances.forEach(function(advance) {\r\n                frappe.model.set_value(advance.doctype, advance.name, 'allocated_amount', 0);\r\n            });\r\n        }\r\n        return;\r\n    }\r\n\r\n    // Distribute total allocated amount across advances based on their unclaimed amounts\r\n    let remaining_to_allocate = total_allocated;\r\n\r\n    if (frm.doc.advances) {\r\n        // Sort advances by unclaimed amount (descending) for better allocation\r\n        let advances_sorted = frm.doc.advances.slice().sort(function(a, b) {\r\n            return flt(b.unclaimed_amount) - flt(a.unclaimed_amount);\r\n        });\r\n\r\n        advances_sorted.forEach(function(advance) {\r\n            let unclaimed = flt(advance.unclaimed_amount);\r\n            let allocation_for_this_advance = Math.min(remaining_to_allocate, unclaimed);\r\n\r\n            frappe.model.set_value(advance.doctype, advance.name, 'allocated_amount', allocation_for_this_advance);\r\n            remaining_to_allocate -= allocation_for_this_advance;\r\n\r\n            if (remaining_to_allocate <= 0) {\r\n                return false; // Break the loop\r\n            }\r\n        });\r\n    }\r\n\r\n    // Refresh the advances table\r\n    frm.refresh_field('advances');\r\n}\r\n\r\n// Additional utility functions\r\nfunction get_total_unclaimed_advances(frm) {\r\n    let total = 0;\r\n    if (frm.doc.advances) {\r\n        frm.doc.advances.forEach(function(advance) {\r\n            total += flt(advance.unclaimed_amount);\r\n        });\r\n    }\r\n    return total;\r\n}\r\n\r\nfunction get_total_allocated_from_advances(frm) {\r\n    let total = 0;\r\n    if (frm.doc.advances) {\r\n        frm.doc.advances.forEach(function(advance) {\r\n            total += flt(advance.allocated_amount);\r\n        });\r\n    }\r\n    return total;\r\n}\r\n\r\nfunction clear_trust_fees_allocations(frm) {\r\n    console.log('Clearing all trust fees allocations from advances');\r\n    \r\n    // Clear allocated amounts from all trust fees expenses\r\n    if (frm.doc.trust_fees_expenses) {\r\n        frm.doc.trust_fees_expenses.forEach(function(item) {\r\n            if (item.allocated_amount && flt(item.allocated_amount) > 0) {\r\n                console.log('Clearing allocation from trust fee:', item.allocated_amount);\r\n                item.allocated_amount = 0;\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Recalculate advance allocations to remove trust fees allocations\r\n    recalculate_all_allocations(frm);\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Project Expenses",
  "enabled": 1,
  "modified": "2025-08-31 13:28:09.777563",
  "module": "Orbit",
  "name": "Fetch Customer's advance account",
  "script": "frappe.ui.form.on('Project Expenses', {\r\n    customer: function(frm) {\r\n        if (frm.doc.customer) {\r\n            // Fetch Customer details\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Customer',\r\n                    name: frm.doc.customer\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.accounts) {\r\n                        const company = frappe.defaults.get_user_default('company');\r\n                        // Find account for current company\r\n                        const companyAccount = r.message.accounts.find(\r\n                            acc => acc.company === company\r\n                        );\r\n                        \r\n                        if (companyAccount && companyAccount.advance_account) {\r\n                            frm.set_value('customer_advance_account', companyAccount.advance_account);\r\n                        } else {\r\n                            frm.set_value('customer_advance_account', '');\r\n                        }\r\n                    } else {\r\n                        frm.set_value('customer_advance_account', '');\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // Clear if no customer selected\r\n            frm.set_value('customer_advance_account', '');\r\n        }\r\n    },\r\n\r\n    mode_of_payment: function(frm) {\r\n        if (frm.doc.mode_of_payment) {\r\n            // Fetch Mode of Payment details\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Mode of Payment',\r\n                    name: frm.doc.mode_of_payment\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.accounts && r.message.accounts.length > 0) {\r\n                        const company = frappe.defaults.get_user_default('company');\r\n                        \r\n                        // Find the account entry for the current company\r\n                        const companyAccount = r.message.accounts.find(\r\n                            acc => acc.company === company\r\n                        );\r\n                        \r\n                        if (companyAccount && companyAccount.default_account) {\r\n                            frm.set_value('payment_account', companyAccount.default_account);\r\n                        } else if (r.message.accounts[0].default_account) {\r\n                            // Fallback to first account if company-specific account not found\r\n                            frm.set_value('payment_account', r.message.accounts[0].default_account);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            frm.set_value('payment_account', '');\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Project Agreement",
  "enabled": 1,
  "modified": "2025-08-31 13:28:10.522189",
  "module": "Orbit",
  "name": "summing amount from project_services table",
  "script": "// Project Agreement Client Script - Calculate and Update Totals\r\n// Script Type: Client Script\r\n// Reference Document Type: Project Agreement\r\n// Apply To: Form\r\n\r\nfrappe.ui.form.on('Project Agreement', {\r\n    refresh: function(frm) {\r\n        console.log('Project Agreement refresh triggered');\r\n        // Calculate totals when form loads\r\n        setTimeout(function() {\r\n            calculate_and_update_totals(frm);\r\n        }, 1000);\r\n    },\r\n\r\n    onload: function(frm) {\r\n        console.log('Project Agreement onload triggered');\r\n        setTimeout(function() {\r\n            calculate_and_update_totals(frm);\r\n        }, 1500);\r\n    },\r\n\r\n    // Trigger calculations when child tables change\r\n    project_services_add: function(frm, cdt, cdn) {\r\n        calculate_and_update_totals(frm);\r\n    },\r\n\r\n    project_services_remove: function(frm, cdt, cdn) {\r\n        calculate_and_update_totals(frm);\r\n    },\r\n\r\n    outsource_services_add: function(frm, cdt, cdn) {\r\n        calculate_and_update_totals(frm);\r\n    },\r\n\r\n    outsource_services_remove: function(frm, cdt, cdn) {\r\n        calculate_and_update_totals(frm);\r\n    },\r\n\r\n    contractors_services_add: function(frm, cdt, cdn) {\r\n        calculate_and_update_totals(frm);\r\n    },\r\n\r\n    contractors_services_remove: function(frm, cdt, cdn) {\r\n        calculate_and_update_totals(frm);\r\n    },\r\n\r\n    // Trigger when specific fields in child tables change\r\n    project_services_amount: function(frm, cdt, cdn) {\r\n        calculate_and_update_totals(frm);\r\n    },\r\n\r\n    outsource_services_amount: function(frm, cdt, cdn) {\r\n        calculate_and_update_totals(frm);\r\n    },\r\n\r\n    outsource_services_tax_amount: function(frm, cdt, cdn) {\r\n        calculate_and_update_totals(frm);\r\n    },\r\n\r\n    contractors_services_amount: function(frm, cdt, cdn) {\r\n        calculate_and_update_totals(frm);\r\n    }\r\n});\r\n\r\n// Function to calculate total services amount from project_services table\r\nfunction calculate_total_services_amount(project_services) {\r\n    if (!project_services || !Array.isArray(project_services)) {\r\n        return 0;\r\n    }\r\n    \r\n    return project_services.reduce((total, row) => {\r\n        const amount = parseFloat(row.amount) || 0;\r\n        return total + amount;\r\n    }, 0);\r\n}\r\n\r\n// Function to calculate total requested services from outsource_services table\r\nfunction calculate_total_requested_services(outsource_services) {\r\n    if (!outsource_services || !Array.isArray(outsource_services)) {\r\n        return 0;\r\n    }\r\n    \r\n    return outsource_services.reduce((total, row) => {\r\n        const tax_amount = parseFloat(row.tax_amount) || 0;\r\n        const amount = parseFloat(row.amount) || 0;\r\n        return total + tax_amount + amount;\r\n    }, 0);\r\n}\r\n\r\n// Function to calculate total contractors services from contractors_services table\r\nfunction calculate_total_contractors_services(contractors_services) {\r\n    if (!contractors_services || !Array.isArray(contractors_services)) {\r\n        return 0;\r\n    }\r\n    \r\n    return contractors_services.reduce((total, row) => {\r\n        const amount = parseFloat(row.amount) || 0;\r\n        return total + amount;\r\n    }, 0);\r\n}\r\n\r\n// Main function to calculate and update totals\r\nfunction calculate_and_update_totals(frm) {\r\n    console.log('calculate_and_update_totals called');\r\n\r\n    // Only calculate if document exists\r\n    if (!frm.doc.name) {\r\n        console.log('No document name, skipping calculations');\r\n        return;\r\n    }\r\n\r\n    console.log('Document found:', frm.doc.name);\r\n\r\n    // Calculate totals from tables\r\n    const total_services_amount = calculate_total_services_amount(frm.doc.project_services);\r\n    const total_requested_services = calculate_total_requested_services(frm.doc.outsource_services);\r\n    const total_contractors_services = calculate_total_contractors_services(frm.doc.contractors_services);\r\n\r\n    console.log('Calculated totals:', {\r\n        total_services_amount: total_services_amount,\r\n        total_requested_services: total_requested_services,\r\n        total_contractors_services: total_contractors_services\r\n    });\r\n\r\n    // Update the document fields\r\n    frm.set_value('total_services_amount', total_services_amount);\r\n    frm.set_value('total_requested_services', total_requested_services);\r\n    frm.set_value('total_contractors_services', total_contractors_services);\r\n\r\n    // Refresh the form to show updated values\r\n    frm.refresh_field('total_services_amount');\r\n    frm.refresh_field('total_requested_services');\r\n    frm.refresh_field('total_contractors_services');\r\n\r\n    console.log('Totals updated successfully');\r\n}\r\n\r\n// End of script - focused on calculating and updating totals\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Project Agreement",
  "enabled": 1,
  "modified": "2025-08-31 13:28:10.661427",
  "module": "Orbit",
  "name": "Comprehensive Summary Display",
  "script": "// Project Agreement - Unified Client Script\r\n// Consolidates all Project Agreement functionality:\r\n// 1. Summary display and financial calculations\r\n// 2. Invoice creation and management\r\n// 3. Form validation and field handlers\r\n// Version: 2.0 - Unified and Enhanced\r\n\r\n// Global flag to prevent duplicate executions\r\nlet project_agreement_initialized = false;\r\nlet summary_injection_in_progress = false;\r\n\r\n// Single unified form handler\r\nfrappe.ui.form.on('Project Agreement', {\r\n    onload: function(frm) {\r\n        console.log('🚀 Project Agreement onload triggered');\r\n        \r\n        // Prevent duplicate initialization\r\n        if (project_agreement_initialized) {\r\n            console.log('⚠️ Already initialized, skipping onload');\r\n            return;\r\n        }\r\n        \r\n        project_agreement_initialized = true;\r\n        \r\n        // Initialize all functionality\r\n        setup_project_services_handlers(frm);\r\n        \r\n        // Inject summary with delay to ensure DOM is ready\r\n        setTimeout(function() {\r\n            inject_project_summary(frm);\r\n        }, 500);\r\n    },\r\n\r\n    refresh: function(frm) {\r\n        console.log('🔄 Project Agreement refresh triggered');\r\n        \r\n        // Refresh summary (but prevent duplicate injections)\r\n        if (!summary_injection_in_progress) {\r\n            setTimeout(function() {\r\n                inject_project_summary(frm);\r\n            }, 300);\r\n        }\r\n    },\r\n\r\n    before_submit: function(frm) {\r\n        console.log('📝 Project Agreement before_submit triggered');\r\n        // Validation logic can go here\r\n    },\r\n    \r\n    after_submit: function(frm) {\r\n        console.log('✅ Project Agreement after_submit triggered');\r\n        \r\n        // Create invoices for all services after submit\r\n        let services_to_invoice = frm.doc.project_services.filter(service => \r\n            service.item && !service.invoiced\r\n        );\r\n        \r\n        if (services_to_invoice.length > 0) {\r\n            frappe.msgprint({\r\n                title: __('Creating Invoices'),\r\n                message: __('Creating invoices for {0} services...', [services_to_invoice.length]),\r\n                indicator: 'blue'\r\n            });\r\n            \r\n            create_invoices_batch(frm, services_to_invoice);\r\n        }\r\n    },\r\n\r\n    // Child table handlers\r\n    project_services_add: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        if (frm.doc.docstatus === 1) {\r\n            create_invoice_for_service_row(frm, row);\r\n        }\r\n        // Refresh totals and summary\r\n        refresh_project_totals(frm);\r\n        inject_project_summary(frm);\r\n    },\r\n\r\n    project_services_remove: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        if (row.reference_invoice && row.invoiced) {\r\n            frappe.msgprint({\r\n                title: __('Warning'),\r\n                message: __('This service has already been invoiced. Removing it will not delete the created invoice.'),\r\n                indicator: 'orange'\r\n            });\r\n        }\r\n        // Refresh totals and summary\r\n        refresh_project_totals(frm);\r\n        inject_project_summary(frm);\r\n    }\r\n});\r\n\r\n// Child table field handlers\r\nfrappe.ui.form.on('Project Services', {\r\n    item: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        if (row.item && row.invoiced) {\r\n            frappe.msgprint({\r\n                title: __('Item Already Invoiced'),\r\n                message: __('This service has already been invoiced. Changing the item may cause inconsistencies.'),\r\n                indicator: 'orange'\r\n            });\r\n        }\r\n    },\r\n    \r\n    amount: function(frm, cdt, cdn) {\r\n        refresh_project_totals(frm);\r\n        inject_project_summary(frm);\r\n    }\r\n});\r\n\r\n// Government Fees handlers\r\nfrappe.ui.form.on('Government Fees', {\r\n    government_fees_add: function(frm, cdt, cdn) {\r\n        refresh_project_totals(frm);\r\n        inject_project_summary(frm);\r\n    },\r\n    \r\n    government_fees_remove: function(frm, cdt, cdn) {\r\n        refresh_project_totals(frm);\r\n        inject_project_summary(frm);\r\n    },\r\n    \r\n    amount: function(frm, cdt, cdn) {\r\n        refresh_project_totals(frm);\r\n        inject_project_summary(frm);\r\n    }\r\n});\r\n\r\n// ==================== SUMMARY FUNCTIONS ====================\r\n\r\nfunction inject_project_summary(frm) {\r\n    // Prevent concurrent executions\r\n    if (summary_injection_in_progress) {\r\n        console.log('⏳ Summary injection already in progress, skipping');\r\n        return;\r\n    }\r\n    \r\n    summary_injection_in_progress = true;\r\n    console.log('📊 inject_project_summary called');\r\n    \r\n    if (!frm.doc.name) {\r\n        console.log('❌ No document name found');\r\n        summary_injection_in_progress = false;\r\n        return;\r\n    }\r\n    \r\n    try {\r\n        // Clean up existing summaries first\r\n        cleanup_all_summaries(frm);\r\n        \r\n        // Prepare data for summary\r\n        const data = prepare_summary_data(frm);\r\n        console.log('📋 Data prepared:', data);\r\n        \r\n        // Generate HTML content\r\n        const html_content = generate_summary_html(data);\r\n        console.log('🎨 Generating HTML for data:', data);\r\n        \r\n        // Inject into summary_view field\r\n        if (frm.fields_dict.summary_view && frm.fields_dict.summary_view.$wrapper) {\r\n            console.log('✅ Found summary_view field - injecting content');\r\n            frm.fields_dict.summary_view.$wrapper.html(\r\n                '<div id=\"project_summary_injected\" data-protection=\"project-summary-protected\">' + \r\n                html_content + \r\n                '</div>'\r\n            );\r\n        } else {\r\n            console.log('❌ No summary_view field found');\r\n            frappe.show_alert({\r\n                message: 'Summary view field not found. Please check the HTML field name in Project Agreement DocType.',\r\n                indicator: 'orange'\r\n            });\r\n        }\r\n        \r\n    } catch (error) {\r\n        console.error('💥 Error in inject_project_summary:', error);\r\n        frappe.show_alert({\r\n            message: 'Error generating project summary: ' + error.message,\r\n            indicator: 'red'\r\n        });\r\n    } finally {\r\n        summary_injection_in_progress = false;\r\n    }\r\n}\r\n\r\nfunction cleanup_all_summaries(frm) {\r\n    console.log('🧹 Cleaning up all existing summaries...');\r\n    \r\n    try {\r\n        // Remove all possible summary elements\r\n        const selectors = [\r\n            '#minimal_project_summary',\r\n            '#protected_project_summary', \r\n            '#project_summary_injected',\r\n            '[data-protection=\"project-summary-protected\"]'\r\n        ];\r\n        \r\n        selectors.forEach(selector => {\r\n            frm.layout.wrapper.find(selector).remove();\r\n        });\r\n        \r\n        // Clear summary_view field completely\r\n        if (frm.fields_dict.summary_view && frm.fields_dict.summary_view.$wrapper) {\r\n            frm.fields_dict.summary_view.$wrapper.empty();\r\n        }\r\n        \r\n        console.log('✅ All summaries cleaned up');\r\n    } catch (error) {\r\n        console.error('💥 Error during cleanup:', error);\r\n    }\r\n}\r\n\r\nfunction prepare_summary_data(frm) {\r\n    // Calculate all financial values\r\n    const total_services = frm.doc.total_services_amount || 0;\r\n    const total_gov_fees = frm.doc.total_government_fees || 0;\r\n    const total_received = frm.doc.total_received || 0;\r\n    const expense_amount = frm.doc.expense_amount || 0;\r\n    const unclaimed_amount = frm.doc.unclaimed_amount || 0;\r\n    const advance_balance = frm.doc.advance_balance || 0;\r\n    const pending_amount = frm.doc.pending_amount || 0;\r\n    const received_tax = frm.doc.received_tax || 0;\r\n\r\n    // Calculate ratios\r\n    const collections_ratio = total_services > 0 ? ((total_received / total_services) * 100).toFixed(1) : 0;\r\n    const expenses_ratio = total_gov_fees > 0 ? ((expense_amount / total_gov_fees) * 100).toFixed(1) : 0;\r\n    const outstanding_ratio = total_services > 0 ? ((unclaimed_amount / total_services) * 100).toFixed(1) : 0;\r\n    const advance_ratio = total_gov_fees > 0 ? ((advance_balance / total_gov_fees) * 100).toFixed(1) : 0;\r\n\r\n    return {\r\n        project_name: frm.doc.project_name || 'Project Name',\r\n        customer_name: frm.doc.customer_name || 'N/A',\r\n        project_date: frm.doc.project_date || 'N/A',\r\n        currency: frm.doc.currency || 'AED',\r\n        total_services_amount: total_services,\r\n        total_government_fees: total_gov_fees,\r\n        total_received: total_received,\r\n        expense_amount: expense_amount,\r\n        unclaimed_amount: unclaimed_amount,\r\n        advance_balance: advance_balance,\r\n        pending_amount: pending_amount,\r\n        received_tax: received_tax,\r\n        collections_ratio: collections_ratio,\r\n        expenses_ratio: expenses_ratio,\r\n        outstanding_ratio: outstanding_ratio,\r\n        advance_ratio: advance_ratio\r\n    };\r\n}\r\n\r\nfunction generate_summary_html(data) {\r\n    // Calculate total project amount\r\n    const total_project_amount = data.total_services_amount + data.total_government_fees;\r\n    \r\n    return `\r\n        <div style=\"padding: 20px; margin: 15px 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; background: #f8fafc; border-radius: 16px;\">\r\n            <!-- Header Section -->\r\n            <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 25px; border-radius: 16px; margin-bottom: 25px; box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4); position: relative; overflow: hidden;\">\r\n                <div style=\"position: absolute; top: -50px; right: -50px; width: 150px; height: 150px; border-radius: 50%; background: rgba(255,255,255,0.1);\"></div>\r\n                <div style=\"position: absolute; bottom: -30px; left: -30px; width: 100px; height: 100px; border-radius: 50%; background: rgba(255,255,255,0.05);\"></div>\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; position: relative; z-index: 2;\">\r\n                    <div>\r\n                        <h2 style=\"margin: 0; font-size: 24px; font-weight: 700; text-shadow: 0 2px 4px rgba(0,0,0,0.2);\">${data.project_name}</h2>\r\n                        <div style=\"margin-top: 12px; display: flex; flex-direction: column; gap: 4px;\">\r\n                            <p style=\"margin: 0; font-size: 15px; opacity: 0.95; display: flex; align-items: center;\">\r\n                                <span style=\"margin-right: 8px;\">👤</span> ${data.customer_name}\r\n                            </p>\r\n                            <p style=\"margin: 0; font-size: 15px; opacity: 0.95; display: flex; align-items: center;\">\r\n                                <span style=\"margin-right: 8px;\">📅</span> ${data.project_date}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div style=\"text-align: right; background: rgba(255,255,255,0.15); padding: 20px; border-radius: 12px; backdrop-filter: blur(10px);\">\r\n                        <h3 style=\"margin: 0; font-size: 16px; font-weight: 600; opacity: 0.9; text-transform: uppercase; letter-spacing: 1px;\">Project Value</h3>\r\n                        <p style=\"margin: 8px 0 0 0; font-size: 28px; font-weight: 800; text-shadow: 0 2px 4px rgba(0,0,0,0.2);\">\r\n                            ${data.currency} ${total_project_amount.toLocaleString()}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Financial Overview - Two Column Layout -->\r\n            <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 25px; margin-bottom: 25px;\">\r\n                \r\n                <!-- Left Column - Services Section -->\r\n                <div style=\"background: white; border-radius: 16px; padding: 20px; box-shadow: 0 4px 15px rgba(0,0,0,0.08); border: 2px solid #e2e8f0;\">\r\n                    <!-- Total Services Header -->\r\n                    <div style=\"background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%); color: white; padding: 20px; border-radius: 12px; text-align: center; margin-bottom: 20px; position: relative; overflow: hidden;\">\r\n                        <div style=\"position: absolute; top: -20px; right: -20px; width: 80px; height: 80px; background: rgba(255,255,255,0.1); border-radius: 50%;\"></div>\r\n                        <div style=\"display: flex; align-items: center; justify-content: center; margin-bottom: 8px;\">\r\n                            <span style=\"font-size: 24px; margin-right: 10px;\">💼</span>\r\n                            <h3 style=\"margin: 0; font-size: 18px; font-weight: 700; text-transform: uppercase; letter-spacing: 1px;\">Total Services</h3>\r\n                        </div>\r\n                        <p style=\"margin: 0; font-size: 26px; font-weight: 800;\">\r\n                            ${data.currency} ${data.total_services_amount.toLocaleString()}\r\n                        </p>\r\n                    </div>\r\n\r\n                    <!-- Services Sub-metrics -->\r\n                    <div style=\"display: flex; flex-direction: column; gap: 15px;\">\r\n                        <!-- Collections Card -->\r\n                        <div style=\"background: linear-gradient(135deg, #10b981 0%, #059669 100%); color: white; padding: 18px; border-radius: 12px; text-align: center; box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3); position: relative; overflow: hidden;\">\r\n                            <div style=\"position: absolute; top: -20px; right: -20px; width: 60px; height: 60px; border: 2px solid rgba(255,255,255,0.2); border-radius: 50%;\"></div>\r\n                            <div style=\"display: flex; align-items: center; justify-content: center; margin-bottom: 6px;\">\r\n                                <span style=\"font-size: 20px; margin-right: 8px;\">💰</span>\r\n                                <h4 style=\"margin: 0; font-size: 15px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;\">Collections</h4>\r\n                            </div>\r\n                            <p style=\"margin: 6px 0; font-size: 20px; font-weight: 700;\">\r\n                                ${data.currency} ${data.total_received.toLocaleString()}\r\n                            </p>\r\n                            <div style=\"background: rgba(255,255,255,0.25); padding: 4px 10px; border-radius: 15px; display: inline-block;\">\r\n                                <span style=\"font-size: 12px; font-weight: 600;\">${data.collections_ratio}%</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Outstanding Card -->\r\n                        <div style=\"background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); color: white; padding: 18px; border-radius: 12px; text-align: center; box-shadow: 0 4px 15px rgba(245, 158, 11, 0.3); position: relative; overflow: hidden;\">\r\n                            <div style=\"position: absolute; top: -20px; right: -20px; width: 60px; height: 60px; border: 2px solid rgba(255,255,255,0.2); border-radius: 50%;\"></div>\r\n                            <div style=\"display: flex; align-items: center; justify-content: center; margin-bottom: 6px;\">\r\n                                <span style=\"font-size: 20px; margin-right: 8px;\">⏳</span>\r\n                                <h4 style=\"margin: 0; font-size: 15px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;\">Outstanding</h4>\r\n                            </div>\r\n                            <p style=\"margin: 6px 0; font-size: 20px; font-weight: 700;\">\r\n                                ${data.currency} ${data.unclaimed_amount.toLocaleString()}\r\n                            </p>\r\n                            <div style=\"background: rgba(255,255,255,0.25); padding: 4px 10px; border-radius: 15px; display: inline-block;\">\r\n                                <span style=\"font-size: 12px; font-weight: 600;\">${data.outstanding_ratio}%</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Right Column - Government Fees Section -->\r\n                <div style=\"background: white; border-radius: 16px; padding: 20px; box-shadow: 0 4px 15px rgba(0,0,0,0.08); border: 2px solid #e2e8f0;\">\r\n                    <!-- Total Gov.Fees Header -->\r\n                    <div style=\"background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%); color: white; padding: 20px; border-radius: 12px; text-align: center; margin-bottom: 20px; position: relative; overflow: hidden;\">\r\n                        <div style=\"position: absolute; top: -20px; right: -20px; width: 80px; height: 80px; background: rgba(255,255,255,0.1); border-radius: 50%;\"></div>\r\n                        <div style=\"display: flex; align-items: center; justify-content: center; margin-bottom: 8px;\">\r\n                            <span style=\"font-size: 24px; margin-right: 10px;\">🏛️</span>\r\n                            <h3 style=\"margin: 0; font-size: 18px; font-weight: 700; text-transform: uppercase; letter-spacing: 1px;\">Gov. Fees</h3>\r\n                        </div>\r\n                        <p style=\"margin: 0; font-size: 26px; font-weight: 800;\">\r\n                            ${data.currency} ${data.total_government_fees.toLocaleString()}\r\n                        </p>\r\n                    </div>\r\n\r\n                    <!-- Gov.Fees Sub-metrics -->\r\n                    <div style=\"display: flex; flex-direction: column; gap: 15px;\">\r\n                        <!-- Expenses Card -->\r\n                        <div style=\"background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%); color: white; padding: 18px; border-radius: 12px; text-align: center; box-shadow: 0 4px 15px rgba(239, 68, 68, 0.3); position: relative; overflow: hidden;\">\r\n                            <div style=\"position: absolute; top: -20px; right: -20px; width: 60px; height: 60px; border: 2px solid rgba(255,255,255,0.2); border-radius: 50%;\"></div>\r\n                            <div style=\"display: flex; align-items: center; justify-content: center; margin-bottom: 6px;\">\r\n                                <span style=\"font-size: 20px; margin-right: 8px;\">💸</span>\r\n                                <h4 style=\"margin: 0; font-size: 15px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;\">Expenses</h4>\r\n                            </div>\r\n                            <p style=\"margin: 6px 0; font-size: 20px; font-weight: 700;\">\r\n                                ${data.currency} ${data.expense_amount.toLocaleString()}\r\n                            </p>\r\n                            <div style=\"background: rgba(255,255,255,0.25); padding: 4px 10px; border-radius: 15px; display: inline-block;\">\r\n                                <span style=\"font-size: 12px; font-weight: 600;\">${data.expenses_ratio}%</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Advance Balance Card -->\r\n                        <div style=\"background: linear-gradient(135deg, #6366f1 0%, #4f46e5 100%); color: white; padding: 18px; border-radius: 12px; text-align: center; box-shadow: 0 4px 15px rgba(99, 102, 241, 0.3); position: relative; overflow: hidden;\">\r\n                            <div style=\"position: absolute; top: -20px; right: -20px; width: 60px; height: 60px; border: 2px solid rgba(255,255,255,0.2); border-radius: 50%;\"></div>\r\n                            <div style=\"display: flex; align-items: center; justify-content: center; margin-bottom: 6px;\">\r\n                                <span style=\"font-size: 20px; margin-right: 8px;\">🏦</span>\r\n                                <h4 style=\"margin: 0; font-size: 15px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;\">Advance Balance</h4>\r\n                            </div>\r\n                            <p style=\"margin: 6px 0; font-size: 20px; font-weight: 700;\">\r\n                                ${data.currency} ${data.advance_balance.toLocaleString()}\r\n                            </p>\r\n                            <div style=\"background: rgba(255,255,255,0.25); padding: 4px 10px; border-radius: 15px; display: inline-block;\">\r\n                                <span style=\"font-size: 12px; font-weight: 600;\">${data.advance_ratio}%</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Additional Financial Info -->\r\n            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 25px;\">\r\n                \r\n                <!-- Collected Taxes Card -->\r\n                <div style=\"background: linear-gradient(135deg, #059669 0%, #047857 100%); color: white; padding: 25px; border-radius: 16px; text-align: center; box-shadow: 0 6px 20px rgba(5, 150, 105, 0.3); position: relative; overflow: hidden;\">\r\n                    <div style=\"position: absolute; top: -40px; right: -40px; width: 120px; height: 120px; border: 3px solid rgba(255,255,255,0.1); border-radius: 50%;\"></div>\r\n                    <div style=\"display: flex; align-items: center; justify-content: center; margin-bottom: 12px;\">\r\n                        <span style=\"font-size: 28px; margin-right: 10px;\">💹</span>\r\n                        <h4 style=\"margin: 0; font-size: 18px; font-weight: 700; text-transform: uppercase; letter-spacing: 1px;\">Collected Taxes</h4>\r\n                    </div>\r\n                    <p style=\"margin: 0; font-size: 26px; font-weight: 800;\">\r\n                        ${data.currency} ${data.received_tax.toLocaleString()}\r\n                    </p>\r\n                </div>\r\n\r\n                <!-- Pending Expenses Card -->\r\n                <div style=\"background: linear-gradient(135deg, #f59e0b 0%, #f97316 100%); color: white; padding: 25px; border-radius: 16px; text-align: center; box-shadow: 0 6px 20px rgba(245, 158, 11, 0.3); position: relative; overflow: hidden;\">\r\n                    <div style=\"position: absolute; top: -40px; right: -40px; width: 120px; height: 120px; border: 3px solid rgba(255,255,255,0.1); border-radius: 50%;\"></div>\r\n                    <div style=\"display: flex; align-items: center; justify-content: center; margin-bottom: 8px;\">\r\n                        <span style=\"font-size: 28px; margin-right: 10px;\">⏰</span>\r\n                        <h4 style=\"margin: 0; font-size: 18px; font-weight: 700; text-transform: uppercase; letter-spacing: 1px;\">Pending Expenses</h4>\r\n                    </div>\r\n                    <p style=\"margin: 4px 0; font-size: 14px; opacity: 0.9; font-weight: 500;\">Pending on customer</p>\r\n                    <p style=\"margin: 8px 0 0 0; font-size: 26px; font-weight: 800;\">\r\n                        ${data.currency} ${data.pending_amount.toLocaleString()}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Financial Progress Charts -->\r\n            <div style=\"background: white; border-radius: 16px; padding: 25px; margin-bottom: 25px; box-shadow: 0 4px 15px rgba(0,0,0,0.08);\">\r\n                <h3 style=\"margin: 0 0 20px 0; font-size: 20px; font-weight: 700; color: #1e293b; text-align: center;\">Financial Progress Overview</h3>\r\n                \r\n                <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 25px;\">\r\n                    \r\n                    <!-- Collections Progress -->\r\n                    <div style=\"text-align: center;\">\r\n                        <h4 style=\"margin: 0 0 15px 0; font-size: 16px; font-weight: 600; color: #374151;\">Collections Progress</h4>\r\n                        <div style=\"position: relative; width: 120px; height: 120px; margin: 0 auto;\">\r\n                            <svg width=\"120\" height=\"120\" style=\"transform: rotate(-90deg);\">\r\n                                <circle cx=\"60\" cy=\"60\" r=\"50\" fill=\"none\" stroke=\"#e5e7eb\" stroke-width=\"8\"/>\r\n                                <circle cx=\"60\" cy=\"60\" r=\"50\" fill=\"none\" stroke=\"#10b981\" stroke-width=\"8\" \r\n                                        stroke-dasharray=\"${2 * Math.PI * 50}\" \r\n                                        stroke-dashoffset=\"${2 * Math.PI * 50 * (1 - data.collections_ratio / 100)}\"\r\n                                        stroke-linecap=\"round\"/>\r\n                            </svg>\r\n                            <div style=\"position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center;\">\r\n                                <div style=\"font-size: 18px; font-weight: 700; color: #10b981;\">${data.collections_ratio}%</div>\r\n                                <div style=\"font-size: 10px; color: #6b7280; text-transform: uppercase;\">Collected</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Expenses Progress -->\r\n                    <div style=\"text-align: center;\">\r\n                        <h4 style=\"margin: 0 0 15px 0; font-size: 16px; font-weight: 600; color: #374151;\">Expenses Progress</h4>\r\n                        <div style=\"position: relative; width: 120px; height: 120px; margin: 0 auto;\">\r\n                            <svg width=\"120\" height=\"120\" style=\"transform: rotate(-90deg);\">\r\n                                <circle cx=\"60\" cy=\"60\" r=\"50\" fill=\"none\" stroke=\"#e5e7eb\" stroke-width=\"8\"/>\r\n                                <circle cx=\"60\" cy=\"60\" r=\"50\" fill=\"none\" stroke=\"#ef4444\" stroke-width=\"8\" \r\n                                        stroke-dasharray=\"${2 * Math.PI * 50}\" \r\n                                        stroke-dashoffset=\"${2 * Math.PI * 50 * (1 - data.expenses_ratio / 100)}\"\r\n                                        stroke-linecap=\"round\"/>\r\n                            </svg>\r\n                            <div style=\"position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center;\">\r\n                                <div style=\"font-size: 18px; font-weight: 700; color: #ef4444;\">${data.expenses_ratio}%</div>\r\n                                <div style=\"font-size: 10px; color: #6b7280; text-transform: uppercase;\">Spent</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Outstanding Progress -->\r\n                    <div style=\"text-align: center;\">\r\n                        <h4 style=\"margin: 0 0 15px 0; font-size: 16px; font-weight: 600; color: #374151;\">Outstanding Ratio</h4>\r\n                        <div style=\"position: relative; width: 120px; height: 120px; margin: 0 auto;\">\r\n                            <svg width=\"120\" height=\"120\" style=\"transform: rotate(-90deg);\">\r\n                                <circle cx=\"60\" cy=\"60\" r=\"50\" fill=\"none\" stroke=\"#e5e7eb\" stroke-width=\"8\"/>\r\n                                <circle cx=\"60\" cy=\"60\" r=\"50\" fill=\"none\" stroke=\"#f59e0b\" stroke-width=\"8\" \r\n                                        stroke-dasharray=\"${2 * Math.PI * 50}\" \r\n                                        stroke-dashoffset=\"${2 * Math.PI * 50 * (1 - data.outstanding_ratio / 100)}\"\r\n                                        stroke-linecap=\"round\"/>\r\n                            </svg>\r\n                            <div style=\"position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center;\">\r\n                                <div style=\"font-size: 18px; font-weight: 700; color: #f59e0b;\">${data.outstanding_ratio}%</div>\r\n                                <div style=\"font-size: 10px; color: #6b7280; text-transform: uppercase;\">Pending</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Advance Balance Progress -->\r\n                    <div style=\"text-align: center;\">\r\n                        <h4 style=\"margin: 0 0 15px 0; font-size: 16px; font-weight: 600; color: #374151;\">Advance Coverage</h4>\r\n                        <div style=\"position: relative; width: 120px; height: 120px; margin: 0 auto;\">\r\n                            <svg width=\"120\" height=\"120\" style=\"transform: rotate(-90deg);\">\r\n                                <circle cx=\"60\" cy=\"60\" r=\"50\" fill=\"none\" stroke=\"#e5e7eb\" stroke-width=\"8\"/>\r\n                                <circle cx=\"60\" cy=\"60\" r=\"50\" fill=\"none\" stroke=\"#6366f1\" stroke-width=\"8\" \r\n                                        stroke-dasharray=\"${2 * Math.PI * 50}\" \r\n                                        stroke-dashoffset=\"${2 * Math.PI * 50 * (1 - data.advance_ratio / 100)}\"\r\n                                        stroke-linecap=\"round\"/>\r\n                            </svg>\r\n                            <div style=\"position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center;\">\r\n                                <div style=\"font-size: 18px; font-weight: 700; color: #6366f1;\">${data.advance_ratio}%</div>\r\n                                <div style=\"font-size: 10px; color: #6b7280; text-transform: uppercase;\">Coverage</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <!-- Enhanced Footer -->\r\n            <div style=\"background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%); padding: 20px; border-radius: 16px; text-align: center; border: 1px solid #cbd5e1;\">\r\n                <div style=\"display: flex; align-items: center; justify-content: center; gap: 15px; margin-bottom: 8px;\">\r\n                    <span style=\"font-size: 16px;\">📊</span>\r\n                    <p style=\"margin: 0; font-size: 14px; font-weight: 600; color: #475569;\">Financial Dashboard</p>\r\n                    <span style=\"font-size: 16px;\">⚡</span>\r\n                </div>\r\n                <p style=\"margin: 0; font-size: 12px; color: #64748b;\">\r\n                    Last updated: ${new Date().toLocaleString()} | Auto-generated with real-time calculations\r\n                </p>\r\n            </div>\r\n        </div>\r\n    `;\r\n}\r\n\r\n// ==================== INVOICE FUNCTIONS ====================\r\n\r\nfunction setup_project_services_handlers(frm) {\r\n    if (frm.get_field('project_services')) {\r\n        let item_field = frm.get_field('project_services').grid.get_field('item');\r\n        if (item_field) {\r\n            item_field.get_query = function() {\r\n                return {\r\n                    filters: {\r\n                        'is_sales_item': 1\r\n                    }\r\n                };\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nfunction create_invoices_batch(frm, services) {\r\n    let processed = 0;\r\n    let total = services.length;\r\n    let errors = [];\r\n\r\n    frappe.show_progress(__('Creating Invoices'), processed, total);\r\n\r\n    services.forEach((service, index) => {\r\n        create_invoice_for_service_row(frm, service, function(success, error) {\r\n            processed++;\r\n            \r\n            if (!success) {\r\n                errors.push(error);\r\n            }\r\n\r\n            frappe.show_progress(__('Creating Invoices'), processed, total);\r\n\r\n            if (processed === total) {\r\n                frappe.hide_progress();\r\n                \r\n                if (errors.length > 0) {\r\n                    frappe.msgprint({\r\n                        title: __('Invoice Creation Errors'),\r\n                        message: __('Some invoices could not be created:<br><br>' + errors.join('<br>')),\r\n                        indicator: 'red'\r\n                    });\r\n                } else {\r\n                    frappe.msgprint({\r\n                        title: __('Success'),\r\n                        message: __('All invoices created successfully!'),\r\n                        indicator: 'green'\r\n                    });\r\n                }\r\n                \r\n                frm.refresh();\r\n                inject_project_summary(frm);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction create_invoice_for_service_row(frm, service_row, callback) {\r\n    if (!service_row.item || service_row.invoiced) {\r\n        if (callback) callback(false, 'Invalid service row or already invoiced');\r\n        return;\r\n    }\r\n\r\n    let posting_date = service_row.invoice_date || frappe.datetime.get_today();\r\n    let due_date = posting_date;\r\n    if (frappe.datetime.str_to_obj(posting_date) < frappe.datetime.str_to_obj(frappe.datetime.get_today())) {\r\n        due_date = frappe.datetime.get_today();\r\n    }\r\n\r\n    let invoice_data = {\r\n        doctype: 'Sales Invoice',\r\n        customer: frm.doc.customer,\r\n        currency: frm.doc.currency,\r\n        posting_date: posting_date,\r\n        due_date: due_date,\r\n        items: [{\r\n            item_code: service_row.item,\r\n            qty: 1,\r\n            rate: service_row.amount || 0,\r\n            remarks: service_row.remark || ''\r\n        }],\r\n        remarks: service_row.remark || ''\r\n    };\r\n\r\n    if (service_row.tax_template) {\r\n        invoice_data.taxes_and_charges = service_row.tax_template;\r\n    }\r\n\r\n    frappe.call({\r\n        method: 'frappe.client.insert',\r\n        args: {\r\n            doc: invoice_data\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                let invoice_name = r.message.name;\r\n                \r\n                service_row.invoiced = 1;\r\n                service_row.reference_invoice = invoice_name;\r\n                \r\n                frm.doc.project_services.forEach(function(service) {\r\n                    if (service.name === service_row.name) {\r\n                        service.invoiced = 1;\r\n                        service.reference_invoice = invoice_name;\r\n                    }\r\n                });\r\n                \r\n                frm.dirty();\r\n                frm.get_field('project_services').grid.refresh();\r\n                frappe.show_alert(__('Invoice {0} created successfully. Please save the document.', [invoice_name]), 5);\r\n                \r\n                if (callback) callback(true);\r\n                \r\n            } else {\r\n                let error_msg = r.exc ? r.exc[0] : 'Unknown error occurred';\r\n                if (callback) callback(false, error_msg);\r\n                frappe.msgprint({\r\n                    title: __('Error'),\r\n                    message: __('Failed to create invoice: {0}', [error_msg]),\r\n                    indicator: 'red'\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// ==================== UTILITY FUNCTIONS ====================\r\n\r\nfunction refresh_project_totals(frm) {\r\n    let total_services = 0;\r\n    let total_government_fees = 0;\r\n    \r\n    // Calculate totals from project services\r\n    if (frm.doc.project_services) {\r\n        frm.doc.project_services.forEach(service => {\r\n            if (service.amount) {\r\n                total_services += flt(service.amount);\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Calculate totals from government fees\r\n    if (frm.doc.government_fees) {\r\n        frm.doc.government_fees.forEach(fee => {\r\n            if (fee.amount) {\r\n                total_government_fees += flt(fee.amount);\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Update totals\r\n    frm.set_value('total_services_amount', total_services);\r\n    frm.set_value('total_government_fees', total_government_fees);\r\n    frm.set_value('total_project_amount', total_services + total_government_fees);\r\n}\r\n\r\nfunction flt(value, precision = 2) {\r\n    if (value == null || value == undefined || value === '') {\r\n        return 0.0;\r\n    }\r\n    if (typeof value === 'string') {\r\n        value = parseFloat(value);\r\n    }\r\n    return Math.round(value * Math.pow(10, precision)) / Math.pow(10, precision);\r\n}\r\n\r\n// Reset initialization flag when navigating away\r\n$(document).on('page-change', function() {\r\n    project_agreement_initialized = false;\r\n    summary_injection_in_progress = false;\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Project Payment",
  "enabled": 1,
  "modified": "2025-08-31 13:28:11.113024",
  "module": "Orbit",
  "name": "New Popup",
  "script": "frappe.ui.form.on('Project Payment', {\n    onload: function(frm) {\n        if (frm.is_new()) {\n            // Show popup when creating new record\n            show_payment_popup(frm);\n        }\n    }\n});\n\nfunction show_payment_popup(frm) {\n    let dialog = new frappe.ui.Dialog({\n        title: 'Select Payment Type and Details',\n        fields: [\n            {\n                label: 'Payment Type',\n                fieldname: 'payment_type',\n                fieldtype: 'Select',\n                options: '\\nCustomer\\nContractor',\n                reqd: 1,\n                change: function() {\n                    let payment_type = dialog.get_value('payment_type');\n                    // Clear all fields when payment type changes\n                    dialog.set_value('customer', '');\n                    dialog.set_value('contractor', '');\n                    dialog.set_value('project_agreements', []);\n                    dialog.fields_dict.invoices_html.$wrapper.html('');\n\n                    // Show/hide fields based on payment type\n                    toggle_payment_type_fields(dialog, payment_type);\n                }\n            },\n            {\n                label: 'Customer',\n                fieldname: 'customer',\n                fieldtype: 'Link',\n                options: 'Customer',\n                reqd: 1,\n                hidden: 1,\n                change: function() {\n                    let customer = dialog.get_value('customer');\n\n                    if (customer) {\n                        // Clear project agreements and invoices\n                        dialog.set_value('project_agreements', []);\n                        dialog.fields_dict.invoices_html.$wrapper.html('');\n\n                        // Refresh project agreements field\n                        dialog.fields_dict.project_agreements.refresh();\n                    }\n                }\n            },\n            {\n                label: 'Contractor',\n                fieldname: 'contractor',\n                fieldtype: 'Link',\n                options: 'Customer',\n                reqd: 1,\n                hidden: 1,\n                change: function() {\n                    let contractor = dialog.get_value('contractor');\n\n                    if (contractor) {\n                        // Clear project agreements and invoices\n                        dialog.set_value('project_agreements', []);\n                        dialog.fields_dict.invoices_html.$wrapper.html('');\n\n                        // Refresh project agreements field to load data\n                        dialog.fields_dict.project_agreements.refresh();\n                    }\n                }\n            },\n            {\n                label: 'Project Agreements',\n                fieldname: 'project_agreements',\n                fieldtype: 'MultiSelectList',\n                get_data: function() {\n                    let customer = dialog.get_value('customer');\n                    let contractor = dialog.get_value('contractor');\n                    let payment_type = dialog.get_value('payment_type');\n\n                    if (payment_type === 'Customer' && customer) {\n                        return frappe.db.get_list('Project Agreement', {\n                            filters: {\n                                'customer': customer,\n                                'docstatus': 1\n                            },\n                            fields: ['name', 'project_name']\n                        }).then(function(data) {\n                            return data.map(function(d) {\n                                return {\n                                    value: d.name,\n                                    description: d.project_name || d.name\n                                };\n                            });\n                        });\n                    } else if (payment_type === 'Contractor' && contractor) {\n                        // For contractor payments, get project agreements where this contractor has invoiced services\n                        console.log('=== CONTRACTOR FILTERING DEBUG ===');\n                        console.log('Payment Type:', payment_type);\n                        console.log('Contractor:', contractor);\n\n                        return new Promise(function(resolve) {\n                            // Get all Project Agreements and check their contractors_services child table\n                            frappe.db.get_list('Project Agreement', {\n                                filters: {\n                                    'docstatus': 1\n                                },\n                                fields: ['name', 'project_name']\n                            }).then(function(all_projects) {\n                                console.log('All Project Agreements:', all_projects);\n\n                                if (!all_projects || all_projects.length === 0) {\n                                    console.log('No project agreements found');\n                                    resolve([]);\n                                    return;\n                                }\n\n                                let valid_projects = [];\n                                let processed = 0;\n\n                                // Check each project for contractor services\n                                all_projects.forEach(function(project) {\n                                    frappe.db.get_doc('Project Agreement', project.name).then(function(project_doc) {\n                                        console.log('Checking project:', project.name, 'contractors_services:', project_doc.contractors_services);\n\n                                        // Check if this project has contractor services for our contractor\n                                        if (project_doc.contractors_services && project_doc.contractors_services.length > 0) {\n                                            let contractor_services = project_doc.contractors_services.filter(cs =>\n                                                cs.contractor === contractor && cs.invoiced === 1\n                                            );\n\n                                            console.log('Contractor services for', contractor, 'in project', project.name, ':', contractor_services);\n\n                                            if (contractor_services.length > 0) {\n                                                valid_projects.push({\n                                                    value: project.name,\n                                                    description: project.project_name || project.name\n                                                });\n                                            }\n                                        }\n\n                                        processed++;\n                                        if (processed === all_projects.length) {\n                                            console.log('Final valid projects:', valid_projects);\n                                            resolve(valid_projects);\n                                        }\n                                    }).catch(function(error) {\n                                        console.error('Error getting project doc:', project.name, error);\n                                        processed++;\n                                        if (processed === all_projects.length) {\n                                            console.log('Final valid projects:', valid_projects);\n                                            resolve(valid_projects);\n                                        }\n                                    });\n                                });\n                            }).catch(function(error) {\n                                console.error('Error getting Project Agreements:', error);\n                                resolve([]);\n                            });\n                        });\n                    }\n                    return Promise.resolve([]);\n                },\n                change: function() {\n                    let project_agreements = dialog.get_value('project_agreements');\n                    let payment_type = dialog.get_value('payment_type');\n\n                    if (project_agreements && project_agreements.length > 0) {\n                        if (payment_type === 'Customer') {\n                            load_invoices_for_projects(dialog, project_agreements);\n                        } else if (payment_type === 'Contractor') {\n                            load_contractor_invoices_for_projects(dialog, project_agreements);\n                        }\n                    } else {\n                        dialog.fields_dict.invoices_html.$wrapper.html('');\n                    }\n                }\n            },\n            {\n                label: 'Invoice Payment Details',\n                fieldname: 'invoice_section',\n                fieldtype: 'Section Break'\n            },\n            {\n                label: 'Invoices',\n                fieldname: 'invoices_html',\n                fieldtype: 'HTML'\n            },\n            {\n                label: 'Additional Fees',\n                fieldname: 'fees_section',\n                fieldtype: 'Section Break',\n                depends_on: 'eval:doc.payment_type==\"Customer\"'\n            },\n            {\n                label: 'Include Government Fees?',\n                fieldname: 'include_govt_fees',\n                fieldtype: 'Check',\n                depends_on: 'eval:doc.payment_type==\"Customer\"',\n                change: function() {\n                    let include_fees = dialog.get_value('include_govt_fees');\n                    toggle_govt_fees_section(dialog, include_fees);\n                }\n            },\n            {\n                label: 'Government Fees',\n                fieldname: 'govt_fees_html',\n                fieldtype: 'HTML',\n                hidden: 1,\n                depends_on: 'eval:doc.payment_type==\"Customer\"'\n            },\n            {\n                label: 'Include Trust Fees?',\n                fieldname: 'include_trust_fees',\n                fieldtype: 'Check',\n                depends_on: 'eval:doc.payment_type==\"Customer\"',\n                change: function() {\n                    let include_fees = dialog.get_value('include_trust_fees');\n                    toggle_trust_fees_section(dialog, include_fees);\n                }\n            },\n            {\n                label: 'Trust Fees',\n                fieldname: 'trust_fees_html',\n                fieldtype: 'HTML',\n                hidden: 1,\n                depends_on: 'eval:doc.payment_type==\"Customer\"'\n            }\n        ],\n        size: 'extra-large',\n        primary_action_label: 'Create Payment',\n        primary_action: function(values) {\n            process_payment_data(frm, dialog, values);\n        }\n    });\n\n    dialog.show();\n\n    // Initialize sections as hidden\n    toggle_govt_fees_section(dialog, false);\n    toggle_trust_fees_section(dialog, false);\n\n    // Set dialog width to screen width for better clarity\n    dialog.$wrapper.find('.modal-dialog').css({\n        'max-width': '95vw',\n        'width': '95vw'\n    });\n}\n\nfunction toggle_payment_type_fields(dialog, payment_type) {\n    if (payment_type === 'Customer') {\n        // Show customer field, hide contractor field\n        dialog.fields_dict.customer.df.hidden = 0;\n        dialog.fields_dict.contractor.df.hidden = 1;\n        dialog.fields_dict.customer.df.reqd = 1;\n        dialog.fields_dict.contractor.df.reqd = 0;\n\n        // Show fee sections\n        dialog.fields_dict.fees_section.df.hidden = 0;\n        dialog.fields_dict.include_govt_fees.df.hidden = 0;\n        dialog.fields_dict.include_trust_fees.df.hidden = 0;\n\n    } else if (payment_type === 'Contractor') {\n        // Show only contractor field, hide customer field\n        dialog.fields_dict.customer.df.hidden = 1;\n        dialog.fields_dict.contractor.df.hidden = 0;\n        dialog.fields_dict.customer.df.reqd = 0;\n        dialog.fields_dict.contractor.df.reqd = 1;\n\n        // Hide fee sections for contractor payments\n        dialog.fields_dict.fees_section.df.hidden = 1;\n        dialog.fields_dict.include_govt_fees.df.hidden = 1;\n        dialog.fields_dict.include_trust_fees.df.hidden = 1;\n        dialog.fields_dict.govt_fees_html.df.hidden = 1;\n        dialog.fields_dict.trust_fees_html.df.hidden = 1;\n\n        // Uncheck fee options\n        dialog.set_value('include_govt_fees', 0);\n        dialog.set_value('include_trust_fees', 0);\n    } else {\n        // Hide all fields when no payment type selected\n        dialog.fields_dict.customer.df.hidden = 1;\n        dialog.fields_dict.contractor.df.hidden = 1;\n        dialog.fields_dict.fees_section.df.hidden = 1;\n        dialog.fields_dict.include_govt_fees.df.hidden = 1;\n        dialog.fields_dict.include_trust_fees.df.hidden = 1;\n        dialog.fields_dict.govt_fees_html.df.hidden = 1;\n        dialog.fields_dict.trust_fees_html.df.hidden = 1;\n    }\n\n    // Refresh all fields\n    dialog.fields_dict.customer.refresh();\n    dialog.fields_dict.contractor.refresh();\n    dialog.fields_dict.fees_section.refresh();\n    dialog.fields_dict.include_govt_fees.refresh();\n    dialog.fields_dict.include_trust_fees.refresh();\n    dialog.fields_dict.govt_fees_html.refresh();\n    dialog.fields_dict.trust_fees_html.refresh();\n}\n\nfunction load_invoices_for_projects(dialog, project_agreements) {\n    let customer = dialog.get_value('customer');\n    let all_invoices = [];\n    let processed_projects = 0;\n\n    project_agreements.forEach(function(project_agreement) {\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Sales Invoice',\n                filters: {\n                    'custom_project_agreement': project_agreement,\n                    'customer': customer,  // Filter by selected customer\n                    'outstanding_amount': ['>', 0],\n                    'docstatus': 1\n                },\n                fields: ['name', 'customer', 'grand_total', 'outstanding_amount', 'total_taxes_and_charges']\n            },\n            callback: function(r) {\n                if (r.message && r.message.length > 0) {\n                    r.message.forEach(function(invoice) {\n                        invoice.project_agreement = project_agreement;\n                        all_invoices.push(invoice);\n                    });\n                }\n                \n                processed_projects++;\n                if (processed_projects === project_agreements.length) {\n                    if (all_invoices.length > 0) {\n                        render_invoice_table(dialog, all_invoices);\n                    } else {\n                        dialog.fields_dict.invoices_html.$wrapper.html('<p>No open invoices found for selected project agreements.</p>');\n                    }\n                }\n            }\n        });\n    });\n}\n\nfunction load_contractor_invoices_for_projects(dialog, project_agreements) {\n    let contractor = dialog.get_value('contractor');\n    let all_invoices = [];\n    let processed_projects = 0;\n\n    project_agreements.forEach(function(project_agreement) {\n        frappe.db.get_list('Sales Invoice', {\n            filters: {\n                'custom_project_agreement': project_agreement,\n                'customer': contractor,\n                'outstanding_amount': ['>', 0],\n                'docstatus': 1\n            },\n            fields: ['name', 'customer', 'grand_total', 'outstanding_amount', 'total_taxes_and_charges']\n        }).then(function(invoices) {\n            if (invoices && invoices.length > 0) {\n                invoices.forEach(function(invoice) {\n                    invoice.project_agreement = project_agreement;\n                    all_invoices.push(invoice);\n                });\n            }\n\n            processed_projects++;\n            if (processed_projects === project_agreements.length) {\n                if (all_invoices.length > 0) {\n                    render_invoice_table(dialog, all_invoices);\n                } else {\n                    dialog.fields_dict.invoices_html.$wrapper.html('<p>No open invoices found for selected contractor in these project agreements.</p>');\n                }\n            }\n        });\n    });\n}\n\nfunction render_invoice_table(dialog, invoices) {\n    let html = `\n        <div style=\"overflow-x: auto; margin-top: 15px;\">\n            <table class=\"table table-bordered table-hover\" style=\"min-width: 1400px; font-size: 14px;\">\n                <thead class=\"thead-light\">\n                    <tr style=\"background-color: #f8f9fa;\">\n                        <th style=\"min-width: 80px; text-align: center; font-size: 14px; font-weight: bold;\">Project</th>\n                        <th style=\"min-width: 100px; text-align: center; font-size: 14px; font-weight: bold;\">Item Code</th>\n                        <th style=\"min-width: 90px; text-align: center; font-size: 14px; font-weight: bold;\">Item Total</th>\n                        <th style=\"min-width: 80px; text-align: center; font-size: 14px; font-weight: bold;\">Tax Amount</th>\n                        <th style=\"min-width: 70px; text-align: center; font-size: 14px; font-weight: bold;\">Tax %</th>\n                        <th style=\"min-width: 90px; text-align: center; font-size: 14px; font-weight: bold;\">Outstanding</th>\n                        <th style=\"min-width: 80px; text-align: center; font-size: 14px; font-weight: bold;\">Out. %</th>\n                        <th style=\"min-width: 80px; text-align: center; font-size: 14px; font-weight: bold;\">Balance</th>\n                        <th style=\"min-width: 100px; text-align: center; font-size: 14px; font-weight: bold;\">Payment (Inc. Tax)</th>\n                        <th style=\"min-width: 90px; text-align: center; font-size: 14px; font-weight: bold;\">Payment Tax</th>\n                        <th style=\"min-width: 200px; text-align: center; font-size: 14px; font-weight: bold;\">Remarks</th>\n                    </tr>\n                </thead>\n                <tbody>\n        `;\n\n    let processed_count = 0;\n    invoices.forEach(function(invoice, index) {\n        // Get full invoice details including item information\n        get_invoice_details(invoice.name, function(invoice_details) {\n            let tax_ratio = invoice_details.tax_ratio || 0;\n            let item_code = invoice_details.item_code || '';\n            let item_total = invoice_details.item_total || 0;\n            let total_with_tax = item_total + (invoice.total_taxes_and_charges || 0);\n            let outstanding_ratio = total_with_tax > 0 ? (invoice.outstanding_amount / total_with_tax) : 0;\n            let balance = outstanding_ratio * item_total;\n            \n            html += `\n                <tr data-invoice=\"${invoice.name}\" data-project=\"${invoice.project_agreement}\" data-index=\"${index}\" style=\"border-bottom: 1px solid #dee2e6;\">\n                    <td style=\"font-size: 13px; padding: 10px; text-align: center;\">\n                        <span title=\"${invoice.project_agreement}\">${invoice.project_agreement.substring(0, 8)}...</span>\n                    </td>\n                    <td style=\"font-weight: 500; padding: 10px; text-align: center; font-size: 13px;\">${item_code}</td>\n                    <td style=\"text-align: center; padding: 10px; font-size: 13px;\">${format_currency_compact(item_total)}</td>\n                    <td style=\"text-align: center; padding: 10px; font-size: 13px;\">${format_currency_compact(invoice.total_taxes_and_charges || 0)}</td>\n                    <td style=\"text-align: center; padding: 10px;\"><span class=\"badge badge-info\" style=\"font-size: 12px;\">${tax_ratio}%</span></td>\n                    <td style=\"text-align: center; padding: 10px; font-size: 13px;\">${format_currency_compact(invoice.outstanding_amount)}</td>\n                    <td style=\"text-align: center; padding: 10px;\"><span class=\"outstanding-ratio badge badge-secondary\" style=\"font-size: 12px;\">${(outstanding_ratio * 100).toFixed(1)}%</span></td>\n                    <td style=\"text-align: center; padding: 10px;\"><span class=\"balance\" style=\"font-weight: 500; font-size: 13px;\">${format_currency_compact(balance)}</span></td>\n                    <td style=\"padding: 8px; text-align: center;\">\n                        <input type=\"number\"\n                               class=\"form-control payment-amount\"\n                               data-invoice=\"${invoice.name}\"\n                               data-outstanding=\"${invoice.outstanding_amount}\"\n                               data-tax-ratio=\"${tax_ratio}\"\n                               data-balance=\"${balance}\"\n                               step=\"0.01\"\n                               min=\"0\"\n                               max=\"${invoice.outstanding_amount}\"\n                               style=\"width: 95px; font-size: 13px; padding: 6px; text-align: center;\"\n                               placeholder=\"0.00\">\n                    </td>\n                    <td style=\"text-align: center; padding: 10px;\">\n                        <span class=\"payment-tax\" style=\"font-weight: 500; color: #28a745; font-size: 13px;\">0.00</span>\n                    </td>\n                    <td style=\"padding: 8px; text-align: center;\">\n                        <textarea class=\"form-control remark-field\"\n                                  data-invoice=\"${invoice.name}\"\n                                  rows=\"2\"\n                                  style=\"width: 190px; font-size: 13px; resize: vertical; text-align: left;\"\n                                  placeholder=\"Enter payment remarks...\"></textarea>\n                    </td>\n                </tr>\n            `;\n            \n            processed_count++;\n            // If this is the last invoice, close the table and add event listeners\n            if (processed_count === invoices.length) {\n                html += '</tbody></table></div>';\n                dialog.fields_dict.invoices_html.$wrapper.html(html);\n                add_payment_amount_listeners(dialog);\n            }\n        });\n    });\n}\n\nfunction get_invoice_details(invoice_name, callback) {\n    frappe.call({\n        method: 'frappe.client.get',\n        args: {\n            doctype: 'Sales Invoice',\n            name: invoice_name\n        },\n        callback: function(r) {\n            if (r.message) {\n                let invoice = r.message;\n                let tax_ratio = 0;\n                let item_code = '';\n                let item_total = 0;\n                \n                // Get tax ratio from taxes table\n                if (invoice.taxes && invoice.taxes.length > 0) {\n                    tax_ratio = invoice.taxes[0].rate || 0;\n                }\n                \n                // Get item details (assuming one item per invoice)\n                if (invoice.items && invoice.items.length > 0) {\n                    item_code = invoice.items[0].item_code || '';\n                    item_total = invoice.items[0].amount || 0; // This is total for item without tax\n                }\n                \n                callback({\n                    tax_ratio: tax_ratio,\n                    item_code: item_code,\n                    item_total: item_total,\n                    invoice: invoice\n                });\n            }\n        }\n    });\n}\n\nfunction add_payment_amount_listeners(dialog) {\n    dialog.fields_dict.invoices_html.$wrapper.find('.payment-amount').on('input', function() {\n        let payment_amount_inclusive = parseFloat($(this).val()) || 0;\n        let outstanding_amount = parseFloat($(this).data('outstanding')) || 0;\n        let tax_ratio = parseFloat($(this).data('tax-ratio')) || 0;\n\n        // Validate payment amount doesn't exceed outstanding amount\n        if (payment_amount_inclusive > outstanding_amount) {\n            frappe.msgprint(`Payment amount (including tax) cannot exceed outstanding amount of ${format_currency_compact(outstanding_amount)}`);\n            $(this).val(outstanding_amount);\n            payment_amount_inclusive = outstanding_amount;\n        }\n\n        // Calculate payment tax and net payment amount from tax-inclusive amount\n        // Formula: payment_amount_inclusive = net_payment + (net_payment * tax_ratio / 100)\n        // Solving for net_payment: net_payment = payment_amount_inclusive / (1 + tax_ratio / 100)\n        let net_payment_amount = payment_amount_inclusive / (1 + tax_ratio / 100);\n        let payment_tax = payment_amount_inclusive - net_payment_amount;\n\n        // Store the net payment amount for later use\n        $(this).data('net-payment', net_payment_amount);\n\n        // Display payment tax\n        $(this).closest('tr').find('.payment-tax').text(format_currency_compact(payment_tax));\n    });\n}\n\nfunction format_currency_compact(amount) {\n    if (!amount) return '0.00';\n    return parseFloat(amount).toLocaleString('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n    });\n}\n\nfunction toggle_govt_fees_section(dialog, show) {\n    if (show) {\n        dialog.fields_dict.govt_fees_html.df.hidden = 0;\n        dialog.fields_dict.govt_fees_html.refresh();\n        render_govt_fees_section(dialog);\n    } else {\n        dialog.fields_dict.govt_fees_html.df.hidden = 1;\n        dialog.fields_dict.govt_fees_html.refresh();\n    }\n}\n\nfunction render_govt_fees_section(dialog) {\n    let html = `\n        <div class=\"govt-fees-container\" style=\"margin-top: 15px;\">\n            <div style=\"margin-bottom: 15px;\">\n                <button type=\"button\" class=\"btn btn-sm btn-success add-govt-fee\">\n                    <i class=\"fa fa-plus\"></i> Add Government Fee\n                </button>\n            </div>\n            <div style=\"overflow-x: auto;\">\n                <table class=\"table table-bordered govt-fees-table\" style=\"min-width: 600px;\">\n                    <thead class=\"thead-light\">\n                        <tr style=\"background-color: #f8f9fa;\">\n                            <th style=\"min-width: 150px;\">Project Agreement</th>\n                            <th style=\"min-width: 100px;\">Amount</th>\n                            <th style=\"min-width: 250px;\">Remarks</th>\n                            <th style=\"min-width: 80px;\">Action</th>\n                        </tr>\n                    </thead>\n                    <tbody class=\"govt-fees-body\">\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    `;\n    \n    dialog.fields_dict.govt_fees_html.$wrapper.html(html);\n    \n    // Add event listener for adding new government fee rows\n    dialog.fields_dict.govt_fees_html.$wrapper.find('.add-govt-fee').on('click', function() {\n        add_govt_fee_row(dialog);\n    });\n    \n    // Add first row by default\n    add_govt_fee_row(dialog);\n}\n\nfunction toggle_trust_fees_section(dialog, show) {\n    if (show) {\n        dialog.fields_dict.trust_fees_html.df.hidden = 0;\n        dialog.fields_dict.trust_fees_html.refresh();\n        render_trust_fees_section(dialog);\n    } else {\n        dialog.fields_dict.trust_fees_html.df.hidden = 1;\n        dialog.fields_dict.trust_fees_html.refresh();\n    }\n}\n\nfunction render_trust_fees_section(dialog) {\n    let html = `\n        <div class=\"trust-fees-container\" style=\"margin-top: 15px;\">\n            <div style=\"margin-bottom: 15px;\">\n                <button type=\"button\" class=\"btn btn-sm btn-success add-trust-fee\">\n                    <i class=\"fa fa-plus\"></i> Add Trust Fee\n                </button>\n            </div>\n            <div style=\"overflow-x: auto;\">\n                <table class=\"table table-bordered trust-fees-table\" style=\"min-width: 600px;\">\n                    <thead class=\"thead-light\">\n                        <tr style=\"background-color: #f8f9fa;\">\n                            <th style=\"min-width: 150px;\">Project Agreement</th>\n                            <th style=\"min-width: 100px;\">Amount</th>\n                            <th style=\"min-width: 250px;\">Remarks</th>\n                            <th style=\"min-width: 80px;\">Action</th>\n                        </tr>\n                    </thead>\n                    <tbody class=\"trust-fees-body\">\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    `;\n\n    dialog.fields_dict.trust_fees_html.$wrapper.html(html);\n\n    // Add event listener for adding new trust fee rows\n    dialog.fields_dict.trust_fees_html.$wrapper.find('.add-trust-fee').on('click', function() {\n        add_trust_fee_row(dialog);\n    });\n\n    // Add first row by default\n    add_trust_fee_row(dialog);\n}\n\nfunction add_trust_fee_row(dialog) {\n    let project_agreements = dialog.get_value('project_agreements') || [];\n\n    // Build project agreement options\n    let project_options = '';\n    project_agreements.forEach(function(project) {\n        project_options += `<option value=\"${project}\">${project}</option>`;\n    });\n\n    let row_html = `\n        <tr class=\"trust-fee-row\">\n            <td style=\"padding: 8px;\">\n                <select class=\"form-control trust-fee-project\" style=\"font-size: 11px;\">\n                    <option value=\"\">Select Project</option>\n                    ${project_options}\n                </select>\n            </td>\n            <td style=\"padding: 8px;\">\n                <input type=\"number\" class=\"form-control trust-fee-amount\" step=\"0.01\" min=\"0\"\n                       style=\"font-size: 11px;\" placeholder=\"0.00\">\n            </td>\n            <td style=\"padding: 8px;\">\n                <textarea class=\"form-control trust-fee-remark\" rows=\"2\"\n                          style=\"font-size: 11px; resize: vertical;\"\n                          placeholder=\"Enter trust fee remarks...\"></textarea>\n            </td>\n            <td style=\"padding: 8px; text-align: center;\">\n                <button type=\"button\" class=\"btn btn-sm btn-danger remove-trust-fee\">\n                    <i class=\"fa fa-trash\"></i>\n                </button>\n            </td>\n        </tr>\n    `;\n\n    dialog.fields_dict.trust_fees_html.$wrapper.find('.trust-fees-body').append(row_html);\n\n    // Add remove button listener\n    dialog.fields_dict.trust_fees_html.$wrapper.find('.remove-trust-fee').last().on('click', function() {\n        $(this).closest('tr').remove();\n    });\n}\n\nfunction add_govt_fee_row(dialog) {\n    let customer = dialog.get_value('customer');\n    let project_agreements = dialog.get_value('project_agreements') || [];\n    \n    // Build project agreement options\n    let project_options = '';\n    project_agreements.forEach(function(project) {\n        project_options += `<option value=\"${project}\">${project}</option>`;\n    });\n    \n    let row_html = `\n        <tr class=\"govt-fee-row\">\n            <td style=\"padding: 8px;\">\n                <select class=\"form-control govt-fee-project\" style=\"font-size: 11px;\">\n                    <option value=\"\">Select Project</option>\n                    ${project_options}\n                </select>\n            </td>\n            <td style=\"padding: 8px;\">\n                <input type=\"number\" class=\"form-control govt-fee-amount\" step=\"0.01\" min=\"0\" \n                       style=\"font-size: 11px;\" placeholder=\"0.00\">\n            </td>\n            <td style=\"padding: 8px;\">\n                <textarea class=\"form-control govt-fee-remark\" rows=\"2\" \n                          style=\"font-size: 11px; resize: vertical;\" \n                          placeholder=\"Enter government fee remarks...\"></textarea>\n            </td>\n            <td style=\"padding: 8px; text-align: center;\">\n                <button type=\"button\" class=\"btn btn-sm btn-danger remove-govt-fee\">\n                    <i class=\"fa fa-trash\"></i>\n                </button>\n            </td>\n        </tr>\n    `;\n    \n    dialog.fields_dict.govt_fees_html.$wrapper.find('.govt-fees-body').append(row_html);\n    \n    // Add remove button listener\n    dialog.fields_dict.govt_fees_html.$wrapper.find('.remove-govt-fee').last().on('click', function() {\n        $(this).closest('tr').remove();\n    });\n}\n\nfunction process_payment_data(frm, dialog, values) {\n    let customer = values.customer;\n    let contractor = values.contractor;\n    let payment_type = values.payment_type;\n\n    // Set customer in main form\n    if (payment_type === 'Customer') {\n        frm.set_value('customer', customer);\n    } else if (payment_type === 'Contractor') {\n        frm.set_value('customer', contractor);\n    }\n\n    // Set customer_type field if it exists\n    if (frm.fields_dict.customer_type) {\n        frm.set_value('customer_type', payment_type);\n    }\n\n    // Clear existing rows\n    frm.clear_table('service_payment_details');\n    frm.clear_table('government_fees');\n\n    // Clear trust fees table if it exists\n    if (frm.fields_dict.trust_fees_payment) {\n        frm.clear_table('trust_fees_payment');\n    }\n    \n    // Process invoice payments\n    let invoice_rows = dialog.fields_dict.invoices_html.$wrapper.find('tbody tr');\n    let promises = [];\n    \n    invoice_rows.each(function() {\n        let row = $(this);\n        let invoice_name = row.data('invoice');\n        let project_agreement = row.data('project');\n        let payment_amount_inclusive = parseFloat(row.find('.payment-amount').val()) || 0;\n        let net_payment_amount = parseFloat(row.find('.payment-amount').data('net-payment')) || 0;\n        let remark = row.find('.remark-field').val() || '';\n\n        if (payment_amount_inclusive > 0) {\n            let promise = new Promise((resolve) => {\n                get_full_invoice_details(invoice_name, function(invoice_data) {\n                    let invoice = invoice_data.invoice;\n                    let item = invoice.items[0]; // Since each invoice has one item\n                    let tax_ratio = invoice_data.tax_ratio;\n                    let item_total = invoice_data.item_total;\n\n                    // Calculate payment tax from the inclusive amount\n                    let payment_tax = payment_amount_inclusive - net_payment_amount;\n\n                    let child_row = frm.add_child('service_payment_details');\n                    child_row.invoice = invoice_name;\n                    child_row.item = item.item_code;\n                    child_row.total = item_total; // Using item total instead of grand_total\n                    child_row.total_taxes = invoice.total_taxes_and_charges || 0;\n                    child_row.outstanding = invoice.outstanding_amount;\n                    child_row.paid_amount = invoice.grand_total - invoice.outstanding_amount;\n                    child_row.payment_amount = net_payment_amount; // Store net payment amount\n                    child_row.tax_ratio = tax_ratio;\n                    child_row.payment_tax = payment_tax; // Store calculated payment tax\n                    child_row.unearned_account = item.income_account;\n                    child_row.revenue_account = item.custom_default_earning_account;\n                    child_row.project_agreement_reference = project_agreement;\n                    child_row.remark = remark;\n\n                    resolve();\n                });\n            });\n            promises.push(promise);\n        }\n    });\n    \n    // Process government fees if included (only for customer payments)\n    if (values.include_govt_fees && values.payment_type === 'Customer') {\n        let govt_fee_rows = dialog.fields_dict.govt_fees_html.$wrapper.find('.govt-fee-row');\n        govt_fee_rows.each(function() {\n            let project_agreement = $(this).find('.govt-fee-project').val();\n            let amount = parseFloat($(this).find('.govt-fee-amount').val()) || 0;\n            let remark = $(this).find('.govt-fee-remark').val() || '';\n\n            if (amount > 0 && project_agreement) {\n                let child_row = frm.add_child('government_fees');\n                child_row.amount = amount;\n                child_row.remark = remark;\n                child_row.project_agreement = project_agreement;\n            }\n        });\n    }\n\n    // Process trust fees if included (only for customer payments)\n    if (values.include_trust_fees && values.payment_type === 'Customer') {\n        let trust_fee_rows = dialog.fields_dict.trust_fees_html.$wrapper.find('.trust-fee-row');\n        trust_fee_rows.each(function() {\n            let project_agreement = $(this).find('.trust-fee-project').val();\n            let amount = parseFloat($(this).find('.trust-fee-amount').val()) || 0;\n            let remark = $(this).find('.trust-fee-remark').val() || '';\n\n            if (amount > 0 && project_agreement) {\n                // Add to trust_fees_payment table if it exists, otherwise add to government_fees with a note\n                if (frm.fields_dict.trust_fees_payment) {\n                    let child_row = frm.add_child('trust_fees_payment');\n                    child_row.amount = amount;\n                    child_row.remark = remark;\n                    child_row.project_agreement = project_agreement;\n                } else {\n                    // Fallback: add to government_fees with trust fee prefix\n                    let child_row = frm.add_child('government_fees');\n                    child_row.amount = amount;\n                    child_row.remark = '[TRUST FEE] ' + remark;\n                    child_row.project_agreement = project_agreement;\n                }\n            }\n        });\n    }\n    \n    // Wait for all invoice processing to complete\n    Promise.all(promises).then(() => {\n        frm.refresh_field('service_payment_details');\n        frm.refresh_field('government_fees');\n\n        // Refresh trust fees field if it exists\n        if (frm.fields_dict.trust_fees_payment) {\n            frm.refresh_field('trust_fees_payment');\n        }\n\n        dialog.hide();\n\n        let payment_type = values.payment_type || 'Customer';\n        frappe.msgprint(`Payment details have been populated successfully for ${payment_type.toLowerCase()} payment.`);\n    });\n}\n\nfunction get_full_invoice_details(invoice_name, callback) {\n    frappe.call({\n        method: 'frappe.client.get',\n        args: {\n            doctype: 'Sales Invoice',\n            name: invoice_name\n        },\n        callback: function(r) {\n            if (r.message) {\n                let invoice = r.message;\n                let tax_ratio = 0;\n                let item_total = 0;\n                \n                // Get tax ratio from taxes table\n                if (invoice.taxes && invoice.taxes.length > 0) {\n                    tax_ratio = invoice.taxes[0].rate || 0;\n                }\n                \n                // Get item total (amount without tax)\n                if (invoice.items && invoice.items.length > 0) {\n                    item_total = invoice.items[0].amount || 0;\n                }\n                \n                callback({\n                    tax_ratio: tax_ratio,\n                    item_total: item_total,\n                    invoice: invoice\n                });\n            }\n        }\n    });\n}\n\nfunction format_currency(amount) {\n    return frappe.format(amount, {fieldtype: 'Currency'});\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Projects Allocation",
  "enabled": 1,
  "modified": "2025-08-31 13:28:10.849337",
  "module": "Orbit",
  "name": "Popup and getting data",
  "script": "frappe.ui.form.on('Projects Allocation', {\r\n    refresh: function(frm) {\r\n        if (frm.is_new() || frm.doc.docstatus === 0) {\r\n            if (!frm.__allocation_button_added) {\r\n                frm.add_custom_button('Allocate Funds', function() {\r\n                    if (frm.__allocation_button_clicked) {\r\n                        frappe.msgprint('Allocation popup already opened.');\r\n                        return;\r\n                    }\r\n                    // Preconditions\r\n                    if (!frm.doc.project_allocate_from) {\r\n                        frappe.msgprint('Please select a Project Agreement in field \"Project Allocate From\" first.');\r\n                        return;\r\n                    }\r\n                    if (!frm.doc.customer) {\r\n                        frappe.msgprint('Customer must be fetched before allocation.');\r\n                        return;\r\n                    }\r\n\r\n                    // At least one balance must be > 0\r\n                    var gov_balance = parseFloat(frm.doc.gov_balance) || 0;\r\n                    var trust_balance = parseFloat(frm.doc.trust_fees_balance) || 0;\r\n                    if (gov_balance <= 0 && trust_balance <= 0) {\r\n                        frappe.msgprint('Both Gov. Balance and Trust Fees Balance are zero. Nothing to allocate.');\r\n                        return;\r\n                    }\r\n\r\n                    frm.__allocation_button_clicked = true;\r\n                    open_allocation_dialog(frm);\r\n                }).addClass('btn-primary');\r\n                frm.__allocation_button_added = true;\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nfunction open_allocation_dialog(frm) {\r\n    var customer = frm.doc.customer;\r\n    var gov_balance = parseFloat(frm.doc.gov_balance) || 0;\r\n    var trust_balance = parseFloat(frm.doc.trust_fees_balance) || 0;\r\n\r\n    var dialog = new frappe.ui.Dialog({\r\n        title: 'Allocate Funds to Invoices',\r\n        fields: [\r\n            {\r\n                label: 'Project Agreements',\r\n                fieldname: 'project_agreements',\r\n                fieldtype: 'MultiSelectList',\r\n                get_data: function() {\r\n                    return frappe.db.get_list('Project Agreement', {\r\n                        filters: {\r\n                            customer: customer,\r\n                            docstatus: 1\r\n                        },\r\n                        fields: ['name', 'project_name']\r\n                    }).then(function(data) {\r\n                        return (data || []).map(function(d) {\r\n                            return {\r\n                                value: d.name,\r\n                                description: d.project_name || d.name\r\n                            };\r\n                        });\r\n                    });\r\n                },\r\n                change: function() {\r\n                    var selected = dialog.get_value('project_agreements') || [];\r\n                    if (selected.length === 0) {\r\n                        dialog.fields_dict.invoices_html.$wrapper.html('');\r\n                        return;\r\n                    }\r\n                    \r\n                    load_invoices_for_projects(dialog, selected, customer, function(invoices) {\r\n                        if ((invoices || []).length === 0) {\r\n                            dialog.fields_dict.invoices_html.$wrapper.html('<p>No open invoices found for selected project agreements.</p>');\r\n                        } else {\r\n                            render_invoice_allocation_table(dialog, invoices, frm);\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            {\r\n                fieldname: 'balance_html',\r\n                fieldtype: 'HTML'\r\n            },\r\n            {\r\n                label: 'Invoices',\r\n                fieldname: 'invoices_html',\r\n                fieldtype: 'HTML'\r\n            }\r\n        ],\r\n        size: 'extra-large',\r\n        primary_action_label: 'Apply Allocation',\r\n        primary_action: function(values) {\r\n            apply_allocation_to_doc(frm, dialog, values);\r\n        }\r\n    });\r\n\r\n    dialog.show();\r\n    update_remaining_balance_banner(dialog, frm);\r\n    dialog.$wrapper.find('.modal-dialog').css({\r\n        'max-width': '95vw',\r\n        'width': '95vw'\r\n    });\r\n}\r\n\r\nfunction update_remaining_balance_banner(dialog, frm) {\r\n    var gov_balance = parseFloat(frm.doc.gov_balance) || 0;\r\n    var trust_balance = parseFloat(frm.doc.trust_fees_balance) || 0;\r\n    \r\n    // Calculate allocated amounts per source\r\n    var gov_allocated = 0;\r\n    var trust_allocated = 0;\r\n    \r\n    if (dialog.fields_dict.invoices_html && dialog.fields_dict.invoices_html.$wrapper) {\r\n        dialog.fields_dict.invoices_html.$wrapper.find('tbody tr').each(function() {\r\n            var $tr = $(this);\r\n            var allocAmount = parseFloat($tr.find('.alloc-amount').val() || '0') || 0;\r\n            var allocFrom = $tr.find('.alloc-from').val();\r\n            \r\n            if (allocFrom === 'Gov. Fees') {\r\n                gov_allocated += allocAmount;\r\n            } else if (allocFrom === 'Trust Fees') {\r\n                trust_allocated += allocAmount;\r\n            }\r\n        });\r\n    }\r\n    \r\n    var remaining_gov = Math.max(0, gov_balance - gov_allocated);\r\n    var remaining_trust = Math.max(0, trust_balance - trust_allocated);\r\n    \r\n    var html = '' +\r\n        '<div style=\"margin-top: 8px;\">' +\r\n        '<div class=\"alert\" style=\"padding: 10px; background: #0d6efd10; border: 1px solid #0d6efd22; margin-bottom: 8px;\">' +\r\n        '<div style=\"display:flex; align-items:center; justify-content:space-between;\">' +\r\n        '<div><strong>Remaining Gov. Fees:</strong></div>' +\r\n        '<div class=\"remaining-balance\" style=\"font-weight:600;\">' + format_currency_compact(remaining_gov) + '</div>' +\r\n        '</div></div>' +\r\n        '<div class=\"alert\" style=\"padding: 10px; background: #6f42c110; border: 1px solid #6f42c122;\">' +\r\n        '<div style=\"display:flex; align-items:center; justify-content:space-between;\">' +\r\n        '<div><strong>Remaining Trust Fees:</strong></div>' +\r\n        '<div class=\"remaining-balance\" style=\"font-weight:600;\">' + format_currency_compact(remaining_trust) + '</div>' +\r\n        '</div></div>' +\r\n        '</div>';\r\n    \r\n    dialog.fields_dict.balance_html.$wrapper.html(html);\r\n}\r\n\r\nfunction load_invoices_for_projects(dialog, project_agreements, customer, callback) {\r\n    var all_invoices = [];\r\n    var processed = 0;\r\n    project_agreements.forEach(function(project_agreement) {\r\n        frappe.call({\r\n            method: 'frappe.client.get_list',\r\n            args: {\r\n                doctype: 'Sales Invoice',\r\n                filters: {\r\n                    custom_project_agreement: project_agreement,\r\n                    customer: customer,\r\n                    outstanding_amount: ['>', 0],\r\n                    docstatus: 1\r\n                },\r\n                fields: ['name', 'customer', 'grand_total', 'outstanding_amount', 'total_taxes_and_charges', 'debit_to', 'custom_project_agreement']\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.length > 0) {\r\n                    r.message.forEach(function(inv) {\r\n                        inv.project_agreement = project_agreement;\r\n                        all_invoices.push(inv);\r\n                    });\r\n                }\r\n                processed++;\r\n                if (processed === project_agreements.length) {\r\n                    callback(all_invoices);\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction render_invoice_allocation_table(dialog, invoices, frm) {\r\n    var html = '' +\r\n        '<div style=\"overflow-x: auto; margin-top: 10px;\">' +\r\n        '<table class=\"table table-bordered table-hover\" style=\"min-width: 1600px; font-size: 14px;\">' +\r\n        '<thead class=\"thead-light\">' +\r\n        '<tr style=\"background-color: #f8f9fa;\">' +\r\n        '<th style=\"min-width: 100px; text-align: center;\">Project</th>' +\r\n        '<th style=\"min-width: 120px; text-align: center;\">Invoice</th>' +\r\n        '<th style=\"min-width: 100px; text-align: center;\">Item Code</th>' +\r\n        '<th style=\"min-width: 90px; text-align: center;\">Item Total</th>' +\r\n        '<th style=\"min-width: 80px; text-align: center;\">Tax Amt</th>' +\r\n        '<th style=\"min-width: 70px; text-align: center;\">Tax %</th>' +\r\n        '<th style=\"min-width: 90px; text-align: center;\">Outstanding</th>' +\r\n        '<th style=\"min-width: 120px; text-align: center;\">Allocate From</th>' +\r\n        '<th style=\"min-width: 90px; text-align: center;\">Allocated (Net)</th>' +\r\n        '<th style=\"min-width: 90px; text-align: center;\">Pay Tax</th>' +\r\n        '<th style=\"min-width: 110px; text-align: center;\">Payment (Inc)</th>' +\r\n        '<th style=\"min-width: 200px; text-align: center;\">Remarks</th>' +\r\n        '</tr></thead><tbody>';\r\n\r\n    var processed = 0;\r\n    invoices.forEach(function(inv, idx) {\r\n        get_invoice_details(inv.name, function(info) {\r\n            var tax_ratio = info.tax_ratio || 0;\r\n            var item_code = info.item_code || '';\r\n            var item_total = info.item_total || 0;\r\n\r\n            html += '' +\r\n                '<tr data-invoice=\"' + inv.name + '\" data-project=\"' + inv.project_agreement + '\" data-index=\"' + idx + '\">' +\r\n                '<td style=\"text-align:center; font-size:13px;\">' + inv.project_agreement + '</td>' +\r\n                '<td style=\"text-align:center; font-size:13px;\">' + inv.name + '</td>' +\r\n                '<td style=\"text-align:center; font-size:13px;\">' + item_code + '</td>' +\r\n                '<td style=\"text-align:center; font-size:13px;\">' + format_currency_compact(item_total) + '</td>' +\r\n                '<td style=\"text-align:center; font-size:13px;\">' + format_currency_compact(inv.total_taxes_and_charges || 0) + '</td>' +\r\n                '<td style=\"text-align:center; font-size:13px;\"><span class=\"badge badge-info\">' + tax_ratio + '%</span></td>' +\r\n                '<td style=\"text-align:center; font-size:13px;\">' + format_currency_compact(inv.outstanding_amount) + '</td>' +\r\n                '<td style=\"padding:6px; text-align:center;\">' +\r\n                '  <select class=\"form-control alloc-from\" style=\"width: 120px; font-size: 13px;\">' +\r\n                '    <option value=\"\">Select...</option>' +\r\n                '    <option value=\"Gov. Fees\">Gov. Fees</option>' +\r\n                '    <option value=\"Trust Fees\">Trust Fees</option>' +\r\n                '  </select>' +\r\n                '</td>' +\r\n                '<td style=\"padding:6px; text-align:center;\">' +\r\n                '  <input type=\"number\" class=\"form-control alloc-amount\" step=\"0.01\" min=\"0\" max=\"' + (inv.outstanding_amount || 0) + '\" style=\"width: 110px; font-size: 13px; text-align:center;\" placeholder=\"0.00\" data-tax-ratio=\"' + tax_ratio + '\">' +\r\n                '</td>' +\r\n                '<td style=\"text-align:center; font-size:13px;\"><span class=\"alloc-tax\">0.00</span></td>' +\r\n                '<td style=\"text-align:center; font-size:13px;\"><span class=\"alloc-payment\">0.00</span></td>' +\r\n                '<td style=\"padding:6px; text-align:center;\"><textarea class=\"form-control alloc-remark\" rows=\"2\" style=\"width: 200px; font-size: 13px; resize: vertical;\"></textarea></td>' +\r\n                '</tr>';\r\n\r\n            processed++;\r\n            if (processed === invoices.length) {\r\n                html += '</tbody></table></div>';\r\n                dialog.fields_dict.invoices_html.$wrapper.html(html);\r\n                add_allocation_input_listeners(dialog, frm);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction get_invoice_details(invoice_name, callback) {\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Sales Invoice',\r\n            name: invoice_name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                var invoice = r.message;\r\n                var tax_ratio = 0;\r\n                var item_code = '';\r\n                var item_total = 0;\r\n                if (invoice.taxes && invoice.taxes.length > 0) {\r\n                    tax_ratio = invoice.taxes[0].rate || 0;\r\n                }\r\n                if (invoice.items && invoice.items.length > 0) {\r\n                    item_code = invoice.items[0].item_code || '';\r\n                    item_total = invoice.items[0].amount || 0;\r\n                }\r\n                callback({\r\n                    tax_ratio: tax_ratio,\r\n                    item_code: item_code,\r\n                    item_total: item_total,\r\n                    invoice: invoice\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction add_allocation_input_listeners(dialog, frm) {\r\n    // Add listeners for both allocation amount and allocation source changes\r\n    dialog.fields_dict.invoices_html.$wrapper.on('input change', '.alloc-amount, .alloc-from', function() {\r\n        var $tr = $(this).closest('tr');\r\n        var allocAmount = parseFloat($tr.find('.alloc-amount').val()) || 0;\r\n        var allocFrom = $tr.find('.alloc-from').val();\r\n        var maxOutstanding = parseFloat($tr.find('.alloc-amount').attr('max')) || 0;\r\n        var tax_ratio = parseFloat($tr.find('.alloc-amount').data('tax-ratio')) || 0;\r\n\r\n        // Validate allocation source is selected if amount is entered\r\n        if (allocAmount > 0 && !allocFrom) {\r\n            frappe.msgprint('Please select \"Allocate From\" first.');\r\n            $tr.find('.alloc-amount').val('');\r\n            return;\r\n        }\r\n\r\n        // Ensure does not exceed invoice outstanding\r\n        if (allocAmount > maxOutstanding) {\r\n            allocAmount = maxOutstanding;\r\n            $tr.find('.alloc-amount').val(allocAmount);\r\n        }\r\n\r\n        // Validate against remaining balance for selected source\r\n        if (allocFrom && allocAmount > 0) {\r\n            var remainingBalance = getRemainingBalance(dialog, frm, allocFrom, $tr);\r\n            if (allocAmount > remainingBalance) {\r\n                allocAmount = remainingBalance;\r\n                $tr.find('.alloc-amount').val(allocAmount);\r\n                if (remainingBalance <= 0) {\r\n                    frappe.msgprint('No remaining balance for ' + allocFrom);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Calculate tax and payment amounts\r\n        // User enters Allocated (Net) = total amount deducted from balance\r\n        // Payment (Inc) = Allocated (Net) / (1 + tax_ratio/100) - net amount for invoice\r\n        // Pay Tax = tax calculated on Payment (Inc)\r\n        var payment_inclusive = allocAmount / (1 + (tax_ratio / 100.0)); // Net amount for invoice\r\n        var payment_tax = payment_inclusive * (tax_ratio / 100.0); // Tax on the net amount\r\n        \r\n        $tr.find('.alloc-tax').text(format_currency_compact(payment_tax));\r\n        $tr.find('.alloc-payment').text(format_currency_compact(payment_inclusive));\r\n\r\n        // Update banner remaining balances\r\n        update_remaining_balance_banner(dialog, frm);\r\n    });\r\n}\r\n\r\nfunction getRemainingBalance(dialog, frm, source, excludeRow) {\r\n    var baseBalance = 0;\r\n    if (source === 'Gov. Fees') {\r\n        baseBalance = parseFloat(frm.doc.gov_balance) || 0;\r\n    } else if (source === 'Trust Fees') {\r\n        baseBalance = parseFloat(frm.doc.trust_fees_balance) || 0;\r\n    }\r\n    \r\n    // Calculate already allocated amount for this source (excluding current row)\r\n    var allocatedSum = 0;\r\n    dialog.fields_dict.invoices_html.$wrapper.find('tbody tr').each(function() {\r\n        var $tr = $(this);\r\n        if (excludeRow && $tr[0] === excludeRow[0]) {\r\n            return; // Skip current row\r\n        }\r\n        \r\n        var rowAllocFrom = $tr.find('.alloc-from').val();\r\n        var rowAllocAmount = parseFloat($tr.find('.alloc-amount').val()) || 0;\r\n        \r\n        if (rowAllocFrom === source) {\r\n            allocatedSum += rowAllocAmount;\r\n        }\r\n    });\r\n    \r\n    return Math.max(0, baseBalance - allocatedSum);\r\n}\r\n\r\nfunction apply_allocation_to_doc(frm, dialog, values) {\r\n    var rows = [];\r\n    var hasErrors = false;\r\n    \r\n    dialog.fields_dict.invoices_html.$wrapper.find('tbody tr').each(function() {\r\n        var $tr = $(this);\r\n        var alloc = parseFloat($tr.find('.alloc-amount').val()) || 0;\r\n        var allocFrom = $tr.find('.alloc-from').val();\r\n        \r\n        if (alloc > 0) {\r\n            if (!allocFrom) {\r\n                frappe.msgprint('Please select \"Allocate From\" for invoice: ' + $tr.data('invoice'));\r\n                hasErrors = true;\r\n                return false;\r\n            }\r\n            \r\n            rows.push({\r\n                invoice: $tr.data('invoice'),\r\n                project: $tr.data('project'),\r\n                remark: $tr.find('.alloc-remark').val() || '',\r\n                allocated_amount: alloc,\r\n                allocate_from: allocFrom\r\n            });\r\n        }\r\n    });\r\n\r\n    if (hasErrors) return;\r\n\r\n    if (rows.length === 0) {\r\n        frappe.msgprint('Please enter allocation amounts.');\r\n        return;\r\n    }\r\n\r\n    // Clear existing\r\n    frm.clear_table('service_allocation');\r\n\r\n    var promises = [];\r\n    rows.forEach(function(rw) {\r\n        var p = new Promise(function(resolve) {\r\n            get_full_invoice_details(rw.invoice, function(info) {\r\n                var inv = info.invoice;\r\n                var item = inv.items && inv.items.length ? inv.items[0] : {};\r\n                var tax_ratio = info.tax_ratio || 0;\r\n                var item_total = info.item_total || 0;\r\n                var payment_inclusive = rw.allocated_amount / (1 + (tax_ratio / 100.0)); // Net amount for invoice\r\n                var payment_tax = payment_inclusive * (tax_ratio / 100.0); // Tax on the net amount\r\n\r\n                var child = frm.add_child('service_allocation');\r\n                child.invoice = inv.name;\r\n                child.item = item.item_code || '';\r\n                child.total = item_total;\r\n                child.total_taxes = inv.total_taxes_and_charges || 0;\r\n                child.outstanding = inv.outstanding_amount || 0;\r\n                child.paid_amount = (inv.grand_total || 0) - (inv.outstanding_amount || 0);\r\n                child.payment_amount = payment_inclusive; // Net amount for invoice payment\r\n                child.allocated_amount = rw.allocated_amount; // Amount deducted from balance\r\n                child.payment_tax = payment_tax;\r\n                child.tax_ratio = tax_ratio;\r\n                child.unearned_account = item.income_account || '';\r\n                child.revenue_account = item.custom_default_earning_account || '';\r\n                child.advance_account = frm.doc.advance_account || '';\r\n                child.customer_debit_to = inv.debit_to || '';\r\n                child.project_agreement_reference = inv.custom_project_agreement || rw.project;\r\n                child.allocate_from = rw.allocate_from;\r\n                child.remark = rw.remark;\r\n\r\n                resolve();\r\n            });\r\n        });\r\n        promises.push(p);\r\n    });\r\n\r\n    Promise.all(promises).then(function() {\r\n        // Update totals\r\n        var total_gov = 0;\r\n        var total_trust = 0;\r\n        (frm.doc.service_allocation || []).forEach(function(row) {\r\n            var amt = parseFloat(row.allocated_amount || 0) || 0; // Use allocated_amount for totals\r\n            if (row.allocate_from === 'Gov. Fees') {\r\n                total_gov += amt;\r\n            } else if (row.allocate_from === 'Trust Fees') {\r\n                total_trust += amt;\r\n            }\r\n        });\r\n        frm.set_value('total_gov_fees_allocated', total_gov);\r\n        frm.set_value('total_trust_fees_allocated', total_trust);\r\n\r\n        frm.refresh_field('service_allocation');\r\n        frm.refresh_field('total_gov_fees_allocated');\r\n        frm.refresh_field('total_trust_fees_allocated');\r\n\r\n        dialog.hide();\r\n        frm.__allocation_button_clicked = false; // Reset flag\r\n        frappe.msgprint('Allocation rows have been populated.');\r\n    });\r\n}\r\n\r\nfunction get_full_invoice_details(invoice_name, callback) {\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Sales Invoice',\r\n            name: invoice_name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                var invoice = r.message;\r\n                var tax_ratio = 0;\r\n                var item_total = 0;\r\n                if (invoice.taxes && invoice.taxes.length > 0) {\r\n                    tax_ratio = invoice.taxes[0].rate || 0;\r\n                }\r\n                if (invoice.items && invoice.items.length > 0) {\r\n                    item_total = invoice.items[0].amount || 0;\r\n                }\r\n                callback({\r\n                    tax_ratio: tax_ratio,\r\n                    item_total: item_total,\r\n                    invoice: invoice\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction format_currency_compact(amount) {\r\n    if (!amount) return '0.00';\r\n    return parseFloat(amount).toLocaleString('en-US', {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2\r\n    });\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Outsource Payment",
  "enabled": 1,
  "modified": "2025-08-31 13:28:10.598792",
  "module": "Orbit",
  "name": "Show popup when creating new record",
  "script": "frappe.ui.form.on('Outsource Payment', {\r\n    onload: function(frm) {\r\n        if (frm.is_new()) {\r\n            // Show popup when creating new record\r\n            show_outsource_payment_popup(frm);\r\n        }\r\n    },\r\n    \r\n    mode_of_payment: function(frm) {\r\n        // Fetch default account from mode of payment and set in pay_from_account\r\n        if (frm.doc.mode_of_payment) {\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Mode of Payment',\r\n                    name: frm.doc.mode_of_payment\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.accounts && r.message.accounts.length > 0) {\r\n                        // Get the default account for the current company\r\n                        let default_account = null;\r\n                        for (let account of r.message.accounts) {\r\n                            if (account.company === frm.doc.company || !frm.doc.company) {\r\n                                default_account = account.default_account;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (default_account) {\r\n                            frm.set_value('pay_from_account', default_account);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\n    \r\n    refresh: function(frm) {\r\n        // Calculate totals after data is populated\r\n        calculate_totals(frm);\r\n    }\r\n});\r\n\r\nfunction show_outsource_payment_popup(frm) {\r\n    let dialog = new frappe.ui.Dialog({\r\n        title: 'Select Supplier and Project Agreements',\r\n        fields: [\r\n            {\r\n                label: 'Supplier',\r\n                fieldname: 'supplier',\r\n                fieldtype: 'Link',\r\n                options: 'Supplier',\r\n                reqd: 1,\r\n                change: function() {\r\n                    let supplier = dialog.get_value('supplier');\r\n                    if (supplier) {\r\n                        // Clear project agreements and invoices\r\n                        dialog.set_value('project_agreements', []);\r\n                        dialog.fields_dict.invoices_html.$wrapper.html('');\r\n                        \r\n                        // Refresh project agreements field\r\n                        dialog.fields_dict.project_agreements.refresh();\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                label: 'Project Agreements',\r\n                fieldname: 'project_agreements',\r\n                fieldtype: 'MultiSelectList',\r\n                get_data: function() {\r\n                    let supplier = dialog.get_value('supplier');\r\n                    \r\n                    if (supplier) {\r\n                        return new Promise(function(resolve) {\r\n                            // Get all Project Agreements and check their outsource_services child table\r\n                            frappe.db.get_list('Project Agreement', {\r\n                                filters: {\r\n                                    'docstatus': 1\r\n                                },\r\n                                fields: ['name', 'project_name']\r\n                            }).then(function(all_projects) {\r\n                                if (!all_projects || all_projects.length === 0) {\r\n                                    resolve([]);\r\n                                    return;\r\n                                }\r\n\r\n                                let valid_projects = [];\r\n                                let processed = 0;\r\n\r\n                                // Check each project for outsource services for this supplier\r\n                                all_projects.forEach(function(project) {\r\n                                    frappe.db.get_doc('Project Agreement', project.name).then(function(project_doc) {\r\n                                        // Check if this project has outsource services for our supplier\r\n                                        if (project_doc.outsource_services && project_doc.outsource_services.length > 0) {\r\n                                            let supplier_services = project_doc.outsource_services.filter(os =>\r\n                                                os.service_provider === supplier && os.invoiced === 1\r\n                                            );\r\n\r\n                                            if (supplier_services.length > 0) {\r\n                                                valid_projects.push({\r\n                                                    value: project.name,\r\n                                                    description: project.project_name || project.name\r\n                                                });\r\n                                            }\r\n                                        }\r\n\r\n                                        processed++;\r\n                                        if (processed === all_projects.length) {\r\n                                            resolve(valid_projects);\r\n                                        }\r\n                                    }).catch(function(error) {\r\n                                        console.error('Error getting project doc:', project.name, error);\r\n                                        processed++;\r\n                                        if (processed === all_projects.length) {\r\n                                            resolve(valid_projects);\r\n                                        }\r\n                                    });\r\n                                });\r\n                            }).catch(function(error) {\r\n                                console.error('Error getting Project Agreements:', error);\r\n                                resolve([]);\r\n                            });\r\n                        });\r\n                    }\r\n                    return Promise.resolve([]);\r\n                },\r\n                change: function() {\r\n                    let project_agreements = dialog.get_value('project_agreements');\r\n                    if (project_agreements && project_agreements.length > 0) {\r\n                        load_purchase_invoices_for_projects(dialog, project_agreements);\r\n                    } else {\r\n                        dialog.fields_dict.invoices_html.$wrapper.html('');\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                label: 'Invoice Payment Details',\r\n                fieldname: 'invoice_section',\r\n                fieldtype: 'Section Break'\r\n            },\r\n            {\r\n                label: 'Purchase Invoices',\r\n                fieldname: 'invoices_html',\r\n                fieldtype: 'HTML'\r\n            }\r\n        ],\r\n        size: 'extra-large',\r\n        primary_action_label: 'Create Payment',\r\n        primary_action: function(values) {\r\n            process_outsource_payment_data(frm, dialog, values);\r\n        }\r\n    });\r\n\r\n    dialog.show();\r\n\r\n    // Set dialog width to screen width for better clarity\r\n    dialog.$wrapper.find('.modal-dialog').css({\r\n        'max-width': '95vw',\r\n        'width': '95vw'\r\n    });\r\n}\r\n\r\nfunction load_purchase_invoices_for_projects(dialog, project_agreements) {\r\n    let supplier = dialog.get_value('supplier');\r\n    let all_invoices = [];\r\n    let processed_projects = 0;\r\n\r\n    project_agreements.forEach(function(project_agreement) {\r\n        frappe.db.get_list('Purchase Invoice', {\r\n            filters: {\r\n                'custom_project_agreement': project_agreement,\r\n                'supplier': supplier,\r\n                'outstanding_amount': ['>', 0],\r\n                'docstatus': 1\r\n            },\r\n            fields: ['name', 'supplier', 'grand_total', 'outstanding_amount', 'total_taxes_and_charges']\r\n        }).then(function(invoices) {\r\n            if (invoices && invoices.length > 0) {\r\n                invoices.forEach(function(invoice) {\r\n                    invoice.project_agreement = project_agreement;\r\n                    all_invoices.push(invoice);\r\n                });\r\n            }\r\n\r\n            processed_projects++;\r\n            if (processed_projects === project_agreements.length) {\r\n                if (all_invoices.length > 0) {\r\n                    render_purchase_invoice_table(dialog, all_invoices);\r\n                } else {\r\n                    dialog.fields_dict.invoices_html.$wrapper.html('<p>No open purchase invoices found for selected supplier in these project agreements.</p>');\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction render_purchase_invoice_table(dialog, invoices) {\r\n    let html = `\r\n        <div style=\"overflow-x: auto; margin-top: 15px;\">\r\n            <table class=\"table table-bordered table-hover\" style=\"min-width: 1400px; font-size: 14px;\">\r\n                <thead class=\"thead-light\">\r\n                    <tr style=\"background-color: #f8f9fa;\">\r\n                        <th style=\"min-width: 80px; text-align: center; font-size: 14px; font-weight: bold;\">Project</th>\r\n                        <th style=\"min-width: 100px; text-align: center; font-size: 14px; font-weight: bold;\">Item Code</th>\r\n                        <th style=\"min-width: 90px; text-align: center; font-size: 14px; font-weight: bold;\">Item Total</th>\r\n                        <th style=\"min-width: 80px; text-align: center; font-size: 14px; font-weight: bold;\">Tax Amount</th>\r\n                        <th style=\"min-width: 70px; text-align: center; font-size: 14px; font-weight: bold;\">Tax %</th>\r\n                        <th style=\"min-width: 90px; text-align: center; font-size: 14px; font-weight: bold;\">Outstanding</th>\r\n                        <th style=\"min-width: 80px; text-align: center; font-size: 14px; font-weight: bold;\">Out. %</th>\r\n                        <th style=\"min-width: 80px; text-align: center; font-size: 14px; font-weight: bold;\">Balance</th>\r\n                        <th style=\"min-width: 100px; text-align: center; font-size: 14px; font-weight: bold;\">Payment (Inc. Tax)</th>\r\n                        <th style=\"min-width: 90px; text-align: center; font-size: 14px; font-weight: bold;\">Payment Tax</th>\r\n                        <th style=\"min-width: 200px; text-align: center; font-size: 14px; font-weight: bold;\">Remarks</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n    `;\r\n\r\n    let processed_count = 0;\r\n    invoices.forEach(function(invoice, index) {\r\n        // Get full invoice details including item information\r\n        get_purchase_invoice_details(invoice.name, function(invoice_details) {\r\n            let tax_ratio = invoice_details.tax_ratio || 0;\r\n            let item_code = invoice_details.item_code || '';\r\n            let item_total = invoice_details.item_total || 0;\r\n            let total_with_tax = item_total + (invoice.total_taxes_and_charges || 0);\r\n            let outstanding_ratio = total_with_tax > 0 ? (invoice.outstanding_amount / total_with_tax) : 0;\r\n            let balance = outstanding_ratio * item_total;\r\n            \r\n            html += `\r\n                <tr data-invoice=\"${invoice.name}\" data-project=\"${invoice.project_agreement}\" data-index=\"${index}\" style=\"border-bottom: 1px solid #dee2e6;\">\r\n                    <td style=\"font-size: 13px; padding: 10px; text-align: center;\">\r\n                        <span title=\"${invoice.project_agreement}\">${invoice.project_agreement.substring(0, 8)}...</span>\r\n                    </td>\r\n                    <td style=\"font-weight: 500; padding: 10px; text-align: center; font-size: 13px;\">${item_code}</td>\r\n                    <td style=\"text-align: center; padding: 10px; font-size: 13px;\">${format_currency_compact(item_total)}</td>\r\n                    <td style=\"text-align: center; padding: 10px; font-size: 13px;\">${format_currency_compact(invoice.total_taxes_and_charges || 0)}</td>\r\n                    <td style=\"text-align: center; padding: 10px;\"><span class=\"badge badge-info\" style=\"font-size: 12px;\">${tax_ratio}%</span></td>\r\n                    <td style=\"text-align: center; padding: 10px; font-size: 13px;\">${format_currency_compact(invoice.outstanding_amount)}</td>\r\n                    <td style=\"text-align: center; padding: 10px;\"><span class=\"outstanding-ratio badge badge-secondary\" style=\"font-size: 12px;\">${(outstanding_ratio * 100).toFixed(1)}%</span></td>\r\n                    <td style=\"text-align: center; padding: 10px;\"><span class=\"balance\" style=\"font-weight: 500; font-size: 13px;\">${format_currency_compact(balance)}</span></td>\r\n                    <td style=\"padding: 8px; text-align: center;\">\r\n                        <input type=\"number\"\r\n                               class=\"form-control payment-amount\"\r\n                               data-invoice=\"${invoice.name}\"\r\n                               data-outstanding=\"${invoice.outstanding_amount}\"\r\n                               data-tax-ratio=\"${tax_ratio}\"\r\n                               data-balance=\"${balance}\"\r\n                               step=\"0.01\"\r\n                               min=\"0\"\r\n                               max=\"${invoice.outstanding_amount}\"\r\n                               style=\"width: 95px; font-size: 13px; padding: 6px; text-align: center;\"\r\n                               placeholder=\"0.00\">\r\n                    </td>\r\n                    <td style=\"text-align: center; padding: 10px;\">\r\n                        <span class=\"payment-tax\" style=\"font-weight: 500; color: #28a745; font-size: 13px;\">0.00</span>\r\n                    </td>\r\n                    <td style=\"padding: 8px; text-align: center;\">\r\n                        <textarea class=\"form-control remark-field\"\r\n                                  data-invoice=\"${invoice.name}\"\r\n                                  rows=\"2\"\r\n                                  style=\"width: 190px; font-size: 13px; resize: vertical; text-align: left;\"\r\n                                  placeholder=\"Enter payment remarks...\"></textarea>\r\n                    </td>\r\n                </tr>\r\n            `;\r\n            \r\n            processed_count++;\r\n            // If this is the last invoice, close the table and add event listeners\r\n            if (processed_count === invoices.length) {\r\n                html += '</tbody></table></div>';\r\n                dialog.fields_dict.invoices_html.$wrapper.html(html);\r\n                add_payment_amount_listeners(dialog);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction get_purchase_invoice_details(invoice_name, callback) {\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Purchase Invoice',\r\n            name: invoice_name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                let invoice = r.message;\r\n                let tax_ratio = 0;\r\n                let item_code = '';\r\n                let item_total = 0;\r\n                \r\n                // Get tax ratio from taxes table\r\n                if (invoice.taxes && invoice.taxes.length > 0) {\r\n                    tax_ratio = invoice.taxes[0].rate || 0;\r\n                }\r\n                \r\n                // Get item details (assuming one item per invoice)\r\n                if (invoice.items && invoice.items.length > 0) {\r\n                    item_code = invoice.items[0].item_code || '';\r\n                    item_total = invoice.items[0].amount || 0; // This is total for item without tax\r\n                }\r\n                \r\n                callback({\r\n                    tax_ratio: tax_ratio,\r\n                    item_code: item_code,\r\n                    item_total: item_total,\r\n                    invoice: invoice\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction add_payment_amount_listeners(dialog) {\r\n    dialog.fields_dict.invoices_html.$wrapper.find('.payment-amount').on('input', function() {\r\n        let payment_amount_inclusive = parseFloat($(this).val()) || 0;\r\n        let outstanding_amount = parseFloat($(this).data('outstanding')) || 0;\r\n        let tax_ratio = parseFloat($(this).data('tax-ratio')) || 0;\r\n\r\n        // Validate payment amount doesn't exceed outstanding amount\r\n        if (payment_amount_inclusive > outstanding_amount) {\r\n            frappe.msgprint(`Payment amount (including tax) cannot exceed outstanding amount of ${format_currency_compact(outstanding_amount)}`);\r\n            $(this).val(outstanding_amount);\r\n            payment_amount_inclusive = outstanding_amount;\r\n        }\r\n\r\n        // Calculate payment tax and net payment amount from tax-inclusive amount\r\n        // Formula: payment_amount_inclusive = net_payment + (net_payment * tax_ratio / 100)\r\n        // Solving for net_payment: net_payment = payment_amount_inclusive / (1 + tax_ratio / 100)\r\n        let net_payment_amount = payment_amount_inclusive / (1 + tax_ratio / 100);\r\n        let payment_tax = payment_amount_inclusive - net_payment_amount;\r\n\r\n        // Store the net payment amount for later use\r\n        $(this).data('net-payment', net_payment_amount);\r\n\r\n        // Display payment tax\r\n        $(this).closest('tr').find('.payment-tax').text(format_currency_compact(payment_tax));\r\n    });\r\n}\r\n\r\nfunction format_currency_compact(amount) {\r\n    if (!amount) return '0.00';\r\n    return parseFloat(amount).toLocaleString('en-US', {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2\r\n    });\r\n}\r\n\r\nfunction process_outsource_payment_data(frm, dialog, values) {\r\n    let supplier = values.supplier;\r\n\r\n    // Set supplier in main form\r\n    frm.set_value('supplier', supplier);\r\n\r\n    // Clear existing rows\r\n    frm.clear_table('outsource_services_payment');\r\n    \r\n    // Process invoice payments\r\n    let invoice_rows = dialog.fields_dict.invoices_html.$wrapper.find('tbody tr');\r\n    let promises = [];\r\n    \r\n    invoice_rows.each(function() {\r\n        let row = $(this);\r\n        let invoice_name = row.data('invoice');\r\n        let project_agreement = row.data('project');\r\n        let payment_amount_inclusive = parseFloat(row.find('.payment-amount').val()) || 0;\r\n        let net_payment_amount = parseFloat(row.find('.payment-amount').data('net-payment')) || 0;\r\n        let remark = row.find('.remark-field').val() || '';\r\n\r\n        if (payment_amount_inclusive > 0) {\r\n            let promise = new Promise((resolve) => {\r\n                get_full_purchase_invoice_details(invoice_name, function(invoice_data) {\r\n                    let invoice = invoice_data.invoice;\r\n                    let item = invoice.items[0]; // Since each invoice has one item\r\n                    let tax_ratio = invoice_data.tax_ratio;\r\n                    let item_total = invoice_data.item_total;\r\n\r\n                    // Calculate payment tax from the inclusive amount\r\n                    let payment_tax = payment_amount_inclusive - net_payment_amount;\r\n\r\n                    let child_row = frm.add_child('outsource_services_payment');\r\n                    child_row.invoice = invoice_name;\r\n                    child_row.project_agreement = project_agreement;\r\n                    child_row.item = item.item_code;\r\n                    child_row.total = item_total; // Using item total instead of grand_total\r\n                    child_row.total_taxes = invoice.total_taxes_and_charges || 0;\r\n                    child_row.outstanding = invoice.outstanding_amount;\r\n                    child_row.payment_amount = net_payment_amount; // Store net payment amount\r\n                    child_row.payment_tax = payment_tax; // Store calculated payment tax\r\n                    child_row.tax_ratio = tax_ratio;\r\n                    child_row.supplier_account = invoice.credit_to; // Supplier's payable account\r\n                    child_row.remark = remark;\r\n\r\n                    resolve();\r\n                });\r\n            });\r\n            promises.push(promise);\r\n        }\r\n    });\r\n    \r\n    // Wait for all invoice processing to complete\r\n    Promise.all(promises).then(() => {\r\n        frm.refresh_field('outsource_services_payment');\r\n        \r\n        // Calculate totals\r\n        calculate_totals(frm);\r\n        \r\n        dialog.hide();\r\n        frappe.msgprint('Outsource payment details have been populated successfully.');\r\n    });\r\n}\r\n\r\nfunction get_full_purchase_invoice_details(invoice_name, callback) {\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Purchase Invoice',\r\n            name: invoice_name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                let invoice = r.message;\r\n                let tax_ratio = 0;\r\n                let item_total = 0;\r\n                \r\n                // Get tax ratio from taxes table\r\n                if (invoice.taxes && invoice.taxes.length > 0) {\r\n                    tax_ratio = invoice.taxes[0].rate || 0;\r\n                }\r\n                \r\n                // Get item total (amount without tax)\r\n                if (invoice.items && invoice.items.length > 0) {\r\n                    item_total = invoice.items[0].amount || 0;\r\n                }\r\n                \r\n                callback({\r\n                    tax_ratio: tax_ratio,\r\n                    item_total: item_total,\r\n                    invoice: invoice\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction calculate_totals(frm) {\r\n    let total_payment = 0;\r\n    let total_taxes = 0;\r\n    let total_claimed = 0;\r\n\r\n    // Calculate totals from child table\r\n    if (frm.doc.outsource_services_payment) {\r\n        frm.doc.outsource_services_payment.forEach(function(row) {\r\n            total_payment += parseFloat(row.payment_amount || 0);\r\n            total_taxes += parseFloat(row.payment_tax || 0);\r\n        });\r\n    }\r\n\r\n    total_claimed = total_payment + total_taxes;\r\n\r\n    // Update totals in the form\r\n    frm.set_value('total_payment', total_payment);\r\n    frm.set_value('total_taxes', total_taxes);\r\n    frm.set_value('total_claimed', total_claimed);\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Project Services Adjustment",
  "enabled": 1,
  "modified": "2025-08-31 13:28:10.331647",
  "module": "Orbit",
  "name": "Popup for adjustment",
  "script": "frappe.ui.form.on('Project Services Adjustment', {\r\n    onload: function(frm) {\r\n        if (frm.is_new()) {\r\n            // Show popup when creating new record\r\n            show_adjustment_popup(frm);\r\n        }\r\n    }\r\n});\r\n\r\nfunction show_adjustment_popup(frm) {\r\n    let dialog = new frappe.ui.Dialog({\r\n        title: 'Select Project and Invoices for Adjustment',\r\n        fields: [\r\n            {\r\n                label: 'Project Agreement',\r\n                fieldname: 'project_agreement',\r\n                fieldtype: 'Link',\r\n                options: 'Project Agreement',\r\n                reqd: 1,\r\n                change: function() {\r\n                    let project_agreement = dialog.get_value('project_agreement');\r\n                    if (project_agreement) {\r\n                        // Clear existing data\r\n                        dialog.set_value('customer', '');\r\n                        dialog.set_value('project_name', '');\r\n                        dialog.set_value('gov_fees_balance', 0);\r\n                        dialog.set_value('trust_fees_balance', 0);\r\n                        dialog.fields_dict.invoices_html.$wrapper.html('<p>Loading...</p>');\r\n\r\n                        // Fetch project details\r\n                        frappe.db.get_doc('Project Agreement', project_agreement).then(function(project_doc) {\r\n                            console.log('Project Agreement Data:', project_doc);\r\n                            dialog.set_value('customer', project_doc.customer);\r\n                            dialog.set_value('project_name', project_doc.project_name);\r\n                            dialog.set_value('gov_fees_balance', project_doc.advance_balance || 0);\r\n                            dialog.set_value('trust_fees_balance', project_doc.trust_fees_balance || 0);\r\n\r\n                            // Load invoices for this customer and project\r\n                            load_invoices_for_adjustment(dialog, project_doc.customer, project_agreement);\r\n                        }).catch(function(error) {\r\n                            console.error('Error fetching project agreement:', error);\r\n                            frappe.msgprint('Error fetching project details: ' + error.message);\r\n                            dialog.fields_dict.invoices_html.$wrapper.html('<p style=\"color: red;\">Error loading project details.</p>');\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                label: 'Customer',\r\n                fieldname: 'customer',\r\n                fieldtype: 'Link',\r\n                options: 'Customer',\r\n                read_only: 1\r\n            },\r\n            {\r\n                label: 'Project Name',\r\n                fieldname: 'project_name',\r\n                fieldtype: 'Data',\r\n                read_only: 1\r\n            },\r\n            {\r\n                label: 'Gov. Fees Balance',\r\n                fieldname: 'gov_fees_balance',\r\n                fieldtype: 'Currency',\r\n                read_only: 1\r\n            },\r\n            {\r\n                label: 'Trust Fees Balance',\r\n                fieldname: 'trust_fees_balance',\r\n                fieldtype: 'Currency',\r\n                read_only: 1\r\n            },\r\n            {\r\n                label: 'Invoice Selection',\r\n                fieldname: 'invoice_section',\r\n                fieldtype: 'Section Break'\r\n            },\r\n            {\r\n                label: 'Available Invoices',\r\n                fieldname: 'invoices_html',\r\n                fieldtype: 'HTML'\r\n            },\r\n            {\r\n                label: 'Return Options',\r\n                fieldname: 'return_section',\r\n                fieldtype: 'Section Break'\r\n            },\r\n            {\r\n                label: 'Return Gov. Fees?',\r\n                fieldname: 'return_gov_fees',\r\n                fieldtype: 'Check',\r\n                change: function() {\r\n                    let return_gov = dialog.get_value('return_gov_fees');\r\n                    toggle_gov_fees_return(dialog, return_gov);\r\n                }\r\n            },\r\n            {\r\n                label: 'Return Trust Fees?',\r\n                fieldname: 'return_trust_fees',\r\n                fieldtype: 'Check',\r\n                change: function() {\r\n                    let return_trust = dialog.get_value('return_trust_fees');\r\n                    toggle_trust_fees_return(dialog, return_trust);\r\n                }\r\n            },\r\n        ],\r\n        size: 'extra-large',\r\n        primary_action_label: 'Create Adjustment',\r\n        primary_action: function(values) {\r\n            process_adjustment_data(frm, dialog, values);\r\n        }\r\n    });\r\n\r\n    dialog.show();\r\n\r\n    // Initialize return sections as hidden\r\n    toggle_gov_fees_return(dialog, false);\r\n    toggle_trust_fees_return(dialog, false);\r\n\r\n    // Set dialog width to screen width for better clarity\r\n    dialog.$wrapper.find('.modal-dialog').css({\r\n        'max-width': '95vw',\r\n        'width': '95vw'\r\n    });\r\n}\r\n\r\nfunction load_invoices_for_adjustment(dialog, customer, project_agreement) {\r\n    console.log('Loading invoices for:', { customer, project_agreement });\r\n\r\n    // First, let's check if there are any sales invoices for this customer at all\r\n    frappe.db.get_list('Sales Invoice', {\r\n        filters: {\r\n            'customer': customer,\r\n            'docstatus': 1\r\n        },\r\n        fields: ['name', 'customer', 'grand_total', 'outstanding_amount'],\r\n        limit: 10\r\n    }).then(function(all_invoices) {\r\n        console.log('All invoices for customer:', all_invoices);\r\n    }).catch(function(error) {\r\n        console.error('Error checking customer invoices:', error);\r\n    });\r\n\r\n    // Try multiple possible field names for project agreement\r\n    let possible_filters = [\r\n        {\r\n            'custom_project_agreement': project_agreement,\r\n            'customer': customer,\r\n            'outstanding_amount': ['>', 0],\r\n            'docstatus': 1\r\n        },\r\n        {\r\n            'project_agreement': project_agreement,\r\n            'customer': customer,\r\n            'outstanding_amount': ['>', 0],\r\n            'docstatus': 1\r\n        },\r\n        {\r\n            'custom_project': project_agreement,\r\n            'customer': customer,\r\n            'outstanding_amount': ['>', 0],\r\n            'docstatus': 1\r\n        }\r\n    ];\r\n\r\n    async function tryFilters(filterIndex = 0) {\r\n        if (filterIndex >= possible_filters.length) {\r\n            console.log('No invoices found with any filter combination');\r\n            dialog.fields_dict.invoices_html.$wrapper.html('<div style=\"padding: 20px; text-align: center; color: #6c757d;\"><i class=\"fa fa-info-circle\" style=\"font-size: 24px; margin-bottom: 10px;\"></i><br/>No outstanding invoices found for this project agreement.</div>');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const invoices = await frappe.db.get_list('Sales Invoice', {\r\n                filters: possible_filters[filterIndex],\r\n                fields: ['name', 'customer', 'grand_total', 'outstanding_amount', 'total_taxes_and_charges']\r\n            });\r\n\r\n            console.log(`Filter ${filterIndex} result:`, invoices);\r\n\r\n            if (invoices && invoices.length > 0) {\r\n                console.log('Invoices found with filter', filterIndex, ':', invoices);\r\n                render_invoice_selection_table(dialog, invoices);\r\n            } else {\r\n                // Try next filter\r\n                tryFilters(filterIndex + 1);\r\n            }\r\n        } catch (error) {\r\n            console.error(`Error with filter ${filterIndex}:`, error);\r\n            // Try next filter\r\n            tryFilters(filterIndex + 1);\r\n        }\r\n    }\r\n\r\n    // Start trying filters\r\n    tryFilters();\r\n}\r\n\r\nfunction render_invoice_selection_table(dialog, invoices) {\r\n    let html = `\r\n        <div style=\"overflow-x: auto; margin-top: 15px;\">\r\n            <table class=\"table table-bordered table-hover\" style=\"min-width: 1600px; font-size: 12px;\">\r\n                <thead class=\"thead-dark\">\r\n                    <tr style=\"background-color: #343a40; color: white;\">\r\n                        <th style=\"min-width: 60px; text-align: center; font-size: 12px; font-weight: bold;\">Select</th>\r\n                        <th style=\"min-width: 120px; text-align: center; font-size: 12px; font-weight: bold;\">Invoice</th>\r\n                        <th style=\"min-width: 120px; text-align: center; font-size: 12px; font-weight: bold;\">Item Code</th>\r\n                        <th style=\"min-width: 90px; text-align: center; font-size: 12px; font-weight: bold;\">Item Total</th>\r\n                        <th style=\"min-width: 80px; text-align: center; font-size: 12px; font-weight: bold;\">Tax Amount</th>\r\n                        <th style=\"min-width: 60px; text-align: center; font-size: 12px; font-weight: bold;\">Tax %</th>\r\n                        <th style=\"min-width: 90px; text-align: center; font-size: 12px; font-weight: bold;\">Outstanding</th>\r\n                        <th style=\"min-width: 120px; text-align: center; font-size: 12px; font-weight: bold;\">Action</th>\r\n                        <th style=\"min-width: 100px; text-align: center; font-size: 12px; font-weight: bold;\">Amount</th>\r\n                        <th colspan=\"4\" style=\"text-align: center; font-size: 12px; font-weight: bold; background-color: #28a745;\">Adjustment Summary</th>\r\n                        <th style=\"min-width: 180px; text-align: center; font-size: 12px; font-weight: bold;\">Remarks</th>\r\n                    </tr>\r\n                    <tr style=\"background-color: #495057; color: white;\">\r\n                        <th colspan=\"9\"></th>\r\n                        <th style=\"min-width: 90px; text-align: center; font-size: 11px;\">Outstanding Amount</th>\r\n                        <th style=\"min-width: 90px; text-align: center; font-size: 11px;\">Outstanding Tax</th>\r\n                        <th style=\"min-width: 90px; text-align: center; font-size: 11px;\">Paid Amount</th>\r\n                        <th style=\"min-width: 90px; text-align: center; font-size: 11px;\">Paid Tax</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n    `;\r\n\r\n    let processed_count = 0;\r\n    \r\n    invoices.forEach(function(invoice, index) {\r\n        // Get full invoice details including item information\r\n        get_invoice_details_for_adjustment(invoice.name, function(invoice_details) {\r\n            if (!invoice_details) {\r\n                console.error('Failed to get invoice details for:', invoice.name);\r\n                processed_count++;\r\n                if (processed_count === invoices.length) {\r\n                    html += '</tbody></table></div>';\r\n                    dialog.fields_dict.invoices_html.$wrapper.html(html);\r\n                    add_adjustment_listeners(dialog);\r\n                }\r\n                return;\r\n            }\r\n\r\n            let tax_ratio = invoice_details.tax_ratio || 0;\r\n            let item_code = invoice_details.item_code || '';\r\n            let item_total = invoice_details.item_total || 0;\r\n            let total_tax_amount = invoice.total_taxes_and_charges || 0;\r\n            let paid_total = invoice.grand_total - invoice.outstanding_amount;\r\n            \r\n            // Calculate paid amounts properly based on tax ratio\r\n            let paid_amount = paid_total / (1 + tax_ratio / 100); // Net paid amount\r\n            let paid_tax = paid_total - paid_amount; // Tax portion of paid amount\r\n\r\n            html += `\r\n                <tr data-invoice=\"${invoice.name}\" data-index=\"${index}\" style=\"border-bottom: 2px solid #dee2e6;\">\r\n                    <td style=\"text-align: center; padding: 8px; vertical-align: middle;\">\r\n                        <input type=\"checkbox\" class=\"invoice-select\" data-invoice=\"${invoice.name}\" style=\"transform: scale(1.2);\">\r\n                    </td>\r\n                    <td style=\"font-size: 11px; padding: 8px; text-align: center; vertical-align: middle;\">\r\n                        <div style=\"font-weight: bold; color: #007bff;\">${invoice.name}</div>\r\n                    </td>\r\n                    <td style=\"font-weight: 500; padding: 8px; text-align: center; font-size: 11px; vertical-align: middle;\">\r\n                        <span class=\"badge badge-secondary\">${item_code}</span>\r\n                    </td>\r\n                    <td style=\"text-align: center; padding: 8px; font-size: 11px; vertical-align: middle;\">\r\n                        <strong>${format_currency_compact(item_total)}</strong>\r\n                    </td>\r\n                    <td style=\"text-align: center; padding: 8px; font-size: 11px; vertical-align: middle;\">\r\n                        <span style=\"color: #dc3545;\">${format_currency_compact(total_tax_amount)}</span>\r\n                    </td>\r\n                    <td style=\"text-align: center; padding: 8px; vertical-align: middle;\">\r\n                        <span class=\"badge badge-info\" style=\"font-size: 10px;\">${tax_ratio}%</span>\r\n                    </td>\r\n                    <td style=\"text-align: center; padding: 8px; font-size: 11px; vertical-align: middle;\">\r\n                        <strong style=\"color: #fd7e14;\">${format_currency_compact(invoice.outstanding_amount)}</strong>\r\n                    </td>\r\n                    <td style=\"padding: 6px; text-align: center; vertical-align: middle;\">\r\n                        <select class=\"form-control action-select\" \r\n                                data-invoice=\"${invoice.name}\" \r\n                                data-outstanding=\"${invoice.outstanding_amount}\" \r\n                                data-item-total=\"${item_total}\" \r\n                                data-tax-amount=\"${total_tax_amount}\" \r\n                                data-paid-total=\"${paid_total}\" \r\n                                data-paid-amount=\"${paid_amount}\" \r\n                                data-paid-tax=\"${paid_tax}\" \r\n                                data-tax-ratio=\"${tax_ratio}\" \r\n                                style=\"font-size: 11px; height: 32px;\" \r\n                                disabled>\r\n                            <option value=\"\">Select Action</option>\r\n                            <option value=\"Discount\">Discount</option>\r\n                            <option value=\"Cancel Due\">Cancel Due</option>\r\n                            <option value=\"Return All Without Taxes\">Return All Without Taxes</option>\r\n                        </select>\r\n                    </td>\r\n                    <td style=\"padding: 6px; text-align: center; vertical-align: middle;\">\r\n                        <input type=\"number\" class=\"form-control adjustment-amount\" \r\n                               data-invoice=\"${invoice.name}\" \r\n                               step=\"0.01\" min=\"0\" \r\n                               style=\"width: 90px; font-size: 11px; padding: 4px; text-align: center; height: 32px;\" \r\n                               placeholder=\"0.00\" \r\n                               disabled>\r\n                    </td>\r\n                    <td style=\"padding: 6px; text-align: center; vertical-align: middle;\">\r\n                        <div class=\"adjustment-summary-cell\" data-invoice=\"${invoice.name}\">\r\n                            <span class=\"outstanding-amount-display\" style=\"font-weight: bold; color: #dc3545;\">0.00</span>\r\n                        </div>\r\n                    </td>\r\n                    <td style=\"padding: 6px; text-align: center; vertical-align: middle;\">\r\n                        <div class=\"adjustment-summary-cell\" data-invoice=\"${invoice.name}\">\r\n                            <span class=\"outstanding-tax-display\" style=\"font-weight: bold; color: #dc3545;\">0.00</span>\r\n                        </div>\r\n                    </td>\r\n                    <td style=\"padding: 6px; text-align: center; vertical-align: middle;\">\r\n                        <div class=\"adjustment-summary-cell\" data-invoice=\"${invoice.name}\">\r\n                            <span class=\"paid-amount-display\" style=\"font-weight: bold; color: #28a745;\">${format_currency_compact(paid_amount)}</span>\r\n                        </div>\r\n                    </td>\r\n                    <td style=\"padding: 6px; text-align: center; vertical-align: middle;\">\r\n                        <div class=\"adjustment-summary-cell\" data-invoice=\"${invoice.name}\">\r\n                            <span class=\"paid-tax-display\" style=\"font-weight: bold; color: #28a745;\">${format_currency_compact(paid_tax)}</span>\r\n                        </div>\r\n                    </td>\r\n                    <td style=\"padding: 6px; text-align: center; vertical-align: middle;\">\r\n                        <textarea class=\"form-control adjustment-remark\" \r\n                                  data-invoice=\"${invoice.name}\" \r\n                                  rows=\"2\" \r\n                                  style=\"width: 170px; font-size: 11px; resize: vertical; text-align: left;\" \r\n                                  placeholder=\"Enter adjustment remarks...\"></textarea>\r\n                    </td>\r\n                </tr>\r\n            `;\r\n\r\n            processed_count++;\r\n            if (processed_count === invoices.length) {\r\n                html += '</tbody></table></div>';\r\n                dialog.fields_dict.invoices_html.$wrapper.html(html);\r\n                add_adjustment_listeners(dialog);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction get_invoice_details_for_adjustment(invoice_name, callback) {\r\n    console.log('Fetching details for invoice:', invoice_name);\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Sales Invoice',\r\n            name: invoice_name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                let invoice = r.message;\r\n                console.log('Invoice details loaded:', invoice);\r\n                \r\n                let tax_ratio = 0;\r\n                let item_code = '';\r\n                let item_total = 0;\r\n                let unearned_account = '';\r\n                let revenue_account = '';\r\n                let tax_account = '';\r\n\r\n                // Get tax ratio from taxes table\r\n                if (invoice.taxes && invoice.taxes.length > 0) {\r\n                    tax_ratio = invoice.taxes[0].rate || 0;\r\n                    tax_account = invoice.taxes[0].account_head || '';\r\n                }\r\n\r\n                // Get item details (assuming one item per invoice)\r\n                if (invoice.items && invoice.items.length > 0) {\r\n                    item_code = invoice.items[0].item_code || '';\r\n                    item_total = invoice.items[0].amount || 0;\r\n                    unearned_account = invoice.items[0].income_account || '';\r\n                    revenue_account = invoice.items[0].custom_default_earning_account || '';\r\n                }\r\n\r\n                callback({\r\n                    tax_ratio: tax_ratio,\r\n                    item_code: item_code,\r\n                    item_total: item_total,\r\n                    unearned_account: unearned_account,\r\n                    revenue_account: revenue_account,\r\n                    tax_account: tax_account,\r\n                    invoice: invoice\r\n                });\r\n            } else {\r\n                console.error('No data received for invoice:', invoice_name);\r\n                callback(null);\r\n            }\r\n        },\r\n        error: function(error) {\r\n            console.error('Error fetching invoice details:', error);\r\n            callback(null);\r\n        }\r\n    });\r\n}\r\n\r\nfunction add_adjustment_listeners(dialog) {\r\n    // Invoice selection listener - enable/disable action selection\r\n    dialog.fields_dict.invoices_html.$wrapper.find('.invoice-select').on('change', function() {\r\n        let is_checked = $(this).is(':checked');\r\n        let row = $(this).closest('tr');\r\n        let action_select = row.find('.action-select');\r\n        let amount_field = row.find('.adjustment-amount');\r\n        let invoice = $(this).data('invoice');\r\n\r\n        if (is_checked) {\r\n            action_select.prop('disabled', false);\r\n        } else {\r\n            action_select.prop('disabled', true);\r\n            action_select.val('');\r\n            amount_field.prop('disabled', true);\r\n            amount_field.val('');\r\n            // Reset the inline summary\r\n            update_inline_adjustment_summary(dialog, invoice);\r\n        }\r\n    });\r\n\r\n    // Action select change listener\r\n    dialog.fields_dict.invoices_html.$wrapper.find('.action-select').on('change', function() {\r\n        let action = $(this).val();\r\n        let invoice = $(this).data('invoice');\r\n        let outstanding = parseFloat($(this).data('outstanding')) || 0;\r\n        let item_total = parseFloat($(this).data('item-total')) || 0;\r\n        let tax_amount = parseFloat($(this).data('tax-amount')) || 0;\r\n        let paid_amount = parseFloat($(this).data('paid-amount')) || 0;\r\n        let paid_tax = parseFloat($(this).data('paid-tax')) || 0;\r\n        let tax_ratio = parseFloat($(this).data('tax-ratio')) || 0;\r\n        let amount_field = dialog.fields_dict.invoices_html.$wrapper.find(`.adjustment-amount[data-invoice=\"${invoice}\"]`);\r\n\r\n        if (action === 'Discount') {\r\n            amount_field.prop('disabled', false);\r\n            amount_field.attr('max', outstanding);\r\n            amount_field.attr('placeholder', `Max: ${format_currency_compact(outstanding)}`);\r\n        } else if (action === 'Cancel Due') {\r\n            amount_field.prop('disabled', true);\r\n            amount_field.val(outstanding);\r\n        } else if (action === 'Return All Without Taxes') {\r\n            amount_field.prop('disabled', true);\r\n            // For return all without taxes, use the full invoice amount (item total + tax)\r\n            amount_field.val(item_total + tax_amount);\r\n        } else {\r\n            amount_field.prop('disabled', true);\r\n            amount_field.val('');\r\n        }\r\n\r\n        update_inline_adjustment_summary(dialog, invoice);\r\n    });\r\n\r\n    // Amount input listener for discount validation\r\n    dialog.fields_dict.invoices_html.$wrapper.find('.adjustment-amount').on('input', function() {\r\n        let amount = parseFloat($(this).val()) || 0;\r\n        let row = $(this).closest('tr');\r\n        let action_select = row.find('.action-select');\r\n        let outstanding = parseFloat(action_select.data('outstanding')) || 0;\r\n        let invoice = $(this).data('invoice');\r\n\r\n        if (amount > outstanding) {\r\n            frappe.msgprint(`Adjustment amount cannot exceed outstanding amount of ${format_currency_compact(outstanding)}`);\r\n            $(this).val(outstanding);\r\n            amount = outstanding;\r\n        }\r\n\r\n        update_inline_adjustment_summary(dialog, invoice);\r\n    });\r\n}\r\n\r\nfunction update_inline_adjustment_summary(dialog, invoice) {\r\n    let row = dialog.fields_dict.invoices_html.$wrapper.find(`tr[data-invoice=\"${invoice}\"]`);\r\n    let is_selected = row.find('.invoice-select').is(':checked');\r\n    let action = row.find('.action-select').val();\r\n    let amount = parseFloat(row.find('.adjustment-amount').val()) || 0;\r\n    let outstanding_amount_display = row.find('.outstanding-amount-display');\r\n    let outstanding_tax_display = row.find('.outstanding-tax-display');\r\n    let paid_amount_display = row.find('.paid-amount-display');\r\n    let paid_tax_display = row.find('.paid-tax-display');\r\n\r\n    if (!is_selected || !action || amount <= 0) {\r\n        // Reset to default values\r\n        outstanding_amount_display.text('0.00').css('color', '#dc3545');\r\n        outstanding_tax_display.text('0.00').css('color', '#dc3545');\r\n        return;\r\n    }\r\n\r\n    let action_select = row.find('.action-select');\r\n    let outstanding = parseFloat(action_select.data('outstanding')) || 0;\r\n    let item_total = parseFloat(action_select.data('item-total')) || 0;\r\n    let tax_amount = parseFloat(action_select.data('tax-amount')) || 0;\r\n    let paid_amount = parseFloat(action_select.data('paid-amount')) || 0;\r\n    let paid_tax = parseFloat(action_select.data('paid-tax')) || 0;\r\n    let tax_ratio = parseFloat(action_select.data('tax-ratio')) || 0;\r\n\r\n    let outstanding_amount = 0;\r\n    let outstanding_tax = 0;\r\n\r\n    if (action === 'Discount') {\r\n        // For discount: amount is the total discount (including tax)\r\n        // Calculate the net discount amount and tax portion\r\n        let discount_net = amount / (1 + tax_ratio / 100);\r\n        let discount_tax = amount - discount_net;\r\n        outstanding_amount = discount_net;\r\n        outstanding_tax = discount_tax;\r\n    } else if (action === 'Cancel Due') {\r\n        // For cancel due: amount is the full outstanding\r\n        let outstanding_net = outstanding / (1 + tax_ratio / 100);\r\n        let outstanding_tax_calc = outstanding - outstanding_net;\r\n        outstanding_amount = outstanding_net;\r\n        outstanding_tax = outstanding_tax_calc;\r\n    } else if (action === 'Return All Without Taxes') {\r\n        // For return all without taxes: amount includes both item total and tax\r\n        outstanding_amount = item_total;\r\n        outstanding_tax = tax_amount - paid_tax; // Outstanding tax = Total tax - Paid tax\r\n    }\r\n\r\n    // Update the display with animation\r\n    outstanding_amount_display.text(format_currency_compact(outstanding_amount)).css('color', '#dc3545');\r\n    outstanding_tax_display.text(format_currency_compact(outstanding_tax)).css('color', '#dc3545');\r\n\r\n    // Add visual feedback\r\n    row.find('.adjustment-summary-cell').addClass('updated-cell');\r\n    setTimeout(function() {\r\n        row.find('.adjustment-summary-cell').removeClass('updated-cell');\r\n    }, 1000);\r\n}\r\n\r\nfunction toggle_gov_fees_return(dialog, show) {\r\n    // This function can be expanded if needed for additional gov fees return UI\r\n    if (show) {\r\n        // Show additional fields if needed\r\n    }\r\n}\r\n\r\nfunction toggle_trust_fees_return(dialog, show) {\r\n    // This function can be expanded if needed for additional trust fees return UI\r\n    if (show) {\r\n        // Show additional fields if needed\r\n    }\r\n}\r\n\r\nfunction process_adjustment_data(frm, dialog, values) {\r\n    let project_agreement = values.project_agreement;\r\n    let customer = values.customer;\r\n    let return_gov_fees = values.return_gov_fees;\r\n    let return_trust_fees = values.return_trust_fees;\r\n\r\n    // Set main form values\r\n    frm.set_value('project_agreement', project_agreement);\r\n    frm.set_value('customer', customer);\r\n    frm.set_value('return_gov_fees', return_gov_fees);\r\n    frm.set_value('return_trust_fees', return_trust_fees);\r\n\r\n    // Clear existing adjustment services\r\n    frm.clear_table('adjustment_services');\r\n\r\n    // Process selected adjustments\r\n    let selected_adjustments = [];\r\n    dialog.fields_dict.invoices_html.$wrapper.find('tbody tr').each(function() {\r\n        let row = $(this);\r\n        let is_selected = row.find('.invoice-select').is(':checked');\r\n        let action = row.find('.action-select').val();\r\n        let amount = parseFloat(row.find('.adjustment-amount').val()) || 0;\r\n        let remark = row.find('.adjustment-remark').val() || '';\r\n        let invoice = row.find('.action-select').data('invoice');\r\n\r\n        if (is_selected && action && amount > 0) {\r\n            let outstanding = parseFloat(row.find('.action-select').data('outstanding')) || 0;\r\n            let item_total = parseFloat(row.find('.action-select').data('item-total')) || 0;\r\n            let tax_amount = parseFloat(row.find('.action-select').data('tax-amount')) || 0;\r\n            let paid_amount = parseFloat(row.find('.action-select').data('paid-amount')) || 0;\r\n            let paid_tax = parseFloat(row.find('.action-select').data('paid-tax')) || 0;\r\n            let tax_ratio = parseFloat(row.find('.action-select').data('tax-ratio')) || 0;\r\n\r\n            selected_adjustments.push({\r\n                invoice: invoice,\r\n                action: action,\r\n                amount: amount,\r\n                remark: remark,\r\n                outstanding: outstanding,\r\n                item_total: item_total,\r\n                tax_amount: tax_amount,\r\n                paid_amount: paid_amount,\r\n                paid_tax: paid_tax,\r\n                tax_ratio: tax_ratio\r\n            });\r\n        }\r\n    });\r\n\r\n    // Add adjustment services to child table with proper account details\r\n    let promises = selected_adjustments.map(function(adj) {\r\n        return new Promise(function(resolve) {\r\n            get_full_invoice_details_for_adjustment(adj.invoice, function(invoice_data) {\r\n                let child_row = frm.add_child('adjustment_services');\r\n                child_row.invoice = adj.invoice;\r\n                child_row.item = invoice_data.item_code;\r\n                child_row.transaction_type = adj.action;\r\n                child_row.remark = adj.remark;\r\n                child_row.project_agreement_reference = project_agreement;\r\n                child_row.unearned_account = invoice_data.unearned_account;\r\n                child_row.revenue_account = invoice_data.revenue_account;\r\n                child_row.tax_account = invoice_data.tax_account;\r\n                child_row.outstanding = adj.outstanding;\r\n\r\n                // Calculate amounts based on action type\r\n                if (adj.action === 'Discount') {\r\n                    // For discount: amount is the total discount (including tax)\r\n                    let discount_net = adj.amount / (1 + adj.tax_ratio / 100);\r\n                    let discount_tax = adj.amount - discount_net;\r\n                    child_row.total = adj.item_total;\r\n                    child_row.total_taxes = adj.tax_amount;\r\n                    child_row.tax_ratio = adj.tax_ratio;\r\n                    child_row.discount_amount = adj.amount;\r\n                    child_row.outstanding_amount = discount_net;\r\n                    child_row.outstanding_tax = discount_tax;\r\n                    child_row.paid_amount = adj.paid_amount;\r\n                    child_row.paid_tax = adj.paid_tax;\r\n                } else if (adj.action === 'Cancel Due') {\r\n                    // For cancel due: amount is the full outstanding\r\n                    let outstanding_net = adj.outstanding / (1 + adj.tax_ratio / 100);\r\n                    let outstanding_tax_calc = adj.outstanding - outstanding_net;\r\n                    child_row.total = adj.item_total;\r\n                    child_row.total_taxes = adj.tax_amount;\r\n                    child_row.tax_ratio = adj.tax_ratio;\r\n                    child_row.outstanding_amount = outstanding_net;\r\n                    child_row.outstanding_tax = outstanding_tax_calc;\r\n                    child_row.paid_amount = adj.paid_amount;\r\n                    child_row.paid_tax = adj.paid_tax;\r\n                } else if (adj.action === 'Return All Without Taxes') {\r\n                    // For return all without taxes: amount includes both item total and tax\r\n                    child_row.total = adj.item_total;\r\n                    child_row.total_taxes = adj.tax_amount;\r\n                    child_row.tax_ratio = adj.tax_ratio;\r\n                    child_row.outstanding_amount = adj.item_total;\r\n                    child_row.outstanding_tax = adj.tax_amount - adj.paid_tax; // Outstanding tax = Total tax - Paid tax\r\n                    child_row.paid_amount = adj.paid_amount;\r\n                    child_row.paid_tax = adj.paid_tax;\r\n                }\r\n\r\n                resolve();\r\n            });\r\n        });\r\n    });\r\n\r\n    // Wait for all invoice processing to complete\r\n    Promise.all(promises).then(() => {\r\n        // Refresh the form\r\n        frm.refresh_field('adjustment_services');\r\n        dialog.hide();\r\n        frappe.msgprint(`Adjustment details have been populated successfully. ${selected_adjustments.length} adjustments added.`);\r\n    });\r\n}\r\n\r\nfunction get_full_invoice_details_for_adjustment(invoice_name, callback) {\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Sales Invoice',\r\n            name: invoice_name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                let invoice = r.message;\r\n                let tax_ratio = 0;\r\n                let item_code = '';\r\n                let item_total = 0;\r\n                let unearned_account = '';\r\n                let revenue_account = '';\r\n                let tax_account = '';\r\n\r\n                // Get tax ratio from taxes table\r\n                if (invoice.taxes && invoice.taxes.length > 0) {\r\n                    tax_ratio = invoice.taxes[0].rate || 0;\r\n                    tax_account = invoice.taxes[0].account_head || '';\r\n                }\r\n\r\n                // Get item details (assuming one item per invoice)\r\n                if (invoice.items && invoice.items.length > 0) {\r\n                    item_code = invoice.items[0].item_code || '';\r\n                    item_total = invoice.items[0].amount || 0;\r\n                    unearned_account = invoice.items[0].income_account || '';\r\n                    revenue_account = invoice.items[0].custom_default_earning_account || '';\r\n                }\r\n\r\n                callback({\r\n                    tax_ratio: tax_ratio,\r\n                    item_code: item_code,\r\n                    item_total: item_total,\r\n                    unearned_account: unearned_account,\r\n                    revenue_account: revenue_account,\r\n                    tax_account: tax_account,\r\n                    invoice: invoice\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction format_currency_compact(amount) {\r\n    if (!amount) return '0.00';\r\n    return parseFloat(amount).toLocaleString('en-US', {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2\r\n    });\r\n}\r\n\r\n// Add CSS for visual feedback\r\nif (!document.getElementById('adjustment-popup-styles')) {\r\n    let style = document.createElement('style');\r\n    style.id = 'adjustment-popup-styles';\r\n    style.textContent = `\r\n        .updated-cell {\r\n            background-color: #d4edda !important;\r\n            transition: background-color 0.3s ease;\r\n        }\r\n        .adjustment-summary-cell {\r\n            border-left: 2px solid #28a745;\r\n            background-color: #f8f9fa;\r\n        }\r\n        .table-hover tbody tr:hover .adjustment-summary-cell {\r\n            background-color: #e9ecef;\r\n        }\r\n        .invoice-select:checked {\r\n            transform: scale(1.2);\r\n            accent-color: #28a745;\r\n        }\r\n        .badge {\r\n            font-size: 0.75em;\r\n        }\r\n    `;\r\n    document.head.appendChild(style);\r\n}",
  "view": "Form"
 }
]