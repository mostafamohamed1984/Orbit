[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-31 13:26:47.687043",
  "module": "Orbit",
  "name": "create invoice on submit",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Project Agreement",
  "script": "# Project Agreement Server Script - Proper Sales Invoice Setup\r\n# Script Type: DocType Event\r\n# Reference Document Type: Project Agreement\r\n# DocType Event: on_submit\r\n\r\n# Get company - prioritize user's default company or Project Agreement company\r\ndefault_company = None\r\n\r\n# Method 1: Check if Project Agreement has a company field\r\ntry:\r\n    if doc.company:\r\n        default_company = doc.company\r\nexcept:\r\n    pass\r\n\r\n# Method 2: Try user's default company\r\nif not default_company:\r\n    try:\r\n        user_defaults = frappe.db.get_value(\"User Permission\",\r\n            {\"user\": frappe.session.user, \"allow\": \"Company\"},\r\n            \"for_value\")\r\n        if user_defaults:\r\n            default_company = user_defaults\r\n    except:\r\n        pass\r\n\r\n# Method 3: Try global default company\r\nif not default_company:\r\n    try:\r\n        default_company = frappe.db.get_single_value(\"Global Defaults\", \"default_company\")\r\n    except:\r\n        pass\r\n\r\n# Method 4: Look for \"Orbit\" company specifically\r\nif not default_company:\r\n    try:\r\n        orbit_company = frappe.db.get_value(\"Company\", {\"name\": \"Orbit\"}, \"name\")\r\n        if orbit_company:\r\n            default_company = orbit_company\r\n    except:\r\n        pass\r\n\r\n# Method 5: Fallback to any company\r\nif not default_company:\r\n    try:\r\n        companies = frappe.get_all(\"Company\", limit=1)\r\n        if companies:\r\n            default_company = companies[0].name\r\n    except:\r\n        pass\r\n\r\nif not default_company:\r\n    frappe.throw(\"No company found. Please create a company first.\")\r\n\r\n# Log which company is being used for debugging\r\nfrappe.log_error(f\"Using company: {default_company} for Project Agreement: {doc.name}\", \"Debug: Company Selection\")\r\n\r\n# Process services that are not invoiced\r\ninvoices_created = []\r\n\r\nfor service_row in doc.project_services:\r\n    if not service_row.invoiced:\r\n        # Create Sales Invoice\r\n        sales_invoice = frappe.new_doc(\"Sales Invoice\")\r\n        \r\n        # Set customer first\r\n        sales_invoice.customer = doc.customer\r\n        sales_invoice.company = default_company\r\n        sales_invoice.custom_project_agreement = doc.name\r\n        \r\n        # Set posting date and time\r\n        sales_invoice.posting_date = service_row.invoice_date\r\n        sales_invoice.set_posting_time = 1\r\n        \r\n        # Get customer details for setting defaults\r\n        customer_doc = frappe.get_doc(\"Customer\", doc.customer)\r\n        company_doc = frappe.get_doc(\"Company\", default_company)\r\n\r\n        # Set currency and price list from customer or company\r\n        try:\r\n            customer_currency = customer_doc.default_currency\r\n            if customer_currency:\r\n                sales_invoice.currency = customer_currency\r\n                sales_invoice.price_list_currency = customer_currency\r\n            else:\r\n                # Fallback to company currency\r\n                sales_invoice.currency = company_doc.default_currency\r\n                sales_invoice.price_list_currency = company_doc.default_currency\r\n        except:\r\n            # Fallback to company currency\r\n            sales_invoice.currency = company_doc.default_currency\r\n            sales_invoice.price_list_currency = company_doc.default_currency\r\n\r\n        try:\r\n            customer_price_list = customer_doc.default_price_list\r\n            if customer_price_list:\r\n                sales_invoice.selling_price_list = customer_price_list\r\n        except:\r\n            pass\r\n\r\n        # Set other customer defaults\r\n        try:\r\n            # Set payment terms if customer has default payment terms\r\n            if customer_doc.payment_terms:\r\n                sales_invoice.payment_terms_template = customer_doc.payment_terms\r\n        except:\r\n            pass\r\n\r\n        try:\r\n            # Set customer group\r\n            if customer_doc.customer_group:\r\n                sales_invoice.customer_group = customer_doc.customer_group\r\n        except:\r\n            pass\r\n\r\n        try:\r\n            # Set territory\r\n            if customer_doc.territory:\r\n                sales_invoice.territory = customer_doc.territory\r\n        except:\r\n            pass\r\n\r\n        # Override currency if Project Agreement has specific currency\r\n        if doc.currency:\r\n            sales_invoice.currency = doc.currency\r\n            sales_invoice.price_list_currency = doc.currency\r\n            # Set conversion rate to 1 if same currency\r\n            company_currency = frappe.db.get_value(\"Company\", default_company, \"default_currency\")\r\n            if doc.currency == company_currency:\r\n                sales_invoice.conversion_rate = 1\r\n\r\n        # Set customer receivable account (debit_to) - CRITICAL for currency validation\r\n        customer_receivable_account = None\r\n\r\n        # Method 1: Try customer's specific receivable account for this company\r\n        try:\r\n            customer_receivable_account = frappe.db.get_value(\"Party Account\",\r\n                {\"parent\": doc.customer, \"parenttype\": \"Customer\", \"company\": default_company},\r\n                \"account\")\r\n        except:\r\n            pass\r\n\r\n        # Method 2: Try company's default receivable account\r\n        if not customer_receivable_account:\r\n            try:\r\n                customer_receivable_account = frappe.db.get_value(\"Company\", default_company, \"default_receivable_account\")\r\n            except:\r\n                pass\r\n\r\n        # Method 3: Find any receivable account for this company\r\n        if not customer_receivable_account:\r\n            try:\r\n                customer_receivable_account = frappe.db.get_value(\"Account\",\r\n                    {\"company\": default_company, \"account_type\": \"Receivable\", \"is_group\": 0},\r\n                    \"name\")\r\n            except:\r\n                pass\r\n\r\n        # Method 4: Last resort - find any account with \"Debtors\" or \"Receivable\" in name\r\n        if not customer_receivable_account:\r\n            try:\r\n                accounts = frappe.db.sql(\"\"\"\r\n                    SELECT name FROM `tabAccount`\r\n                    WHERE company = %s AND is_group = 0\r\n                    AND (name LIKE '%%Debtors%%' OR name LIKE '%%Receivable%%' OR name LIKE '%%Customer%%')\r\n                    LIMIT 1\r\n                \"\"\", (default_company,))\r\n                if accounts:\r\n                    customer_receivable_account = accounts[0][0]\r\n            except:\r\n                pass\r\n\r\n        # Set the account or throw error if none found\r\n        if customer_receivable_account:\r\n            sales_invoice.debit_to = customer_receivable_account\r\n        else:\r\n            # Count available receivable accounts for debugging\r\n            receivable_count = frappe.db.count(\"Account\",\r\n                {\"company\": default_company, \"account_type\": \"Receivable\", \"is_group\": 0})\r\n            frappe.throw(f\"No receivable account found for company {default_company}. Found {receivable_count} receivable accounts. Please check customer setup or create receivable accounts.\")\r\n\r\n        # Set essential fields to prevent errors\r\n        sales_invoice.ignore_pricing_rule = 1\r\n        sales_invoice.conversion_rate = sales_invoice.conversion_rate or 1.0\r\n        sales_invoice.plc_conversion_rate = sales_invoice.plc_conversion_rate or 1.0\r\n\r\n        # Add item\r\n        item_row = sales_invoice.append(\"items\", {})\r\n        item_row.item_code = service_row.item\r\n        item_row.qty = 1\r\n        item_row.rate = service_row.amount\r\n        item_row.uom = \"Nos\"\r\n        \r\n        # Set remarks\r\n        if service_row.remark:\r\n            sales_invoice.remarks = service_row.remark\r\n        \r\n        # Apply tax template if provided\r\n        if service_row.tax_template:\r\n            try:\r\n                tax_template = frappe.get_doc(\"Sales Taxes and Charges Template\", service_row.tax_template)\r\n\r\n                # Check if tax template belongs to the correct company\r\n                template_company = tax_template.company\r\n                if template_company and template_company != default_company:\r\n                    frappe.log_error(f\"Tax template {service_row.tax_template} belongs to company {template_company} but invoice is for company {default_company}\")\r\n                    frappe.msgprint(f\"Warning: Tax template {service_row.tax_template} belongs to different company. Skipping taxes.\")\r\n                else:\r\n                    sales_invoice.taxes_and_charges = service_row.tax_template\r\n                    # Validate each tax account belongs to the correct company\r\n                    valid_taxes = []\r\n                    for tax in tax_template.taxes:\r\n                        try:\r\n                            # Check if account belongs to the correct company\r\n                            account_company = frappe.db.get_value(\"Account\", tax.account_head, \"company\")\r\n                            if account_company == default_company:\r\n                                valid_taxes.append({\r\n                                    \"charge_type\": tax.charge_type,\r\n                                    \"account_head\": tax.account_head,\r\n                                    \"description\": tax.description,\r\n                                    \"rate\": tax.rate,\r\n                                    \"tax_amount\": tax.tax_amount if tax.charge_type == \"Actual\" else 0\r\n                                })\r\n                            else:\r\n                                frappe.log_error(f\"Account {tax.account_head} belongs to company {account_company}, expected {default_company}\")\r\n                        except:\r\n                            # Skip invalid accounts\r\n                            pass\r\n\r\n                    # Add only valid taxes\r\n                    for tax_data in valid_taxes:\r\n                        sales_invoice.append(\"taxes\", tax_data)\r\n\r\n            except Exception as e:\r\n                frappe.log_error(f\"Error applying tax template: {str(e)}\")\r\n                frappe.msgprint(f\"Warning: Could not apply tax template {service_row.tax_template}. Invoice created without taxes.\")\r\n\r\n        # Final validation before saving\r\n        if not sales_invoice.debit_to:\r\n            frappe.throw(f\"Debit To account is required but not set for Sales Invoice. Customer: {doc.customer}, Company: {default_company}\")\r\n\r\n        # Set missing values and save\r\n        sales_invoice.run_method(\"set_missing_values\")\r\n        sales_invoice.save()\r\n        sales_invoice.submit()\r\n        \r\n        # Calculate total taxes from the created invoice\r\n        total_tax_amount = 0\r\n        if sales_invoice.taxes:\r\n            for tax_row in sales_invoice.taxes:\r\n                total_tax_amount = total_tax_amount + (tax_row.tax_amount or 0)\r\n        \r\n        # Update service row\r\n        service_row.invoiced = 1\r\n        service_row.reference_invoice = sales_invoice.name\r\n        service_row.tax_amount = total_tax_amount\r\n        \r\n        invoices_created.append(sales_invoice.name)\r\n\r\n# Save document to update service rows\r\nif invoices_created:\r\n    doc.save()\r\n    invoice_count = len(invoices_created)\r\n    frappe.msgprint(f\"Successfully created {invoice_count} Sales Invoice(s)\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save (Submitted Document)",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-31 13:26:47.899016",
  "module": "Orbit",
  "name": "create invoice after save if submitted",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Project Agreement",
  "script": "# Project Agreement Server Script - Proper Sales Invoice Setup\r\n# Script Type: DocType Event\r\n# Reference Document Type: Project Agreement\r\n# DocType Event: on_submit\r\n\r\n# Get company - prioritize user's default company or Project Agreement company\r\ndefault_company = None\r\n\r\n# Method 1: Check if Project Agreement has a company field\r\ntry:\r\n    if doc.company:\r\n        default_company = doc.company\r\nexcept:\r\n    pass\r\n\r\n# Method 2: Try user's default company\r\nif not default_company:\r\n    try:\r\n        user_defaults = frappe.db.get_value(\"User Permission\",\r\n            {\"user\": frappe.session.user, \"allow\": \"Company\"},\r\n            \"for_value\")\r\n        if user_defaults:\r\n            default_company = user_defaults\r\n    except:\r\n        pass\r\n\r\n# Method 3: Try global default company\r\nif not default_company:\r\n    try:\r\n        default_company = frappe.db.get_single_value(\"Global Defaults\", \"default_company\")\r\n    except:\r\n        pass\r\n\r\n# Method 4: Look for \"Orbit\" company specifically\r\nif not default_company:\r\n    try:\r\n        orbit_company = frappe.db.get_value(\"Company\", {\"name\": \"Orbit\"}, \"name\")\r\n        if orbit_company:\r\n            default_company = orbit_company\r\n    except:\r\n        pass\r\n\r\n# Method 5: Fallback to any company\r\nif not default_company:\r\n    try:\r\n        companies = frappe.get_all(\"Company\", limit=1)\r\n        if companies:\r\n            default_company = companies[0].name\r\n    except:\r\n        pass\r\n\r\nif not default_company:\r\n    frappe.throw(\"No company found. Please create a company first.\")\r\n\r\n# Log which company is being used for debugging\r\nfrappe.log_error(f\"Using company: {default_company} for Project Agreement: {doc.name}\", \"Debug: Company Selection\")\r\n\r\n# Process services that are not invoiced\r\ninvoices_created = []\r\n\r\nfor service_row in doc.project_services:\r\n    if not service_row.invoiced:\r\n        # Create Sales Invoice\r\n        sales_invoice = frappe.new_doc(\"Sales Invoice\")\r\n        \r\n        # Set customer first\r\n        sales_invoice.customer = doc.customer\r\n        sales_invoice.company = default_company\r\n        sales_invoice.custom_project_agreement = doc.name\r\n        \r\n        # Set posting date and time\r\n        sales_invoice.posting_date = service_row.invoice_date\r\n        sales_invoice.set_posting_time = 1\r\n        \r\n        # Get customer details for setting defaults\r\n        customer_doc = frappe.get_doc(\"Customer\", doc.customer)\r\n        company_doc = frappe.get_doc(\"Company\", default_company)\r\n\r\n        # Set currency and price list from customer or company\r\n        try:\r\n            customer_currency = customer_doc.default_currency\r\n            if customer_currency:\r\n                sales_invoice.currency = customer_currency\r\n                sales_invoice.price_list_currency = customer_currency\r\n            else:\r\n                # Fallback to company currency\r\n                sales_invoice.currency = company_doc.default_currency\r\n                sales_invoice.price_list_currency = company_doc.default_currency\r\n        except:\r\n            # Fallback to company currency\r\n            sales_invoice.currency = company_doc.default_currency\r\n            sales_invoice.price_list_currency = company_doc.default_currency\r\n\r\n        try:\r\n            customer_price_list = customer_doc.default_price_list\r\n            if customer_price_list:\r\n                sales_invoice.selling_price_list = customer_price_list\r\n        except:\r\n            pass\r\n\r\n        # Set other customer defaults\r\n        try:\r\n            # Set payment terms if customer has default payment terms\r\n            if customer_doc.payment_terms:\r\n                sales_invoice.payment_terms_template = customer_doc.payment_terms\r\n        except:\r\n            pass\r\n\r\n        try:\r\n            # Set customer group\r\n            if customer_doc.customer_group:\r\n                sales_invoice.customer_group = customer_doc.customer_group\r\n        except:\r\n            pass\r\n\r\n        try:\r\n            # Set territory\r\n            if customer_doc.territory:\r\n                sales_invoice.territory = customer_doc.territory\r\n        except:\r\n            pass\r\n\r\n        # Override currency if Project Agreement has specific currency\r\n        if doc.currency:\r\n            sales_invoice.currency = doc.currency\r\n            sales_invoice.price_list_currency = doc.currency\r\n            # Set conversion rate to 1 if same currency\r\n            company_currency = frappe.db.get_value(\"Company\", default_company, \"default_currency\")\r\n            if doc.currency == company_currency:\r\n                sales_invoice.conversion_rate = 1\r\n\r\n        # Set customer receivable account (debit_to) - CRITICAL for currency validation\r\n        customer_receivable_account = None\r\n\r\n        # Method 1: Try customer's specific receivable account for this company\r\n        try:\r\n            customer_receivable_account = frappe.db.get_value(\"Party Account\",\r\n                {\"parent\": doc.customer, \"parenttype\": \"Customer\", \"company\": default_company},\r\n                \"account\")\r\n        except:\r\n            pass\r\n\r\n        # Method 2: Try company's default receivable account\r\n        if not customer_receivable_account:\r\n            try:\r\n                customer_receivable_account = frappe.db.get_value(\"Company\", default_company, \"default_receivable_account\")\r\n            except:\r\n                pass\r\n\r\n        # Method 3: Find any receivable account for this company\r\n        if not customer_receivable_account:\r\n            try:\r\n                customer_receivable_account = frappe.db.get_value(\"Account\",\r\n                    {\"company\": default_company, \"account_type\": \"Receivable\", \"is_group\": 0},\r\n                    \"name\")\r\n            except:\r\n                pass\r\n\r\n        # Method 4: Last resort - find any account with \"Debtors\" or \"Receivable\" in name\r\n        if not customer_receivable_account:\r\n            try:\r\n                accounts = frappe.db.sql(\"\"\"\r\n                    SELECT name FROM `tabAccount`\r\n                    WHERE company = %s AND is_group = 0\r\n                    AND (name LIKE '%%Debtors%%' OR name LIKE '%%Receivable%%' OR name LIKE '%%Customer%%')\r\n                    LIMIT 1\r\n                \"\"\", (default_company,))\r\n                if accounts:\r\n                    customer_receivable_account = accounts[0][0]\r\n            except:\r\n                pass\r\n\r\n        # Set the account or throw error if none found\r\n        if customer_receivable_account:\r\n            sales_invoice.debit_to = customer_receivable_account\r\n        else:\r\n            # Count available receivable accounts for debugging\r\n            receivable_count = frappe.db.count(\"Account\",\r\n                {\"company\": default_company, \"account_type\": \"Receivable\", \"is_group\": 0})\r\n            frappe.throw(f\"No receivable account found for company {default_company}. Found {receivable_count} receivable accounts. Please check customer setup or create receivable accounts.\")\r\n\r\n        # Set essential fields to prevent errors\r\n        sales_invoice.ignore_pricing_rule = 1\r\n        sales_invoice.conversion_rate = sales_invoice.conversion_rate or 1.0\r\n        sales_invoice.plc_conversion_rate = sales_invoice.plc_conversion_rate or 1.0\r\n\r\n        # Add item\r\n        item_row = sales_invoice.append(\"items\", {})\r\n        item_row.item_code = service_row.item\r\n        item_row.qty = 1\r\n        item_row.rate = service_row.amount\r\n        item_row.uom = \"Nos\"\r\n        \r\n        # Set remarks\r\n        if service_row.remark:\r\n            sales_invoice.remarks = service_row.remark\r\n        \r\n        # Apply tax template if provided\r\n        if service_row.tax_template:\r\n            try:\r\n                tax_template = frappe.get_doc(\"Sales Taxes and Charges Template\", service_row.tax_template)\r\n\r\n                # Check if tax template belongs to the correct company\r\n                template_company = tax_template.company\r\n                if template_company and template_company != default_company:\r\n                    frappe.log_error(f\"Tax template {service_row.tax_template} belongs to company {template_company} but invoice is for company {default_company}\")\r\n                    frappe.msgprint(f\"Warning: Tax template {service_row.tax_template} belongs to different company. Skipping taxes.\")\r\n                else:\r\n                    sales_invoice.taxes_and_charges = service_row.tax_template\r\n                    # Validate each tax account belongs to the correct company\r\n                    valid_taxes = []\r\n                    for tax in tax_template.taxes:\r\n                        try:\r\n                            # Check if account belongs to the correct company\r\n                            account_company = frappe.db.get_value(\"Account\", tax.account_head, \"company\")\r\n                            if account_company == default_company:\r\n                                valid_taxes.append({\r\n                                    \"charge_type\": tax.charge_type,\r\n                                    \"account_head\": tax.account_head,\r\n                                    \"description\": tax.description,\r\n                                    \"rate\": tax.rate,\r\n                                    \"tax_amount\": tax.tax_amount if tax.charge_type == \"Actual\" else 0\r\n                                })\r\n                            else:\r\n                                frappe.log_error(f\"Account {tax.account_head} belongs to company {account_company}, expected {default_company}\")\r\n                        except:\r\n                            # Skip invalid accounts\r\n                            pass\r\n\r\n                    # Add only valid taxes\r\n                    for tax_data in valid_taxes:\r\n                        sales_invoice.append(\"taxes\", tax_data)\r\n\r\n            except Exception as e:\r\n                frappe.log_error(f\"Error applying tax template: {str(e)}\")\r\n                frappe.msgprint(f\"Warning: Could not apply tax template {service_row.tax_template}. Invoice created without taxes.\")\r\n\r\n        # Final validation before saving\r\n        if not sales_invoice.debit_to:\r\n            frappe.throw(f\"Debit To account is required but not set for Sales Invoice. Customer: {doc.customer}, Company: {default_company}\")\r\n\r\n        # Set missing values and save\r\n        sales_invoice.run_method(\"set_missing_values\")\r\n        sales_invoice.save()\r\n        sales_invoice.submit()\r\n        \r\n        # Calculate total taxes from the created invoice\r\n        total_tax_amount = 0\r\n        if sales_invoice.taxes:\r\n            for tax_row in sales_invoice.taxes:\r\n                total_tax_amount = total_tax_amount + (tax_row.tax_amount or 0)\r\n        \r\n        # Update service row\r\n        service_row.invoiced = 1\r\n        service_row.reference_invoice = sales_invoice.name\r\n        service_row.tax_amount = total_tax_amount\r\n        \r\n        invoices_created.append(sales_invoice.name)\r\n\r\n# Save document to update service rows\r\nif invoices_created:\r\n    doc.save()\r\n    invoice_count = len(invoices_created)\r\n    frappe.msgprint(f\"Successfully created {invoice_count} Sales Invoice(s)\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-31 13:26:48.201043",
  "module": "Orbit",
  "name": "Journal Entry Creation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Project Payment",
  "script": "# Project Payment Server Script - Journal Entry Creation\r\n# Script Type: DocType Event\r\n# Reference Document Type: Project Payment\r\n# DocType Event: on_submit\r\n\r\n# Get company - prioritize Project Payment company with fallbacks\r\ndefault_company = None\r\n\r\n# Method 1: Check if Project Payment has a company field\r\ntry:\r\n    if doc.company:\r\n        default_company = doc.company\r\nexcept:\r\n    pass\r\n\r\n# Method 2: Try user's default company\r\nif not default_company:\r\n    try:\r\n        user_defaults = frappe.db.get_value(\"User Permission\",\r\n            {\"user\": frappe.session.user, \"allow\": \"Company\"},\r\n            \"for_value\")\r\n        if user_defaults:\r\n            default_company = user_defaults\r\n    except:\r\n        pass\r\n\r\n# Method 3: Try global default company\r\nif not default_company:\r\n    try:\r\n        default_company = frappe.db.get_single_value(\"Global Defaults\", \"default_company\")\r\n    except:\r\n        pass\r\n\r\n# Method 4: Look for \"Orbit\" company specifically\r\nif not default_company:\r\n    try:\r\n        orbit_company = frappe.db.get_value(\"Company\", {\"name\": \"Orbit\"}, \"name\")\r\n        if orbit_company:\r\n            default_company = orbit_company\r\n    except:\r\n        pass\r\n\r\n# Method 5: Fallback to any company\r\nif not default_company:\r\n    try:\r\n        companies = frappe.get_all(\"Company\", limit=1)\r\n        if companies:\r\n            default_company = companies[0].name\r\n    except:\r\n        pass\r\n\r\nif not default_company:\r\n    frappe.throw(\"No company found. Please create a company first.\")\r\n\r\n# Log which company is being used for debugging\r\nfrappe.log_error(f\"Using company: {default_company} for Project Payment: {doc.name}\", \"Debug: Project Payment Company Selection\")\r\n\r\n# Track created journal entries\r\njournal_entries_created = []\r\n\r\n# Get customer_type to determine processing logic\r\ntry:\r\n    customer_type = doc.customer_type if doc.customer_type else 'Customer'\r\nexcept:\r\n    customer_type = 'Customer'\r\n\r\n# Process Service Payment Details\r\nfor service_row in doc.service_payment_details:\r\n    try:\r\n        # Create Journal Entry for service payment\r\n        journal_entry = frappe.new_doc(\"Journal Entry\")\r\n        journal_entry.company = default_company\r\n        journal_entry.posting_date = doc.date\r\n        journal_entry.user_remark = service_row.remark or f\"Service payment for {service_row.item}\"\r\n        \r\n        # Calculate total amount\r\n        total_amount = (service_row.payment_amount or 0) + (service_row.payment_tax or 0)\r\n        payment_amount = service_row.payment_amount or 0\r\n        payment_tax = service_row.payment_tax or 0\r\n        \r\n        # 1. Party Account Credit (payment_amount + payment_tax) - linked with customer and invoice\r\n        if service_row.invoice and doc.party_account:\r\n            # Validate that the customer matches the invoice customer before adding reference\r\n            invoice_customer = None\r\n            try:\r\n                invoice_doc = frappe.get_doc(\"Sales Invoice\", service_row.invoice)\r\n                invoice_customer = invoice_doc.customer\r\n            except:\r\n                pass\r\n\r\n            party_account_row = journal_entry.append(\"accounts\", {})\r\n            party_account_row.account = doc.party_account\r\n            party_account_row.credit_in_account_currency = total_amount\r\n            party_account_row.party_type = \"Customer\"\r\n            party_account_row.party = doc.customer\r\n\r\n            # Only add invoice reference if customer matches\r\n            if invoice_customer == doc.customer:\r\n                party_account_row.reference_type = \"Sales Invoice\"\r\n                party_account_row.reference_name = service_row.invoice\r\n\r\n            party_account_row.user_remark = service_row.remark or \"Service payment\"\r\n        \r\n        # 2. Receiving Account Debit (payment_amount + payment_tax)\r\n        if doc.receiving_account:\r\n            receiving_account_row = journal_entry.append(\"accounts\", {})\r\n            receiving_account_row.account = doc.receiving_account\r\n            receiving_account_row.debit_in_account_currency = total_amount\r\n            receiving_account_row.user_remark = service_row.remark or \"Service payment received\"\r\n        \r\n        # 3. Unearned Account Debit (payment_amount)\r\n        if service_row.unearned_account and payment_amount > 0:\r\n            unearned_account_row = journal_entry.append(\"accounts\", {})\r\n            unearned_account_row.account = service_row.unearned_account\r\n            unearned_account_row.debit_in_account_currency = payment_amount\r\n            unearned_account_row.user_remark = service_row.remark or \"Unearned revenue\"\r\n        \r\n        # 4. Revenue Account Credit (payment_amount)\r\n        if service_row.revenue_account and payment_amount > 0:\r\n            revenue_account_row = journal_entry.append(\"accounts\", {})\r\n            revenue_account_row.account = service_row.revenue_account\r\n            revenue_account_row.credit_in_account_currency = payment_amount\r\n            revenue_account_row.user_remark = service_row.remark or \"Revenue recognition\"\r\n        \r\n        # 5 & 6. Tax entries (only if payment_tax > 0)\r\n        if payment_tax > 0:\r\n            # Get tax account from first row in invoice taxes\r\n            invoice_tax_account = None\r\n            if service_row.invoice:\r\n                try:\r\n                    invoice_doc = frappe.get_doc(\"Sales Invoice\", service_row.invoice)\r\n                    if invoice_doc.taxes and len(invoice_doc.taxes) > 0:\r\n                        invoice_tax_account = invoice_doc.taxes[0].account_head\r\n                except:\r\n                    pass\r\n            \r\n            # 5. Invoice Tax Account Debit (payment_tax)\r\n            if invoice_tax_account:\r\n                tax_debit_row = journal_entry.append(\"accounts\", {})\r\n                tax_debit_row.account = invoice_tax_account\r\n                tax_debit_row.debit_in_account_currency = payment_tax\r\n                tax_debit_row.user_remark = service_row.remark or \"Tax payment\"\r\n            \r\n            # 6. Tax Account Credit (payment_tax)\r\n            if doc.tax_account:\r\n                tax_credit_row = journal_entry.append(\"accounts\", {})\r\n                tax_credit_row.account = doc.tax_account\r\n                tax_credit_row.credit_in_account_currency = payment_tax\r\n                tax_credit_row.user_remark = service_row.remark or \"Tax liability\"\r\n        \r\n        # Save and submit journal entry\r\n        journal_entry.save()\r\n        journal_entry.submit()\r\n        journal_entries_created.append(journal_entry.name)\r\n\r\n        # Update Project Agreement with new payment log entry\r\n        if service_row.project_agreement_reference:\r\n            try:\r\n                project_agreement_doc = frappe.get_doc(\"Project Agreement\", service_row.project_agreement_reference)\r\n\r\n                if customer_type == 'Customer':\r\n                    # For Customer payments: Add to payment_log table\r\n                    new_payment_row = project_agreement_doc.append(\"payment_log\", {})\r\n                    new_payment_row.date = doc.date\r\n                    new_payment_row.item = service_row.item\r\n                    new_payment_row.payment_amount = service_row.payment_amount or 0\r\n                    new_payment_row.payment_tax = service_row.payment_tax or 0\r\n                    new_payment_row.transaction_type = \"Payment\"\r\n                    new_payment_row.remark = service_row.remark or f\"Service payment for {service_row.item}\"\r\n                    new_payment_row.reference = journal_entry.name\r\n\r\n                    # Recalculate total_received and received_tax from payment_log\r\n                    total_received = 0\r\n                    received_tax = 0\r\n                    cancelled_amount = 0\r\n                    cancelled_taxes = 0\r\n                    \r\n                    for payment_row in project_agreement_doc.payment_log:\r\n                        payment_amount = payment_row.payment_amount or 0\r\n                        payment_tax = payment_row.payment_tax or 0\r\n                        transaction_type = payment_row.transaction_type or \"\"\r\n                        \r\n                        if transaction_type in [\"Payment\", \"Allocation\"]:\r\n                            # Regular payments\r\n                            total_received = total_received + payment_amount\r\n                            received_tax = received_tax + payment_tax\r\n                        elif transaction_type in [\"Return\", \"Cancel Due\", \"Discount\"]:\r\n                            # Cancelled/returned amounts\r\n                            cancelled_amount = cancelled_amount + payment_amount\r\n                            cancelled_taxes = cancelled_taxes + payment_tax\r\n\r\n                    project_agreement_doc.total_received = total_received\r\n                    project_agreement_doc.received_tax = received_tax\r\n                    project_agreement_doc.cancelled_amount = cancelled_amount\r\n                    project_agreement_doc.cancelled_taxes = cancelled_taxes\r\n\r\n                    # Calculate unclaimed_amount: total_services_amount - total_received - cancelled_amount\r\n                    total_services_amount = project_agreement_doc.total_services_amount or 0\r\n                    unclaimed_amount = total_services_amount - total_received - cancelled_amount\r\n                    project_agreement_doc.unclaimed_amount = unclaimed_amount\r\n\r\n                elif customer_type == 'Contractor':\r\n                    # For Contractor payments: Add to contractors_payment_log table\r\n                    new_contractor_payment_row = project_agreement_doc.append(\"contractors_payment_log\", {})\r\n                    new_contractor_payment_row.contractor = doc.customer  # contractor field gets customer from project payment\r\n                    new_contractor_payment_row.date = doc.date\r\n                    new_contractor_payment_row.payment_amount = service_row.payment_amount or 0\r\n                    new_contractor_payment_row.payment_tax = service_row.payment_tax or 0\r\n                    new_contractor_payment_row.item = service_row.item\r\n                    new_contractor_payment_row.remark = service_row.remark or f\"Contractor payment for {service_row.item}\"\r\n                    new_contractor_payment_row.reference = journal_entry.name\r\n\r\n                    # Recalculate contractor totals\r\n                    total_received_from_contractors = 0\r\n                    total_received_taxes_from_contractors = 0\r\n                    for contractor_payment_row in project_agreement_doc.contractors_payment_log:\r\n                        payment_amount = contractor_payment_row.payment_amount or 0\r\n                        payment_tax = contractor_payment_row.payment_tax or 0\r\n                        total_received_from_contractors = total_received_from_contractors + payment_amount\r\n                        total_received_taxes_from_contractors = total_received_taxes_from_contractors + payment_tax\r\n\r\n                    project_agreement_doc.total_received_from_contractors = total_received_from_contractors\r\n                    project_agreement_doc.total_received_taxes_from_contractors = total_received_taxes_from_contractors\r\n\r\n                    # Calculate total_unclaimed_from_contractors: total_contractors_services - total_received_from_contractors - total_received_taxes_from_contractors\r\n                    total_contractors_services = project_agreement_doc.total_contractors_services or 0\r\n                    total_unclaimed_from_contractors = total_contractors_services - total_received_from_contractors - total_received_taxes_from_contractors\r\n                    project_agreement_doc.total_unclaimed_from_contractors = total_unclaimed_from_contractors\r\n\r\n                # Save project agreement (don't submit as it might already be submitted)\r\n                project_agreement_doc.save()\r\n\r\n            except Exception as e:\r\n                frappe.log_error(f\"Error updating Project Agreement: {str(e)}\", \"Project Payment Service Agreement Update Error\")\r\n                # Don't throw error here as the journal entry was created successfully\r\n\r\n    except Exception as e:\r\n        frappe.log_error(f\"Error creating journal entry for service payment: {str(e)}\", \"Project Payment Service Error\")\r\n        frappe.throw(f\"Error creating journal entry for service payment {service_row.item}: {str(e)}\")\r\n\r\n# Process Government Fees (only for Customer payments)\r\nif customer_type == 'Customer':\r\n    for gov_fee_row in doc.government_fees:\r\n        try:\r\n            # Create Journal Entry for government fee\r\n            journal_entry = frappe.new_doc(\"Journal Entry\")\r\n            journal_entry.company = default_company\r\n            journal_entry.posting_date = doc.date\r\n            journal_entry.user_remark = gov_fee_row.remark or \"Government fee payment\"\r\n\r\n            # 1. Advance Account Credit (amount) - linked with customer as advance\r\n            if doc.advance_account:\r\n                advance_account_row = journal_entry.append(\"accounts\", {})\r\n                advance_account_row.account = doc.advance_account\r\n                advance_account_row.credit_in_account_currency = gov_fee_row.amount\r\n                advance_account_row.party_type = \"Customer\"\r\n                advance_account_row.party = doc.customer\r\n                advance_account_row.is_advance = \"Yes\"\r\n                advance_account_row.user_remark = gov_fee_row.remark or \"Government fee advance\"\r\n\r\n            # 2. Receiving Account Debit (amount)\r\n            if doc.receiving_account:\r\n                receiving_account_row = journal_entry.append(\"accounts\", {})\r\n                receiving_account_row.account = doc.receiving_account\r\n                receiving_account_row.debit_in_account_currency = gov_fee_row.amount\r\n                receiving_account_row.user_remark = gov_fee_row.remark or \"Government fee received\"\r\n\r\n            # Save and submit journal entry\r\n            journal_entry.save()\r\n            journal_entry.submit()\r\n            journal_entries_created.append(journal_entry.name)\r\n\r\n            # Update government_fees row with journal entry reference in Project Payment\r\n            frappe.db.set_value(\"Government Fees Payment\", gov_fee_row.name, \"journal_entry_reference\", journal_entry.name)\r\n\r\n            # Also update the row directly in the current document\r\n            gov_fee_row.journal_entry_reference = journal_entry.name\r\n\r\n            # Update Project Agreement with new government fees row and reconcile pending expenses\r\n            if gov_fee_row.project_agreement:\r\n                try:\r\n                    project_agreement_doc = frappe.get_doc(\"Project Agreement\", gov_fee_row.project_agreement)\r\n\r\n                    # Add new row to government_fees table in project agreement\r\n                    new_gov_fee_row = project_agreement_doc.append(\"government_fees\", {})\r\n                    new_gov_fee_row.date = doc.date\r\n                    new_gov_fee_row.payment_method = doc.mode_of_payment\r\n                    new_gov_fee_row.amount = gov_fee_row.amount\r\n                    new_gov_fee_row.remark = gov_fee_row.remark\r\n                    new_gov_fee_row.journal_entry_reference = journal_entry.name\r\n\r\n                    # ========================================================\r\n                    # NEW: Reconcile pending expenses with this government fee\r\n                    # ========================================================\r\n                    if gov_fee_row.amount and gov_fee_row.amount > 0:\r\n                        # Log for debugging\r\n                        frappe.log_error(f\"Starting reconciliation for government fee amount: {gov_fee_row.amount}\", \"Pending Expenses Reconciliation Debug\")\r\n\r\n                        # Get unpaid pending expenses, ordered by idx (table order)\r\n                        pending_expenses = [row for row in project_agreement_doc.pending_expenses if not row.paid]\r\n                        pending_expenses.sort(key=lambda x: x.idx)\r\n\r\n                        frappe.log_error(f\"Found {len(pending_expenses)} unpaid pending expenses\", \"Pending Expenses Reconciliation Debug\")\r\n\r\n                        remaining_fee_amount = float(gov_fee_row.amount)\r\n\r\n                        for pending_row in pending_expenses:\r\n                            if remaining_fee_amount <= 0:\r\n                                break\r\n\r\n                            # Calculate outstanding amount for this pending expense\r\n                            pending_amount = float(pending_row.amount or 0)\r\n                            collected_amount = float(pending_row.collected_amount or 0)\r\n                            outstanding_amount = pending_amount - collected_amount\r\n\r\n                            frappe.log_error(f\"Processing pending expense: amount={pending_amount}, collected={collected_amount}, outstanding={outstanding_amount}\", \"Pending Expenses Reconciliation Debug\")\r\n\r\n                            if outstanding_amount <= 0:\r\n                                continue  # Already fully collected\r\n\r\n                            if remaining_fee_amount >= outstanding_amount:\r\n                                # Full payment for this row\r\n                                pending_row.collected_amount = pending_amount\r\n                                pending_row.paid = 1\r\n                                remaining_fee_amount = remaining_fee_amount - outstanding_amount\r\n                                frappe.log_error(f\"Fully paid pending expense. Remaining fee: {remaining_fee_amount}\", \"Pending Expenses Reconciliation Debug\")\r\n                            else:\r\n                                # Partial payment for this row\r\n                                pending_row.collected_amount = collected_amount + remaining_fee_amount\r\n                                frappe.log_error(f\"Partially paid pending expense. New collected amount: {pending_row.collected_amount}\", \"Pending Expenses Reconciliation Debug\")\r\n                                remaining_fee_amount = 0\r\n\r\n                    # Recalculate totals in Project Agreement\r\n                    # Calculate total_government_fees: sum of amount in government_fees table\r\n                    total_government_fees = 0\r\n                    for gov_fee in project_agreement_doc.government_fees:\r\n                        total_government_fees = total_government_fees + (gov_fee.amount or 0)\r\n\r\n                    project_agreement_doc.total_government_fees = total_government_fees\r\n\r\n                    # Calculate total_project_amount: total_government_fees + total_services_amount\r\n                    total_services_amount = project_agreement_doc.total_services_amount or 0\r\n                    new_total_project_amount = total_government_fees + total_services_amount\r\n                    project_agreement_doc.total_project_amount = new_total_project_amount\r\n\r\n                    # Calculate advance_balance: total_government_fees - expense_amount\r\n                    # Get current expense_amount from Project Agreement\r\n                    current_expense_amount = project_agreement_doc.expense_amount or 0\r\n                    advance_balance = total_government_fees - current_expense_amount\r\n                    project_agreement_doc.advance_balance = advance_balance\r\n\r\n                    # Recalculate pending_amount: sum of unpaid amounts in pending_expenses table\r\n                    pending_amount_total = 0\r\n                    for pending_row in project_agreement_doc.pending_expenses:\r\n                        if not pending_row.paid:\r\n                            row_amount = float(pending_row.amount or 0)\r\n                            row_collected = float(pending_row.collected_amount or 0)\r\n                            outstanding = row_amount - row_collected\r\n                            pending_amount_total = pending_amount_total + outstanding\r\n\r\n                    project_agreement_doc.pending_amount = pending_amount_total\r\n                    frappe.log_error(f\"Final pending_amount calculated: {pending_amount_total}\", \"Pending Expenses Reconciliation Debug\")\r\n\r\n                    # Save project agreement (don't submit as it might already be submitted)\r\n                    project_agreement_doc.save()\r\n\r\n                except Exception as e:\r\n                    frappe.log_error(f\"Error updating Project Agreement: {str(e)}\", \"Project Payment Gov Fee Update Error\")\r\n                    # Don't throw error here as the journal entry was created successfully\r\n\r\n        except Exception as e:\r\n            frappe.log_error(f\"Error creating journal entry for government fee: {str(e)}\", \"Project Payment Gov Fee Error\")\r\n            frappe.throw(f\"Error creating journal entry for government fee: {str(e)}\")\r\n\r\n    # Process Trust Fees (only for Customer payments)\r\n    try:\r\n        trust_fees_exist = doc.trust_fees_payment and len(doc.trust_fees_payment) > 0\r\n    except:\r\n        trust_fees_exist = False\r\n\r\n    if trust_fees_exist:\r\n        for trust_fee_row in doc.trust_fees_payment:\r\n            try:\r\n                # Create Journal Entry for trust fee\r\n                journal_entry = frappe.new_doc(\"Journal Entry\")\r\n                journal_entry.company = default_company\r\n                journal_entry.posting_date = doc.date\r\n                journal_entry.user_remark = trust_fee_row.remark or \"Trust fee payment\"\r\n\r\n                # 1. Trust Account Credit (amount) - linked with customer as advance\r\n                if doc.trust_account:\r\n                    trust_account_row = journal_entry.append(\"accounts\", {})\r\n                    trust_account_row.account = doc.trust_account\r\n                    trust_account_row.credit_in_account_currency = trust_fee_row.amount\r\n                    trust_account_row.party_type = \"Customer\"\r\n                    trust_account_row.party = doc.customer\r\n                    trust_account_row.is_advance = \"Yes\"\r\n                    trust_account_row.user_remark = trust_fee_row.remark or \"Trust fee advance\"\r\n\r\n                # 2. Receiving Account Debit (amount)\r\n                if doc.receiving_account:\r\n                    receiving_account_row = journal_entry.append(\"accounts\", {})\r\n                    receiving_account_row.account = doc.receiving_account\r\n                    receiving_account_row.debit_in_account_currency = trust_fee_row.amount\r\n                    receiving_account_row.user_remark = trust_fee_row.remark or \"Trust fee received\"\r\n\r\n                # Save and submit journal entry\r\n                journal_entry.save()\r\n                journal_entry.submit()\r\n                journal_entries_created.append(journal_entry.name)\r\n\r\n                # Update trust_fees_payment row with journal entry reference in Project Payment\r\n                frappe.db.set_value(\"Trust Fees Payment\", trust_fee_row.name, \"journal_entry_reference\", journal_entry.name)\r\n\r\n                # Also update the row directly in the current document\r\n                trust_fee_row.journal_entry_reference = journal_entry.name\r\n\r\n                # Update Project Agreement with new trust fees row\r\n                if trust_fee_row.project_agreement:\r\n                    try:\r\n                        project_agreement_doc = frappe.get_doc(\"Project Agreement\", trust_fee_row.project_agreement)\r\n\r\n                        # Add new row to trust_fees table in project agreement\r\n                        new_trust_fee_row = project_agreement_doc.append(\"trust_fees\", {})\r\n                        new_trust_fee_row.date = doc.date\r\n                        new_trust_fee_row.payment_method = doc.mode_of_payment\r\n                        new_trust_fee_row.amount = trust_fee_row.amount\r\n                        new_trust_fee_row.remark = trust_fee_row.remark\r\n                        new_trust_fee_row.journal_entry_reference = journal_entry.name\r\n\r\n                        # Recalculate trust fees totals in Project Agreement\r\n                        # Calculate total_trust_fees: sum of amount in trust_fees table\r\n                        total_trust_fees = 0\r\n                        for trust_fee in project_agreement_doc.trust_fees:\r\n                            total_trust_fees = total_trust_fees + (trust_fee.amount or 0)\r\n\r\n                        project_agreement_doc.total_trust_fees = total_trust_fees\r\n\r\n                        # Calculate trust_fees_balance: total_trust_fees - total_claimed_trust_fees\r\n                        total_claimed_trust_fees = project_agreement_doc.total_claimed_trust_fees or 0\r\n                        trust_fees_balance = total_trust_fees - total_claimed_trust_fees\r\n                        project_agreement_doc.trust_fees_balance = trust_fees_balance\r\n\r\n                        # Save project agreement (don't submit as it might already be submitted)\r\n                        project_agreement_doc.save()\r\n\r\n                    except Exception as e:\r\n                        frappe.log_error(f\"Error updating Project Agreement trust fees: {str(e)}\", \"Project Payment Trust Fee Update Error\")\r\n                        # Don't throw error here as the journal entry was created successfully\r\n\r\n            except Exception as e:\r\n                frappe.log_error(f\"Error creating journal entry for trust fee: {str(e)}\", \"Project Payment Trust Fee Error\")\r\n                frappe.throw(f\"Error creating journal entry for trust fee: {str(e)}\")\r\n\r\n# Success message\r\nif journal_entries_created:\r\n    journal_count = len(journal_entries_created)\r\n    frappe.msgprint(f\"Successfully created {journal_count} Journal Entry(ies) for Project Payment {doc.name}\")\r\nelse:\r\n    frappe.msgprint(\"No journal entries were created.\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-31 13:26:48.575198",
  "module": "Orbit",
  "name": "Project Expenses Journal Entry Creation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Project Expenses",
  "script": "# Project Expenses Server Script - Journal Entry Creation\r\n# Script Type: DocType Event\r\n# Reference Document Type: Project Expenses\r\n# DocType Event: on_submit\r\n\r\n# Get company - prioritize Project Expenses company with fallbacks\r\ndefault_company = None\r\n\r\n# Method 1: Check if Project Expenses has a company field\r\ntry:\r\n    if doc.company:\r\n        default_company = doc.company\r\nexcept:\r\n    pass\r\n\r\n# Method 2: Try user's default company\r\nif not default_company:\r\n    try:\r\n        user_defaults = frappe.db.get_value(\"User Permission\",\r\n            {\"user\": frappe.session.user, \"allow\": \"Company\"},\r\n            \"for_value\")\r\n        if user_defaults:\r\n            default_company = user_defaults\r\n    except:\r\n        pass\r\n\r\n# Method 3: Try global default company\r\nif not default_company:\r\n    try:\r\n        default_company = frappe.db.get_single_value(\"Global Defaults\", \"default_company\")\r\n    except:\r\n        pass\r\n\r\n# Method 4: Look for \"Orbit\" company specifically\r\nif not default_company:\r\n    try:\r\n        orbit_company = frappe.db.get_value(\"Company\", {\"name\": \"Orbit\"}, \"name\")\r\n        if orbit_company:\r\n            default_company = orbit_company\r\n    except:\r\n        pass\r\n\r\n# Method 5: Fallback to any company\r\nif not default_company:\r\n    try:\r\n        companies = frappe.get_all(\"Company\", limit=1)\r\n        if companies:\r\n            default_company = companies[0].name\r\n    except:\r\n        pass\r\n\r\nif not default_company:\r\n    frappe.throw(\"No company found. Please create a company first.\")\r\n\r\n# Log which company is being used for debugging\r\nfrappe.log_error(\"Using company: \" + str(default_company) + \" for Project Expenses: \" + str(doc.name), \"Debug: Project Expenses Company Selection\")\r\n\r\n# Track created journal entries\r\njournal_entries_created = []\r\n\r\n# Process Expenses Items\r\nfor expense_row in doc.expenses_items:\r\n    try:\r\n        # Skip if no amount or no expense account\r\n        if not expense_row.amount or not expense_row.expense_account:\r\n            continue\r\n            \r\n        # Create Journal Entry for expense\r\n        journal_entry = frappe.new_doc(\"Journal Entry\")\r\n        journal_entry.company = default_company\r\n        journal_entry.posting_date = expense_row.date or doc.posting_date\r\n        journal_entry.user_remark = expense_row.description or (\"Project expense for \" + str(doc.project_agreement))\r\n        \r\n        expense_amount = expense_row.amount\r\n        \r\n        # Calculate how much of this expense is covered by advances\r\n        allocated_for_this_expense = expense_row.allocated_amount or 0\r\n\r\n        # Get advances and calculate proportional distribution for this expense\r\n        advances_to_process = []\r\n        total_advance_allocated = 0\r\n\r\n        # First, get total allocated amount across all advances\r\n        for advance_row in doc.advances:\r\n            if advance_row.allocated_amount and advance_row.allocated_amount > 0:\r\n                total_advance_allocated = total_advance_allocated + advance_row.allocated_amount\r\n\r\n        # Now distribute this expense proportionally across advances\r\n        if total_advance_allocated > 0 and allocated_for_this_expense > 0:\r\n            for advance_row in doc.advances:\r\n                if advance_row.allocated_amount and advance_row.allocated_amount > 0:\r\n                    # Calculate proportional amount for this expense\r\n                    proportion = advance_row.allocated_amount / total_advance_allocated\r\n                    advance_amount_for_this_expense = allocated_for_this_expense * proportion\r\n                    # Round to 2 decimal places to avoid floating point precision issues\r\n                    advance_amount_for_this_expense = round(advance_amount_for_this_expense, 2)\r\n\r\n                    # Get advance account from Employee Advance document and validate available amount\r\n                    try:\r\n                        employee_advance_doc = frappe.get_doc(\"Employee Advance\", advance_row.employee_advance)\r\n                        advance_account = employee_advance_doc.advance_account\r\n                        employee = employee_advance_doc.employee\r\n                        \r\n                        # Calculate available unclaimed amount for this advance\r\n                        available_unclaimed = (employee_advance_doc.advance_amount or 0) - (employee_advance_doc.return_amount or 0)\r\n                        available_unclaimed = round(available_unclaimed, 2)\r\n                        \r\n                        # Ensure we don't exceed the available unclaimed amount\r\n                        if advance_amount_for_this_expense > available_unclaimed:\r\n                            frappe.log_error(f\"Warning: Allocating {advance_amount_for_this_expense} from advance {advance_row.employee_advance} but only {available_unclaimed} is available. Reducing allocation.\", \"Project Expenses Advance Warning\")\r\n                            advance_amount_for_this_expense = available_unclaimed\r\n                        \r\n                        # Only add if there's an amount to allocate\r\n                        if advance_amount_for_this_expense > 0:\r\n                            advances_to_process.append({\r\n                                'advance_account': advance_account,\r\n                                'allocated_amount': advance_amount_for_this_expense,\r\n                                'employee_advance': advance_row.employee_advance,\r\n                                'employee': employee\r\n                            })\r\n                    except Exception as e:\r\n                        frappe.log_error(\"Error getting advance details for \" + str(advance_row.employee_advance) + \": \" + str(e), \"Project Expenses Advance Error\")\r\n                        continue\r\n\r\n        # Create journal entry rows for each advance (Credit entries)\r\n        for advance_info in advances_to_process:\r\n            advance_credit_row = journal_entry.append(\"accounts\", {})\r\n            advance_credit_row.account = advance_info['advance_account']\r\n            # Round to 2 decimal places to avoid floating point precision issues\r\n            rounded_amount = round(advance_info['allocated_amount'], 2)\r\n            advance_credit_row.credit_in_account_currency = rounded_amount\r\n            advance_credit_row.party_type = \"Employee\"\r\n            advance_credit_row.party = advance_info['employee']\r\n            advance_credit_row.reference_type = \"Employee Advance\"\r\n            advance_credit_row.reference_name = advance_info['employee_advance']\r\n            advance_credit_row.user_remark = expense_row.description or \"Advance allocation for expense\"\r\n        \r\n        # Expense Account Debit (allocated amount for this expense)\r\n        if allocated_for_this_expense > 0:\r\n            expense_debit_row = journal_entry.append(\"accounts\", {})\r\n            expense_debit_row.account = expense_row.expense_account\r\n            expense_debit_row.debit_in_account_currency = allocated_for_this_expense\r\n            expense_debit_row.user_remark = expense_row.description or \"Project expense\"\r\n\r\n        # Customer Advance Account Debit (allocated amount for this expense) - linked with customer\r\n        if doc.customer_advance_account and doc.customer and allocated_for_this_expense > 0:\r\n            customer_advance_debit_row = journal_entry.append(\"accounts\", {})\r\n            customer_advance_debit_row.account = doc.customer_advance_account\r\n            customer_advance_debit_row.debit_in_account_currency = allocated_for_this_expense\r\n            customer_advance_debit_row.party_type = \"Customer\"\r\n            customer_advance_debit_row.party = doc.customer\r\n            customer_advance_debit_row.user_remark = expense_row.description or \"Customer advance utilization\"\r\n\r\n        # Expense Account Credit (allocated amount for this expense)\r\n        if allocated_for_this_expense > 0:\r\n            expense_credit_row = journal_entry.append(\"accounts\", {})\r\n            expense_credit_row.account = expense_row.expense_account\r\n            expense_credit_row.credit_in_account_currency = allocated_for_this_expense\r\n            expense_credit_row.user_remark = expense_row.description or \"Project expense allocation\"\r\n        \r\n        # Save and submit journal entry\r\n        journal_entry.save()\r\n        journal_entry.submit()\r\n        journal_entries_created = journal_entries_created + [journal_entry.name]\r\n        \r\n    except Exception as e:\r\n        frappe.log_error(\"Error creating journal entry for expense: \" + str(e), \"Project Expenses Error\")\r\n        frappe.throw(\"Error creating journal entry for expense on \" + str(expense_row.date) + \": \" + str(e))\r\n\r\n# Process Trust Fees Expenses\r\ntry:\r\n    trust_fees_expenses_exist = doc.trust_fees_expenses and len(doc.trust_fees_expenses) > 0\r\nexcept:\r\n    trust_fees_expenses_exist = False\r\n\r\nif trust_fees_expenses_exist:\r\n    for trust_fee_expense_row in doc.trust_fees_expenses:\r\n        try:\r\n            # Skip if no amount\r\n            if not trust_fee_expense_row.amount:\r\n                continue\r\n\r\n            # Create Journal Entry for trust fee expense\r\n            journal_entry = frappe.new_doc(\"Journal Entry\")\r\n            journal_entry.company = default_company\r\n            journal_entry.posting_date = trust_fee_expense_row.date or doc.posting_date\r\n            journal_entry.user_remark = trust_fee_expense_row.description or (\"Trust fee expense for \" + str(doc.project_agreement))\r\n\r\n            trust_fee_amount = trust_fee_expense_row.amount\r\n\r\n            # Check expense_trust_fees_via_ field to determine journal entry logic\r\n            if doc.expense_trust_fees_via_ == 'Employee Advance':\r\n                # Process via Employee Advance - similar to before but with new fields\r\n                allocated_amount = trust_fee_expense_row.allocated_amount or 0\r\n                \r\n                if allocated_amount > 0:\r\n                    # Calculate how much of this trust fee expense is covered by advances\r\n                    # Get advances and calculate proportional distribution for this trust fee expense\r\n                    advances_to_process = []\r\n                    total_advance_allocated = 0\r\n\r\n                    # First, get total allocated amount across all advances\r\n                    for advance_row in doc.advances:\r\n                        if advance_row.allocated_amount and advance_row.allocated_amount > 0:\r\n                            total_advance_allocated = total_advance_allocated + advance_row.allocated_amount\r\n\r\n                    # Now distribute this trust fee expense proportionally across advances\r\n                    if total_advance_allocated > 0 and allocated_amount > 0:\r\n                        for advance_row in doc.advances:\r\n                            if advance_row.allocated_amount and advance_row.allocated_amount > 0:\r\n                                # Calculate proportional amount for this trust fee expense\r\n                                proportion = advance_row.allocated_amount / total_advance_allocated\r\n                                advance_amount_for_this_trust_fee = allocated_amount * proportion\r\n                                # Round to 2 decimal places to avoid floating point precision issues\r\n                                advance_amount_for_this_trust_fee = round(advance_amount_for_this_trust_fee, 2)\r\n\r\n                                # Get advance account from Employee Advance document and validate available amount\r\n                                try:\r\n                                    employee_advance_doc = frappe.get_doc(\"Employee Advance\", advance_row.employee_advance)\r\n                                    advance_account = employee_advance_doc.advance_account\r\n                                    employee = employee_advance_doc.employee\r\n                                    \r\n                                    # Calculate available unclaimed amount for this advance\r\n                                    available_unclaimed = (employee_advance_doc.advance_amount or 0) - (employee_advance_doc.return_amount or 0)\r\n                                    available_unclaimed = round(available_unclaimed, 2)\r\n                                    \r\n                                    # Ensure we don't exceed the available unclaimed amount\r\n                                    if advance_amount_for_this_trust_fee > available_unclaimed:\r\n                                        frappe.log_error(f\"Warning: Allocating {advance_amount_for_this_trust_fee} from advance {advance_row.employee_advance} but only {available_unclaimed} is available. Reducing allocation.\", \"Trust Fee Expense Advance Warning\")\r\n                                        advance_amount_for_this_trust_fee = available_unclaimed\r\n                                    \r\n                                    # Only add if there's an amount to allocate\r\n                                    if advance_amount_for_this_trust_fee > 0:\r\n                                        advances_to_process.append({\r\n                                            'advance_account': advance_account,\r\n                                            'allocated_amount': advance_amount_for_this_trust_fee,\r\n                                            'employee_advance': advance_row.employee_advance,\r\n                                            'employee': employee\r\n                                        })\r\n                                except Exception as e:\r\n                                    frappe.log_error(\"Error getting advance details for trust fee expense \" + str(advance_row.employee_advance) + \": \" + str(e), \"Trust Fee Expense Advance Error\")\r\n                                    continue\r\n\r\n                    # Create journal entry rows for each advance (Credit entries)\r\n                    for advance_info in advances_to_process:\r\n                        advance_credit_row = journal_entry.append(\"accounts\", {})\r\n                        advance_credit_row.account = advance_info['advance_account']\r\n                        # Round to 2 decimal places to avoid floating point precision issues\r\n                        rounded_amount = round(advance_info['allocated_amount'], 2)\r\n                        advance_credit_row.credit_in_account_currency = rounded_amount\r\n                        advance_credit_row.party_type = \"Employee\"\r\n                        advance_credit_row.party = advance_info['employee']\r\n                        advance_credit_row.reference_type = \"Employee Advance\"\r\n                        advance_credit_row.reference_name = advance_info['employee_advance']\r\n                        advance_credit_row.user_remark = trust_fee_expense_row.description or \"Trust fee advance allocation\"\r\n\r\n                    # Trust Fees Account Debit (allocated amount) - linked with customer as it's receivable\r\n                    if doc.trust_fees_account and allocated_amount > 0:\r\n                        trust_fees_debit_row = journal_entry.append(\"accounts\", {})\r\n                        trust_fees_debit_row.account = doc.trust_fees_account\r\n                        trust_fees_debit_row.debit_in_account_currency = allocated_amount\r\n                        trust_fees_debit_row.party_type = \"Customer\"\r\n                        trust_fees_debit_row.party = doc.customer\r\n                        trust_fees_debit_row.user_remark = trust_fee_expense_row.description or \"Trust fee expense\"\r\n\r\n            elif doc.expense_trust_fees_via_ == 'Other':\r\n                # Process via Other - credit payment_account, debit trust_fees_account\r\n                if doc.payment_account and doc.trust_fees_account and trust_fee_amount > 0:\r\n                    # Payment Account Credit (no party linking)\r\n                    payment_credit_row = journal_entry.append(\"accounts\", {})\r\n                    payment_credit_row.account = doc.payment_account\r\n                    payment_credit_row.credit_in_account_currency = trust_fee_amount\r\n                    payment_credit_row.user_remark = trust_fee_expense_row.description or \"Trust fee payment\"\r\n\r\n                    # Trust Fees Account Debit (linked with customer)\r\n                    trust_fees_debit_row = journal_entry.append(\"accounts\", {})\r\n                    trust_fees_debit_row.account = doc.trust_fees_account\r\n                    trust_fees_debit_row.debit_in_account_currency = trust_fee_amount\r\n                    trust_fees_debit_row.party_type = \"Customer\"\r\n                    trust_fees_debit_row.party = doc.customer\r\n                    trust_fees_debit_row.user_remark = trust_fee_expense_row.description or \"Trust fee expense\"\r\n\r\n            else:\r\n                # Default behavior for backward compatibility - same as Employee Advance\r\n                allocated_amount = trust_fee_expense_row.allocated_amount or 0\r\n                \r\n                if allocated_amount > 0:\r\n                    # Same logic as Employee Advance case\r\n                    advances_to_process = []\r\n                    total_advance_allocated = 0\r\n\r\n                    for advance_row in doc.advances:\r\n                        if advance_row.allocated_amount and advance_row.allocated_amount > 0:\r\n                            total_advance_allocated = total_advance_allocated + advance_row.allocated_amount\r\n\r\n                    if total_advance_allocated > 0 and allocated_amount > 0:\r\n                        for advance_row in doc.advances:\r\n                            if advance_row.allocated_amount and advance_row.allocated_amount > 0:\r\n                                proportion = advance_row.allocated_amount / total_advance_allocated\r\n                                advance_amount_for_this_trust_fee = allocated_amount * proportion\r\n                                advance_amount_for_this_trust_fee = round(advance_amount_for_this_trust_fee, 2)\r\n\r\n                                try:\r\n                                    employee_advance_doc = frappe.get_doc(\"Employee Advance\", advance_row.employee_advance)\r\n                                    advance_account = employee_advance_doc.advance_account\r\n                                    employee = employee_advance_doc.employee\r\n                                    \r\n                                    available_unclaimed = (employee_advance_doc.advance_amount or 0) - (employee_advance_doc.return_amount or 0)\r\n                                    available_unclaimed = round(available_unclaimed, 2)\r\n                                    \r\n                                    if advance_amount_for_this_trust_fee > available_unclaimed:\r\n                                        frappe.log_error(f\"Warning: Allocating {advance_amount_for_this_trust_fee} from advance {advance_row.employee_advance} but only {available_unclaimed} is available. Reducing allocation.\", \"Trust Fee Expense Advance Warning\")\r\n                                        advance_amount_for_this_trust_fee = available_unclaimed\r\n                                    \r\n                                    if advance_amount_for_this_trust_fee > 0:\r\n                                        advances_to_process.append({\r\n                                            'advance_account': advance_account,\r\n                                            'allocated_amount': advance_amount_for_this_trust_fee,\r\n                                            'employee_advance': advance_row.employee_advance,\r\n                                            'employee': employee\r\n                                        })\r\n                                except Exception as e:\r\n                                    frappe.log_error(\"Error getting advance details for trust fee expense \" + str(advance_row.employee_advance) + \": \" + str(e), \"Trust Fee Expense Advance Error\")\r\n                                    continue\r\n\r\n                    for advance_info in advances_to_process:\r\n                        advance_credit_row = journal_entry.append(\"accounts\", {})\r\n                        advance_credit_row.account = advance_info['advance_account']\r\n                        rounded_amount = round(advance_info['allocated_amount'], 2)\r\n                        advance_credit_row.credit_in_account_currency = rounded_amount\r\n                        advance_credit_row.party_type = \"Employee\"\r\n                        advance_credit_row.party = advance_info['employee']\r\n                        advance_credit_row.reference_type = \"Employee Advance\"\r\n                        advance_credit_row.reference_name = advance_info['employee_advance']\r\n                        advance_credit_row.user_remark = trust_fee_expense_row.description or \"Trust fee advance allocation\"\r\n\r\n                    if doc.trust_fees_account and allocated_amount > 0:\r\n                        trust_fees_debit_row = journal_entry.append(\"accounts\", {})\r\n                        trust_fees_debit_row.account = doc.trust_fees_account\r\n                        trust_fees_debit_row.debit_in_account_currency = allocated_amount\r\n                        trust_fees_debit_row.party_type = \"Customer\"\r\n                        trust_fees_debit_row.party = doc.customer\r\n                        trust_fees_debit_row.user_remark = trust_fee_expense_row.description or \"Trust fee expense\"\r\n\r\n            # Save and submit journal entry\r\n            journal_entry.save()\r\n            journal_entry.submit()\r\n            journal_entries_created = journal_entries_created + [journal_entry.name]\r\n\r\n        except Exception as e:\r\n            frappe.log_error(\"Error creating journal entry for trust fee expense: \" + str(e), \"Trust Fee Expense Error\")\r\n            frappe.throw(\"Error creating journal entry for trust fee expense on \" + str(trust_fee_expense_row.date) + \": \" + str(e))\r\n\r\n# Update Project Agreement with expense and pending amounts\r\nif doc.project_agreement:\r\n    try:\r\n        project_agreement_doc = frappe.get_doc(\"Project Agreement\", doc.project_agreement)\r\n\r\n        # Update expenses_log and pending_expenses tables with individual expense items\r\n        expenses_log_added = 0\r\n        pending_expenses_added = 0\r\n\r\n        for expense_row in doc.expenses_items:\r\n            # Add to expenses_log table if allocated_amount > 0\r\n            if expense_row.allocated_amount and expense_row.allocated_amount > 0:\r\n                new_expense_log_row = project_agreement_doc.append(\"expenses_log\", {})\r\n                new_expense_log_row.date = expense_row.date\r\n                new_expense_log_row.amount = expense_row.allocated_amount\r\n                new_expense_log_row.description = expense_row.description or \"Project expense\"\r\n                new_expense_log_row.reference = doc.name\r\n                new_expense_log_row.transaction_type = \"Expense\"\r\n                expenses_log_added = expenses_log_added + 1\r\n\r\n            # Add to pending_expenses table if pending_amount > 0\r\n            if expense_row.pending_amount and expense_row.pending_amount > 0:\r\n                new_pending_expense_row = project_agreement_doc.append(\"pending_expenses\", {})\r\n                new_pending_expense_row.amount = expense_row.pending_amount\r\n                new_pending_expense_row.reference = doc.name\r\n                new_pending_expense_row.paid = 0  # Default to not paid\r\n                pending_expenses_added = pending_expenses_added + 1\r\n\r\n        # Update expense_amount: current value + total_expenses from this Project Expenses\r\n        current_expense_amount = project_agreement_doc.expense_amount or 0\r\n        new_expense_amount = current_expense_amount + (doc.total_expenses or 0)\r\n        project_agreement_doc.expense_amount = new_expense_amount\r\n        \r\n        # Update pending_amount: current value + total_pending from this Project Expenses\r\n        current_pending_amount = project_agreement_doc.pending_amount or 0\r\n        new_pending_amount = current_pending_amount + (doc.total_pending or 0)\r\n        project_agreement_doc.pending_amount = new_pending_amount\r\n\r\n        # Update advance_balance: current value - total_expenses from this Project Expenses\r\n        current_advance_balance = project_agreement_doc.advance_balance or 0\r\n        new_advance_balance = current_advance_balance - (doc.total_expenses or 0)\r\n        project_agreement_doc.advance_balance = new_advance_balance\r\n\r\n        # Process Trust Fees Expenses and update trust_fees_log\r\n        trust_fees_log_added = 0\r\n        try:\r\n            trust_fees_expenses_exist = doc.trust_fees_expenses and len(doc.trust_fees_expenses) > 0\r\n        except:\r\n            trust_fees_expenses_exist = False\r\n\r\n        if trust_fees_expenses_exist:\r\n            for trust_fee_expense_row in doc.trust_fees_expenses:\r\n                if trust_fee_expense_row.amount and trust_fee_expense_row.amount > 0:\r\n                    # Add to trust_fees_log table\r\n                    new_trust_fee_log_row = project_agreement_doc.append(\"trust_fees_log\", {})\r\n                    new_trust_fee_log_row.contractor = doc.contractor  # Use document-level contractor field\r\n                    new_trust_fee_log_row.date = trust_fee_expense_row.date or doc.posting_date\r\n                    new_trust_fee_log_row.amount = trust_fee_expense_row.amount\r\n                    new_trust_fee_log_row.description = trust_fee_expense_row.description or \"Trust fee expense\"\r\n                    new_trust_fee_log_row.reference = doc.name\r\n                    new_trust_fee_log_row.transaction_type = \"Expense\"\r\n                    trust_fees_log_added = trust_fees_log_added + 1\r\n\r\n            # Recalculate total_claimed_trust_fees: sum of amount in trust_fees_log table\r\n            total_claimed_trust_fees = 0\r\n            for trust_fee_log_row in project_agreement_doc.trust_fees_log:\r\n                total_claimed_trust_fees = total_claimed_trust_fees + (trust_fee_log_row.amount or 0)\r\n\r\n            project_agreement_doc.total_claimed_trust_fees = total_claimed_trust_fees\r\n\r\n            # Recalculate trust_fees_balance: total_trust_fees - total_claimed_trust_fees\r\n            total_trust_fees = project_agreement_doc.total_trust_fees or 0\r\n            trust_fees_balance = total_trust_fees - total_claimed_trust_fees\r\n            project_agreement_doc.trust_fees_balance = trust_fees_balance\r\n\r\n        # Save project agreement (don't submit as it might already be submitted)\r\n        project_agreement_doc.save()\r\n\r\n        frappe.log_error(\"Updated \" + str(doc.project_agreement) + \": exp=\" + str(new_expense_amount) + \", pend=\" + str(new_pending_amount) + \", bal=\" + str(new_advance_balance) + \", log=\" + str(expenses_log_added) + \", pending=\" + str(pending_expenses_added) + \", trust_log=\" + str(trust_fees_log_added), \"Project Expenses Update\")\r\n        \r\n    except Exception as e:\r\n        frappe.log_error(\"Error updating Project Agreement: \" + str(e), \"Project Expenses Agreement Update Error\")\r\n        # Don't throw error here as the journal entries were created successfully\r\n\r\n# Success message\r\nif journal_entries_created:\r\n    journal_count = len(journal_entries_created)\r\n    frappe.msgprint(\"Successfully created \" + str(journal_count) + \" Journal Entry(ies) for Project Expenses \" + str(doc.name))\r\nelse:\r\n    frappe.msgprint(\"No journal entries were created - no valid expense items found.\")\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-31 13:26:47.821454",
  "module": "Orbit",
  "name": "Sales Invoice Creation for Contractors Services",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Project Agreement",
  "script": "# Project Agreement Server Script - Contractors Services Sales Invoice Creation\r\n# Script Type: DocType Event\r\n# Reference Document Type: Project Agreement\r\n# DocType Event: on_submit\r\n\r\n# Get company - prioritize user's default company or Project Agreement company\r\ndefault_company = None\r\n\r\n# Method 1: Check if Project Agreement has a company field\r\ntry:\r\n    if doc.company:\r\n        default_company = doc.company\r\nexcept:\r\n    pass\r\n\r\n# Method 2: Try user's default company\r\nif not default_company:\r\n    try:\r\n        user_defaults = frappe.db.get_value(\"User Permission\",\r\n            {\"user\": frappe.session.user, \"allow\": \"Company\"},\r\n            \"for_value\")\r\n        if user_defaults:\r\n            default_company = user_defaults\r\n    except:\r\n        pass\r\n\r\n# Method 3: Try global default company\r\nif not default_company:\r\n    try:\r\n        default_company = frappe.db.get_single_value(\"Global Defaults\", \"default_company\")\r\n    except:\r\n        pass\r\n\r\n# Method 4: Look for \"Orbit\" company specifically\r\nif not default_company:\r\n    try:\r\n        orbit_company = frappe.db.get_value(\"Company\", {\"name\": \"Orbit\"}, \"name\")\r\n        if orbit_company:\r\n            default_company = orbit_company\r\n    except:\r\n        pass\r\n\r\n# Method 5: Fallback to any company\r\nif not default_company:\r\n    try:\r\n        companies = frappe.get_all(\"Company\", limit=1)\r\n        if companies:\r\n            default_company = companies[0].name\r\n    except:\r\n        pass\r\n\r\nif not default_company:\r\n    frappe.throw(\"No company found. Please create a company first.\")\r\n\r\n# Log which company is being used for debugging\r\nfrappe.log_error(f\"Using company: {default_company} for Project Agreement: {doc.name}\", \"Debug: Company Selection Contractors\")\r\n\r\n# Process contractor services that are not invoiced\r\ninvoices_created = []\r\n\r\nfor service_row in doc.contractors_services:\r\n    if not service_row.invoiced:\r\n        # Create Sales Invoice for contractor\r\n        sales_invoice = frappe.new_doc(\"Sales Invoice\")\r\n        \r\n        # Set customer (contractor) first\r\n        sales_invoice.customer = service_row.contractor\r\n        sales_invoice.company = default_company\r\n        sales_invoice.custom_project_agreement = doc.name\r\n        \r\n        # Set posting date and time\r\n        sales_invoice.posting_date = service_row.invoice_date\r\n        sales_invoice.set_posting_time = 1\r\n        \r\n        # Get customer details for setting defaults\r\n        customer_doc = frappe.get_doc(\"Customer\", service_row.contractor)\r\n        company_doc = frappe.get_doc(\"Company\", default_company)\r\n\r\n        # Set currency and price list from customer or company\r\n        try:\r\n            customer_currency = customer_doc.default_currency\r\n            if customer_currency:\r\n                sales_invoice.currency = customer_currency\r\n                sales_invoice.price_list_currency = customer_currency\r\n            else:\r\n                # Fallback to company currency\r\n                sales_invoice.currency = company_doc.default_currency\r\n                sales_invoice.price_list_currency = company_doc.default_currency\r\n        except:\r\n            # Fallback to company currency\r\n            sales_invoice.currency = company_doc.default_currency\r\n            sales_invoice.price_list_currency = company_doc.default_currency\r\n\r\n        try:\r\n            customer_price_list = customer_doc.default_price_list\r\n            if customer_price_list:\r\n                sales_invoice.selling_price_list = customer_price_list\r\n        except:\r\n            pass\r\n\r\n        # Set other customer defaults\r\n        try:\r\n            # Set payment terms if customer has default payment terms\r\n            if customer_doc.payment_terms:\r\n                sales_invoice.payment_terms_template = customer_doc.payment_terms\r\n        except:\r\n            pass\r\n\r\n        try:\r\n            # Set customer group\r\n            if customer_doc.customer_group:\r\n                sales_invoice.customer_group = customer_doc.customer_group\r\n        except:\r\n            pass\r\n\r\n        try:\r\n            # Set territory\r\n            if customer_doc.territory:\r\n                sales_invoice.territory = customer_doc.territory\r\n        except:\r\n            pass\r\n\r\n        # Override currency if Project Agreement has specific currency\r\n        if doc.currency:\r\n            sales_invoice.currency = doc.currency\r\n            sales_invoice.price_list_currency = doc.currency\r\n            # Set conversion rate to 1 if same currency\r\n            company_currency = frappe.db.get_value(\"Company\", default_company, \"default_currency\")\r\n            if doc.currency == company_currency:\r\n                sales_invoice.conversion_rate = 1\r\n\r\n        # Set customer receivable account (debit_to) - CRITICAL for currency validation\r\n        customer_receivable_account = None\r\n\r\n        # Method 1: Try customer's specific receivable account for this company\r\n        try:\r\n            customer_receivable_account = frappe.db.get_value(\"Party Account\",\r\n                {\"parent\": service_row.contractor, \"parenttype\": \"Customer\", \"company\": default_company},\r\n                \"account\")\r\n        except:\r\n            pass\r\n\r\n        # Method 2: Try company's default receivable account\r\n        if not customer_receivable_account:\r\n            try:\r\n                customer_receivable_account = frappe.db.get_value(\"Company\", default_company, \"default_receivable_account\")\r\n            except:\r\n                pass\r\n\r\n        # Method 3: Find any receivable account for this company\r\n        if not customer_receivable_account:\r\n            try:\r\n                customer_receivable_account = frappe.db.get_value(\"Account\",\r\n                    {\"company\": default_company, \"account_type\": \"Receivable\", \"is_group\": 0},\r\n                    \"name\")\r\n            except:\r\n                pass\r\n\r\n        # Method 4: Last resort - find any account with \"Debtors\" or \"Receivable\" in name\r\n        if not customer_receivable_account:\r\n            try:\r\n                accounts = frappe.db.sql(\"\"\"\r\n                    SELECT name FROM `tabAccount`\r\n                    WHERE company = %s AND is_group = 0\r\n                    AND (name LIKE '%%Debtors%%' OR name LIKE '%%Receivable%%' OR name LIKE '%%Customer%%')\r\n                    LIMIT 1\r\n                \"\"\", (default_company,))\r\n                if accounts:\r\n                    customer_receivable_account = accounts[0][0]\r\n            except:\r\n                pass\r\n\r\n        # Set the account or throw error if none found\r\n        if customer_receivable_account:\r\n            sales_invoice.debit_to = customer_receivable_account\r\n        else:\r\n            # Count available receivable accounts for debugging\r\n            receivable_count = frappe.db.count(\"Account\",\r\n                {\"company\": default_company, \"account_type\": \"Receivable\", \"is_group\": 0})\r\n            frappe.throw(f\"No receivable account found for company {default_company}. Found {receivable_count} receivable accounts. Please check customer setup or create receivable accounts.\")\r\n\r\n        # Set essential fields to prevent errors\r\n        sales_invoice.ignore_pricing_rule = 1\r\n        sales_invoice.conversion_rate = sales_invoice.conversion_rate or 1.0\r\n        sales_invoice.plc_conversion_rate = sales_invoice.plc_conversion_rate or 1.0\r\n\r\n        # Add item\r\n        item_row = sales_invoice.append(\"items\", {})\r\n        item_row.item_code = service_row.item\r\n        item_row.qty = 1\r\n        item_row.rate = service_row.amount\r\n        item_row.uom = \"Nos\"\r\n        \r\n        # Set remarks\r\n        if service_row.remark:\r\n            sales_invoice.remarks = service_row.remark\r\n        \r\n        # Apply tax template if provided\r\n        if service_row.tax_template:\r\n            try:\r\n                tax_template = frappe.get_doc(\"Sales Taxes and Charges Template\", service_row.tax_template)\r\n\r\n                # Check if tax template belongs to the correct company\r\n                template_company = tax_template.company\r\n                if template_company and template_company != default_company:\r\n                    frappe.log_error(f\"Tax template {service_row.tax_template} belongs to company {template_company} but invoice is for company {default_company}\")\r\n                    frappe.msgprint(f\"Warning: Tax template {service_row.tax_template} belongs to different company. Skipping taxes.\")\r\n                else:\r\n                    sales_invoice.taxes_and_charges = service_row.tax_template\r\n                    # Validate each tax account belongs to the correct company\r\n                    valid_taxes = []\r\n                    for tax in tax_template.taxes:\r\n                        try:\r\n                            # Check if account belongs to the correct company\r\n                            account_company = frappe.db.get_value(\"Account\", tax.account_head, \"company\")\r\n                            if account_company == default_company:\r\n                                valid_taxes.append({\r\n                                    \"charge_type\": tax.charge_type,\r\n                                    \"account_head\": tax.account_head,\r\n                                    \"description\": tax.description,\r\n                                    \"rate\": tax.rate,\r\n                                    \"tax_amount\": tax.tax_amount if tax.charge_type == \"Actual\" else 0\r\n                                })\r\n                            else:\r\n                                frappe.log_error(f\"Account {tax.account_head} belongs to company {account_company}, expected {default_company}\")\r\n                        except:\r\n                            # Skip invalid accounts\r\n                            pass\r\n\r\n                    # Add only valid taxes\r\n                    for tax_data in valid_taxes:\r\n                        sales_invoice.append(\"taxes\", tax_data)\r\n\r\n            except Exception as e:\r\n                frappe.log_error(f\"Error applying tax template: {str(e)}\")\r\n                frappe.msgprint(f\"Warning: Could not apply tax template {service_row.tax_template}. Invoice created without taxes.\")\r\n\r\n        # Final validation before saving\r\n        if not sales_invoice.debit_to:\r\n            frappe.throw(f\"Debit To account is required but not set for Sales Invoice. Customer: {service_row.contractor}, Company: {default_company}\")\r\n\r\n        # Set missing values and save\r\n        sales_invoice.run_method(\"set_missing_values\")\r\n        sales_invoice.save()\r\n        sales_invoice.submit()\r\n        \r\n        # Calculate total taxes from the created invoice\r\n        total_tax_amount = 0\r\n        if sales_invoice.taxes:\r\n            for tax_row in sales_invoice.taxes:\r\n                total_tax_amount = total_tax_amount + (tax_row.tax_amount or 0)\r\n        \r\n        # Update service row\r\n        service_row.invoiced = 1\r\n        service_row.reference_invoice = sales_invoice.name\r\n        service_row.tax_amount = total_tax_amount\r\n\r\n        invoices_created.append(sales_invoice.name)\r\n\r\n# Update database directly to avoid document modification conflict during submit\r\nif invoices_created:\r\n    for service_row in doc.contractors_services:\r\n        if service_row.invoiced and service_row.reference_invoice:\r\n            frappe.db.set_value(\"Contractors Services\", service_row.name, {\r\n                \"invoiced\": service_row.invoiced,\r\n                \"reference_invoice\": service_row.reference_invoice,\r\n                \"tax_amount\": service_row.tax_amount or 0\r\n            })\r\n\r\n    invoice_count = len(invoices_created)\r\n    frappe.msgprint(f\"Successfully created {invoice_count} Sales Invoice(s) for contractors\")\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save (Submitted Document)",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-31 13:26:47.776933",
  "module": "Orbit",
  "name": "Create invoices for Contractors Services After Save",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Project Agreement",
  "script": "# Project Agreement Server Script - Contractors Services After Save\r\n# Script Type: DocType Event\r\n# Reference Document Type: Project Agreement\r\n# DocType Event: after_save\r\n\r\n# Only process if document is already submitted\r\nif doc.docstatus == 1:\r\n    # Get company - prioritize user's default company or Project Agreement company\r\n    default_company = None\r\n\r\n    # Method 1: Check if Project Agreement has a company field\r\n    try:\r\n        if doc.company:\r\n            default_company = doc.company\r\n    except:\r\n        pass\r\n\r\n    # Method 2: Try user's default company\r\n    if not default_company:\r\n        try:\r\n            user_defaults = frappe.db.get_value(\"User Permission\",\r\n                {\"user\": frappe.session.user, \"allow\": \"Company\"},\r\n                \"for_value\")\r\n            if user_defaults:\r\n                default_company = user_defaults\r\n        except:\r\n            pass\r\n\r\n    # Method 3: Try global default company\r\n    if not default_company:\r\n        try:\r\n            default_company = frappe.db.get_single_value(\"Global Defaults\", \"default_company\")\r\n        except:\r\n            pass\r\n\r\n    # Method 4: Look for \"Orbit\" company specifically\r\n    if not default_company:\r\n        try:\r\n            orbit_company = frappe.db.get_value(\"Company\", {\"name\": \"Orbit\"}, \"name\")\r\n            if orbit_company:\r\n                default_company = orbit_company\r\n        except:\r\n            pass\r\n\r\n    # Method 5: Fallback to any company\r\n    if not default_company:\r\n        try:\r\n            companies = frappe.get_all(\"Company\", limit=1)\r\n            if companies:\r\n                default_company = companies[0].name\r\n        except:\r\n            pass\r\n\r\n    if not default_company:\r\n        frappe.throw(\"No company found. Please create a company first.\")\r\n\r\n    # Log which company is being used for debugging\r\n    frappe.log_error(f\"After Save - Using company: {default_company} for Project Agreement: {doc.name}\", \"Debug: Company Selection After Save Contractors\")\r\n    \r\n    # Process contractor services that are not invoiced\r\n    invoices_created = []\r\n    \r\n    for service_row in doc.contractors_services:\r\n        if not service_row.invoiced:\r\n            # Create Sales Invoice for contractor\r\n            sales_invoice = frappe.new_doc(\"Sales Invoice\")\r\n            \r\n            # Set customer (contractor) first\r\n            sales_invoice.customer = service_row.contractor\r\n            sales_invoice.company = default_company\r\n            sales_invoice.custom_project_agreement = doc.name\r\n            \r\n            # Set posting date and time\r\n            sales_invoice.posting_date = service_row.invoice_date\r\n            sales_invoice.set_posting_time = 1\r\n\r\n            # Get customer details for setting defaults\r\n            customer_doc = frappe.get_doc(\"Customer\", service_row.contractor)\r\n            company_doc = frappe.get_doc(\"Company\", default_company)\r\n\r\n            # Set currency and price list from customer or company\r\n            try:\r\n                customer_currency = customer_doc.default_currency\r\n                if customer_currency:\r\n                    sales_invoice.currency = customer_currency\r\n                    sales_invoice.price_list_currency = customer_currency\r\n                else:\r\n                    # Fallback to company currency\r\n                    sales_invoice.currency = company_doc.default_currency\r\n                    sales_invoice.price_list_currency = company_doc.default_currency\r\n            except:\r\n                # Fallback to company currency\r\n                sales_invoice.currency = company_doc.default_currency\r\n                sales_invoice.price_list_currency = company_doc.default_currency\r\n\r\n            try:\r\n                customer_price_list = customer_doc.default_price_list\r\n                if customer_price_list:\r\n                    sales_invoice.selling_price_list = customer_price_list\r\n            except:\r\n                pass\r\n\r\n            # Set other customer defaults\r\n            try:\r\n                # Set payment terms if customer has default payment terms\r\n                if customer_doc.payment_terms:\r\n                    sales_invoice.payment_terms_template = customer_doc.payment_terms\r\n            except:\r\n                pass\r\n\r\n            try:\r\n                # Set customer group\r\n                if customer_doc.customer_group:\r\n                    sales_invoice.customer_group = customer_doc.customer_group\r\n            except:\r\n                pass\r\n\r\n            try:\r\n                # Set territory\r\n                if customer_doc.territory:\r\n                    sales_invoice.territory = customer_doc.territory\r\n            except:\r\n                pass\r\n\r\n            # Override currency if Project Agreement has specific currency\r\n            if doc.currency:\r\n                sales_invoice.currency = doc.currency\r\n                sales_invoice.price_list_currency = doc.currency\r\n                # Set conversion rate to 1 if same currency\r\n                company_currency = frappe.db.get_value(\"Company\", default_company, \"default_currency\")\r\n                if doc.currency == company_currency:\r\n                    sales_invoice.conversion_rate = 1\r\n\r\n            # Set customer receivable account (debit_to) - CRITICAL for currency validation\r\n            customer_receivable_account = None\r\n\r\n            # Method 1: Try customer's specific receivable account for this company\r\n            try:\r\n                customer_receivable_account = frappe.db.get_value(\"Party Account\",\r\n                    {\"parent\": service_row.contractor, \"parenttype\": \"Customer\", \"company\": default_company},\r\n                    \"account\")\r\n            except:\r\n                pass\r\n\r\n            # Method 2: Try company's default receivable account\r\n            if not customer_receivable_account:\r\n                try:\r\n                    customer_receivable_account = frappe.db.get_value(\"Company\", default_company, \"default_receivable_account\")\r\n                except:\r\n                    pass\r\n\r\n            # Method 3: Find any receivable account for this company\r\n            if not customer_receivable_account:\r\n                try:\r\n                    customer_receivable_account = frappe.db.get_value(\"Account\",\r\n                        {\"company\": default_company, \"account_type\": \"Receivable\", \"is_group\": 0},\r\n                        \"name\")\r\n                except:\r\n                    pass\r\n\r\n            # Method 4: Last resort - find any account with \"Debtors\" or \"Receivable\" in name\r\n            if not customer_receivable_account:\r\n                try:\r\n                    accounts = frappe.db.sql(\"\"\"\r\n                        SELECT name FROM `tabAccount`\r\n                        WHERE company = %s AND is_group = 0\r\n                        AND (name LIKE '%%Debtors%%' OR name LIKE '%%Receivable%%' OR name LIKE '%%Customer%%')\r\n                        LIMIT 1\r\n                    \"\"\", (default_company,))\r\n                    if accounts:\r\n                        customer_receivable_account = accounts[0][0]\r\n                except:\r\n                    pass\r\n\r\n            # Set the account or throw error if none found\r\n            if customer_receivable_account:\r\n                sales_invoice.debit_to = customer_receivable_account\r\n            else:\r\n                # Count available receivable accounts for debugging\r\n                receivable_count = frappe.db.count(\"Account\",\r\n                    {\"company\": default_company, \"account_type\": \"Receivable\", \"is_group\": 0})\r\n                frappe.throw(f\"No receivable account found for company {default_company}. Found {receivable_count} receivable accounts. Please check customer setup or create receivable accounts.\")\r\n\r\n            # Set essential fields to prevent errors\r\n            sales_invoice.ignore_pricing_rule = 1\r\n            sales_invoice.conversion_rate = sales_invoice.conversion_rate or 1.0\r\n            sales_invoice.plc_conversion_rate = sales_invoice.plc_conversion_rate or 1.0\r\n\r\n            # Add item\r\n            item_row = sales_invoice.append(\"items\", {})\r\n            item_row.item_code = service_row.item\r\n            item_row.qty = 1\r\n            item_row.rate = service_row.amount\r\n            item_row.uom = \"Nos\"\r\n\r\n            # Set remarks\r\n            if service_row.remark:\r\n                sales_invoice.remarks = service_row.remark\r\n            \r\n            # Apply tax template if provided\r\n            if service_row.tax_template:\r\n                try:\r\n                    tax_template = frappe.get_doc(\"Sales Taxes and Charges Template\", service_row.tax_template)\r\n\r\n                    # Check if tax template belongs to the correct company\r\n                    template_company = tax_template.company\r\n                    if template_company and template_company != default_company:\r\n                        frappe.log_error(f\"Tax template {service_row.tax_template} belongs to company {template_company} but invoice is for company {default_company}\")\r\n                        frappe.msgprint(f\"Warning: Tax template {service_row.tax_template} belongs to different company. Skipping taxes.\")\r\n                    else:\r\n                        sales_invoice.taxes_and_charges = service_row.tax_template\r\n                        # Validate each tax account belongs to the correct company\r\n                        valid_taxes = []\r\n                        for tax in tax_template.taxes:\r\n                            try:\r\n                                # Check if account belongs to the correct company\r\n                                account_company = frappe.db.get_value(\"Account\", tax.account_head, \"company\")\r\n                                if account_company == default_company:\r\n                                    valid_taxes.append({\r\n                                        \"charge_type\": tax.charge_type,\r\n                                        \"account_head\": tax.account_head,\r\n                                        \"description\": tax.description,\r\n                                        \"rate\": tax.rate,\r\n                                        \"tax_amount\": tax.tax_amount if tax.charge_type == \"Actual\" else 0\r\n                                    })\r\n                                else:\r\n                                    frappe.log_error(f\"Account {tax.account_head} belongs to company {account_company}, expected {default_company}\")\r\n                            except:\r\n                                # Skip invalid accounts\r\n                                pass\r\n\r\n                        # Add only valid taxes\r\n                        for tax_data in valid_taxes:\r\n                            sales_invoice.append(\"taxes\", tax_data)\r\n\r\n                except Exception as e:\r\n                    frappe.log_error(f\"Error applying tax template: {str(e)}\")\r\n                    frappe.msgprint(f\"Warning: Could not apply tax template {service_row.tax_template}. Invoice created without taxes.\")\r\n\r\n            # Final validation before saving\r\n            if not sales_invoice.debit_to:\r\n                frappe.throw(f\"Debit To account is required but not set for Sales Invoice. Customer: {service_row.contractor}, Company: {default_company}\")\r\n\r\n            # Set missing values and save\r\n            sales_invoice.run_method(\"set_missing_values\")\r\n            sales_invoice.save()\r\n            sales_invoice.submit()\r\n            \r\n            # Calculate total taxes from the created invoice\r\n            total_tax_amount = 0\r\n            if sales_invoice.taxes:\r\n                for tax_row in sales_invoice.taxes:\r\n                    total_tax_amount = total_tax_amount + (tax_row.tax_amount or 0)\r\n            \r\n            # Update service row\r\n            service_row.invoiced = 1\r\n            service_row.reference_invoice = sales_invoice.name\r\n            service_row.tax_amount = total_tax_amount\r\n            \r\n            invoices_created.append(sales_invoice.name)\r\n\r\n    # Update database directly to avoid recursive save\r\n    if invoices_created:\r\n        for service_row in doc.contractors_services:\r\n            if service_row.invoiced and service_row.reference_invoice:\r\n                frappe.db.set_value(\"Contractors Services\", service_row.name, {\r\n                    \"invoiced\": service_row.invoiced,\r\n                    \"reference_invoice\": service_row.reference_invoice,\r\n                    \"tax_amount\": service_row.tax_amount or 0\r\n                })\r\n\r\n        invoice_count = len(invoices_created)\r\n        frappe.msgprint(f\"Successfully created {invoice_count} Sales Invoice(s) after save for contractors\")\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-31 13:26:46.973675",
  "module": "Orbit",
  "name": "Create Purchase Invoices for Outsource Services",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Project Agreement",
  "script": "# Project Agreement Server Script - Create Purchase Invoices for Outsource Services\r\n# Script Type: DocType Event\r\n# Reference Document Type: Project Agreement\r\n# DocType Event: on_submit\r\n\r\n# Determine company to use\r\ndefault_company = None\r\n\r\ntry:\r\n    if doc.company:\r\n        default_company = doc.company\r\nexcept:\r\n    pass\r\n\r\nif not default_company:\r\n    try:\r\n        user_defaults = frappe.db.get_value(\r\n            \"User Permission\",\r\n            {\"user\": frappe.session.user, \"allow\": \"Company\"},\r\n            \"for_value\",\r\n        )\r\n        if user_defaults:\r\n            default_company = user_defaults\r\n    except:\r\n        pass\r\n\r\nif not default_company:\r\n    try:\r\n        default_company = frappe.db.get_single_value(\"Global Defaults\", \"default_company\")\r\n    except:\r\n        pass\r\n\r\nif not default_company:\r\n    try:\r\n        orbit_company = frappe.db.get_value(\"Company\", {\"name\": \"Orbit\"}, \"name\")\r\n        if orbit_company:\r\n            default_company = orbit_company\r\n    except:\r\n        pass\r\n\r\nif not default_company:\r\n    try:\r\n        companies = frappe.get_all(\"Company\", limit=1)\r\n        if companies:\r\n            default_company = companies[0].name\r\n    except:\r\n        pass\r\n\r\nif not default_company:\r\n    frappe.throw(\"No company found. Please create a company first.\")\r\n\r\nfrappe.log_error(\r\n    f\"Using company: {default_company} for Project Agreement (Outsource): {doc.name}\",\r\n    \"Debug: Company Selection (Outsource Purchase)\",\r\n)\r\n\r\ninvoices_created = []\r\n\r\nfor service_row in doc.outsource_services:\r\n    if not service_row.invoiced:\r\n        # Create Purchase Invoice\r\n        purchase_invoice = frappe.new_doc(\"Purchase Invoice\")\r\n\r\n        # Party and company\r\n        purchase_invoice.supplier = service_row.service_provider\r\n        purchase_invoice.company = default_company\r\n        purchase_invoice.custom_project_agreement = doc.name\r\n\r\n        # Posting date\r\n        purchase_invoice.posting_date = service_row.date\r\n        purchase_invoice.set_posting_time = 1\r\n\r\n        # Get supplier and company docs\r\n        try:\r\n            supplier_doc = frappe.get_doc(\"Supplier\", service_row.service_provider)\r\n        except Exception as e:\r\n            frappe.throw(f\"Supplier not found for outsource service row: {str(e)}\")\r\n\r\n        company_doc = frappe.get_doc(\"Company\", default_company)\r\n\r\n        # Currency and buying price list\r\n        try:\r\n            supplier_currency = None\r\n            try:\r\n                supplier_currency = supplier_doc.default_currency\r\n            except Exception:\r\n                supplier_currency = None\r\n            if supplier_currency:\r\n                purchase_invoice.currency = supplier_currency\r\n                purchase_invoice.price_list_currency = supplier_currency\r\n            else:\r\n                purchase_invoice.currency = company_doc.default_currency\r\n                purchase_invoice.price_list_currency = company_doc.default_currency\r\n        except:\r\n            purchase_invoice.currency = company_doc.default_currency\r\n            purchase_invoice.price_list_currency = company_doc.default_currency\r\n\r\n        try:\r\n            supplier_price_list = None\r\n            try:\r\n                supplier_price_list = supplier_doc.default_price_list\r\n            except Exception:\r\n                supplier_price_list = None\r\n            if supplier_price_list:\r\n                purchase_invoice.buying_price_list = supplier_price_list\r\n        except:\r\n            pass\r\n\r\n        # Payment terms\r\n        try:\r\n            has_payment_terms = False\r\n            try:\r\n                has_payment_terms = bool(supplier_doc.payment_terms)\r\n            except Exception:\r\n                has_payment_terms = False\r\n            if has_payment_terms:\r\n                purchase_invoice.payment_terms_template = supplier_doc.payment_terms\r\n        except:\r\n            pass\r\n\r\n        # Determine payable account (credit_to)\r\n        supplier_payable_account = None\r\n\r\n        try:\r\n            supplier_payable_account = frappe.db.get_value(\r\n                \"Party Account\",\r\n                {\"parent\": service_row.service_provider, \"parenttype\": \"Supplier\", \"company\": default_company},\r\n                \"account\",\r\n            )\r\n        except:\r\n            pass\r\n\r\n        if not supplier_payable_account:\r\n            try:\r\n                supplier_payable_account = frappe.db.get_value(\r\n                    \"Company\", default_company, \"default_payable_account\"\r\n                )\r\n            except:\r\n                pass\r\n\r\n        if not supplier_payable_account:\r\n            try:\r\n                supplier_payable_account = frappe.db.get_value(\r\n                    \"Account\",\r\n                    {\"company\": default_company, \"account_type\": \"Payable\", \"is_group\": 0},\r\n                    \"name\",\r\n                )\r\n            except:\r\n                pass\r\n\r\n        if not supplier_payable_account:\r\n            try:\r\n                accounts = frappe.db.sql(\r\n                    \"\"\"\r\n                    SELECT name FROM `tabAccount`\r\n                    WHERE company = %s AND is_group = 0\r\n                    AND (name LIKE '%%Creditors%%' OR name LIKE '%%Payable%%' OR name LIKE '%%Supplier%%')\r\n                    LIMIT 1\r\n                    \"\"\",\r\n                    (default_company,),\r\n                )\r\n                if accounts:\r\n                    supplier_payable_account = accounts[0][0]\r\n            except:\r\n                pass\r\n\r\n        if supplier_payable_account:\r\n            purchase_invoice.credit_to = supplier_payable_account\r\n        else:\r\n            payable_count = frappe.db.count(\r\n                \"Account\", {\"company\": default_company, \"account_type\": \"Payable\", \"is_group\": 0}\r\n            )\r\n            frappe.throw(\r\n                f\"No payable account found for company {default_company}. Found {payable_count} payable accounts. Please check supplier setup or create payable accounts.\"\r\n            )\r\n\r\n        # Essential fields\r\n        purchase_invoice.ignore_pricing_rule = 1\r\n        purchase_invoice.conversion_rate = purchase_invoice.conversion_rate or 1.0\r\n        purchase_invoice.plc_conversion_rate = purchase_invoice.plc_conversion_rate or 1.0\r\n\r\n        # Item row\r\n        item_row = purchase_invoice.append(\"items\", {})\r\n        item_row.item_code = service_row.service\r\n        item_row.qty = 1\r\n        item_row.rate = service_row.amount\r\n        item_row.uom = \"Nos\"\r\n\r\n        # Remarks\r\n        try:\r\n            if service_row.remark:\r\n                purchase_invoice.remarks = service_row.remark\r\n        except Exception:\r\n            pass\r\n\r\n        # Taxes from template (Purchase)\r\n        has_tax_template = False\r\n        try:\r\n            has_tax_template = bool(service_row.tax_template)\r\n        except Exception:\r\n            has_tax_template = False\r\n        if has_tax_template:\r\n            try:\r\n                tax_template = frappe.get_doc(\r\n                    \"Purchase Taxes and Charges Template\", service_row.tax_template\r\n                )\r\n\r\n                template_company = tax_template.company\r\n                if template_company and template_company != default_company:\r\n                    frappe.log_error(\r\n                        f\"Purchase tax template {service_row.tax_template} belongs to company {template_company} but invoice is for company {default_company}\"\r\n                    )\r\n                    frappe.msgprint(\r\n                        f\"Warning: Purchase tax template {service_row.tax_template} belongs to different company. Skipping taxes.\"\r\n                    )\r\n                else:\r\n                    purchase_invoice.taxes_and_charges = service_row.tax_template\r\n                    valid_taxes = []\r\n                    for tax in tax_template.taxes:\r\n                        try:\r\n                            account_company = frappe.db.get_value(\"Account\", tax.account_head, \"company\")\r\n                            if account_company == default_company:\r\n                                valid_taxes.append(\r\n                                    {\r\n                                        \"charge_type\": tax.charge_type,\r\n                                        \"account_head\": tax.account_head,\r\n                                        \"description\": tax.description,\r\n                                        \"rate\": tax.rate,\r\n                                        \"tax_amount\": tax.tax_amount if tax.charge_type == \"Actual\" else 0,\r\n                                    }\r\n                                )\r\n                            else:\r\n                                frappe.log_error(\r\n                                    f\"Account {tax.account_head} belongs to company {account_company}, expected {default_company}\"\r\n                                )\r\n                        except:\r\n                            pass\r\n\r\n                    for tax_data in valid_taxes:\r\n                        purchase_invoice.append(\"taxes\", tax_data)\r\n\r\n            except Exception as e:\r\n                frappe.log_error(f\"Error applying purchase tax template: {str(e)}\")\r\n                frappe.msgprint(\r\n                    f\"Warning: Could not apply purchase tax template {service_row.tax_template}. Invoice created without taxes.\"\r\n                )\r\n\r\n        # Final validation\r\n        if not purchase_invoice.credit_to:\r\n            frappe.throw(\r\n                f\"Payable account (credit_to) is required but not set for Purchase Invoice. Supplier: {service_row.service_provider}, Company: {default_company}\"\r\n            )\r\n\r\n        # Save and submit\r\n        purchase_invoice.run_method(\"set_missing_values\")\r\n        purchase_invoice.save()\r\n        purchase_invoice.submit()\r\n\r\n        # Update row fields\r\n        service_row.invoiced = 1\r\n        service_row.reference_invoice = purchase_invoice.name\r\n        try:\r\n            service_row.tax_amount = purchase_invoice.total_taxes_and_charges or 0\r\n        except:\r\n            service_row.tax_amount = 0\r\n\r\n        invoices_created.append(purchase_invoice.name)\r\n\r\nif invoices_created:\r\n    for service_row in doc.outsource_services:\r\n        try:\r\n            has_ref = bool(service_row.reference_invoice)\r\n        except Exception:\r\n            has_ref = False\r\n        if service_row.invoiced and has_ref:\r\n            try:\r\n                frappe.db.set_value(\r\n                    \"Outsource Services\",\r\n                    service_row.name,\r\n                    {\r\n                        \"invoiced\": service_row.invoiced,\r\n                        \"reference_invoice\": service_row.reference_invoice,\r\n                        \"tax_amount\": service_row.tax_amount,\r\n                    },\r\n                )\r\n            except Exception:\r\n                pass\r\n\r\n    invoice_count = str(len(invoices_created))\r\n    frappe.msgprint(\r\n        \"Successfully created \" + invoice_count + \" Purchase Invoice(s) for Outsource Services\"\r\n    )\r\n\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save (Submitted Document)",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-31 13:26:47.618886",
  "module": "Orbit",
  "name": "After Save Create Purchase Invoices for Outsource Services",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Project Agreement",
  "script": "# Project Agreement After Save Script - Create Purchase Invoices for Outsource Services\r\n# Script Type: DocType Event\r\n# Reference Document Type: Project Agreement\r\n# DocType Event: after_save\r\n\r\nif doc.docstatus == 1:\r\n    # Determine company to use\r\n    default_company = None\r\n\r\n    try:\r\n        if doc.company:\r\n            default_company = doc.company\r\n    except:\r\n        pass\r\n\r\n    if not default_company:\r\n        try:\r\n            user_defaults = frappe.db.get_value(\r\n                \"User Permission\",\r\n                {\"user\": frappe.session.user, \"allow\": \"Company\"},\r\n                \"for_value\",\r\n            )\r\n            if user_defaults:\r\n                default_company = user_defaults\r\n        except:\r\n            pass\r\n\r\n    if not default_company:\r\n        try:\r\n            default_company = frappe.db.get_single_value(\"Global Defaults\", \"default_company\")\r\n        except:\r\n            pass\r\n\r\n    if not default_company:\r\n        try:\r\n            orbit_company = frappe.db.get_value(\"Company\", {\"name\": \"Orbit\"}, \"name\")\r\n            if orbit_company:\r\n                default_company = orbit_company\r\n        except:\r\n            pass\r\n\r\n    if not default_company:\r\n        try:\r\n            companies = frappe.get_all(\"Company\", limit=1)\r\n            if companies:\r\n                default_company = companies[0].name\r\n        except:\r\n            pass\r\n\r\n    if not default_company:\r\n        frappe.throw(\"No company found. Please create a company first.\")\r\n\r\n    frappe.log_error(\r\n        f\"After Save - Using company: {default_company} for Project Agreement (Outsource): {doc.name}\",\r\n        \"Debug: Company Selection After Save (Outsource Purchase)\",\r\n    )\r\n\r\n    services_to_process = []\r\n    for row in doc.outsource_services:\r\n        if not row.invoiced:\r\n            services_to_process.append(row)\r\n\r\n    if services_to_process:\r\n        invoices_created = []\r\n\r\n        for service_row in services_to_process:\r\n            # Create Purchase Invoice\r\n            purchase_invoice = frappe.new_doc(\"Purchase Invoice\")\r\n\r\n            # Party and company\r\n            purchase_invoice.supplier = service_row.service_provider\r\n            purchase_invoice.company = default_company\r\n            purchase_invoice.custom_project_agreement = doc.name\r\n\r\n            # Posting date\r\n            purchase_invoice.posting_date = service_row.date\r\n            purchase_invoice.set_posting_time = 1\r\n\r\n            # Supplier and company docs\r\n            try:\r\n                supplier_doc = frappe.get_doc(\"Supplier\", service_row.service_provider)\r\n            except Exception as e:\r\n                frappe.throw(f\"Supplier not found for outsource service row: {str(e)}\")\r\n\r\n            company_doc = frappe.get_doc(\"Company\", default_company)\r\n\r\n            # Currency and buying price list\r\n            try:\r\n                supplier_currency = None\r\n                try:\r\n                    supplier_currency = supplier_doc.default_currency\r\n                except Exception:\r\n                    supplier_currency = None\r\n                if supplier_currency:\r\n                    purchase_invoice.currency = supplier_currency\r\n                    purchase_invoice.price_list_currency = supplier_currency\r\n                else:\r\n                    purchase_invoice.currency = company_doc.default_currency\r\n                    purchase_invoice.price_list_currency = company_doc.default_currency\r\n            except:\r\n                purchase_invoice.currency = company_doc.default_currency\r\n                purchase_invoice.price_list_currency = company_doc.default_currency\r\n\r\n            try:\r\n                supplier_price_list = None\r\n                try:\r\n                    supplier_price_list = supplier_doc.default_price_list\r\n                except Exception:\r\n                    supplier_price_list = None\r\n                if supplier_price_list:\r\n                    purchase_invoice.buying_price_list = supplier_price_list\r\n            except:\r\n                pass\r\n\r\n            # Payment terms\r\n            try:\r\n                has_payment_terms = False\r\n                try:\r\n                    has_payment_terms = bool(supplier_doc.payment_terms)\r\n                except Exception:\r\n                    has_payment_terms = False\r\n                if has_payment_terms:\r\n                    purchase_invoice.payment_terms_template = supplier_doc.payment_terms\r\n            except:\r\n                pass\r\n\r\n            # Determine payable account (credit_to)\r\n            supplier_payable_account = None\r\n\r\n            try:\r\n                supplier_payable_account = frappe.db.get_value(\r\n                    \"Party Account\",\r\n                    {\"parent\": service_row.service_provider, \"parenttype\": \"Supplier\", \"company\": default_company},\r\n                    \"account\",\r\n                )\r\n            except:\r\n                pass\r\n\r\n            if not supplier_payable_account:\r\n                try:\r\n                    supplier_payable_account = frappe.db.get_value(\r\n                        \"Company\", default_company, \"default_payable_account\"\r\n                    )\r\n                except:\r\n                    pass\r\n\r\n            if not supplier_payable_account:\r\n                try:\r\n                    supplier_payable_account = frappe.db.get_value(\r\n                        \"Account\",\r\n                        {\"company\": default_company, \"account_type\": \"Payable\", \"is_group\": 0},\r\n                        \"name\",\r\n                    )\r\n                except:\r\n                    pass\r\n\r\n            if not supplier_payable_account:\r\n                try:\r\n                    accounts = frappe.db.sql(\r\n                        \"\"\"\r\n                        SELECT name FROM `tabAccount`\r\n                        WHERE company = %s AND is_group = 0\r\n                        AND (name LIKE '%%Creditors%%' OR name LIKE '%%Payable%%' OR name LIKE '%%Supplier%%')\r\n                        LIMIT 1\r\n                        \"\"\",\r\n                        (default_company,),\r\n                    )\r\n                    if accounts:\r\n                        supplier_payable_account = accounts[0][0]\r\n                except:\r\n                    pass\r\n\r\n            if supplier_payable_account:\r\n                purchase_invoice.credit_to = supplier_payable_account\r\n            else:\r\n                payable_count = frappe.db.count(\r\n                    \"Account\", {\"company\": default_company, \"account_type\": \"Payable\", \"is_group\": 0}\r\n                )\r\n                frappe.throw(\r\n                    f\"No payable account found for company {default_company}. Found {payable_count} payable accounts. Please check supplier setup or create payable accounts.\"\r\n                )\r\n\r\n            # Essential fields\r\n            purchase_invoice.ignore_pricing_rule = 1\r\n            purchase_invoice.conversion_rate = purchase_invoice.conversion_rate or 1.0\r\n            purchase_invoice.plc_conversion_rate = purchase_invoice.plc_conversion_rate or 1.0\r\n\r\n            # Item row\r\n            item_row = purchase_invoice.append(\"items\", {})\r\n            item_row.item_code = service_row.service\r\n            item_row.qty = 1\r\n            item_row.rate = service_row.amount\r\n            item_row.uom = \"Nos\"\r\n\r\n            # Remarks\r\n            try:\r\n                if service_row.remark:\r\n                    purchase_invoice.remarks = service_row.remark\r\n            except Exception:\r\n                pass\r\n\r\n            # Taxes from template (Purchase)\r\n            has_tax_template = False\r\n            try:\r\n                has_tax_template = bool(service_row.tax_template)\r\n            except Exception:\r\n                has_tax_template = False\r\n            if has_tax_template:\r\n                try:\r\n                    tax_template = frappe.get_doc(\r\n                        \"Purchase Taxes and Charges Template\", service_row.tax_template\r\n                    )\r\n\r\n                    template_company = tax_template.company\r\n                    if template_company and template_company != default_company:\r\n                        frappe.log_error(\r\n                            f\"Purchase tax template {service_row.tax_template} belongs to company {template_company} but invoice is for company {default_company}\"\r\n                        )\r\n                        frappe.msgprint(\r\n                            f\"Warning: Purchase tax template {service_row.tax_template} belongs to different company. Skipping taxes.\"\r\n                        )\r\n                    else:\r\n                        purchase_invoice.taxes_and_charges = service_row.tax_template\r\n                        valid_taxes = []\r\n                        for tax in tax_template.taxes:\r\n                            try:\r\n                                account_company = frappe.db.get_value(\"Account\", tax.account_head, \"company\")\r\n                                if account_company == default_company:\r\n                                    valid_taxes.append(\r\n                                        {\r\n                                            \"charge_type\": tax.charge_type,\r\n                                            \"account_head\": tax.account_head,\r\n                                            \"description\": tax.description,\r\n                                            \"rate\": tax.rate,\r\n                                            \"tax_amount\": tax.tax_amount if tax.charge_type == \"Actual\" else 0,\r\n                                        }\r\n                                    )\r\n                                else:\r\n                                    frappe.log_error(\r\n                                        f\"Account {tax.account_head} belongs to company {account_company}, expected {default_company}\"\r\n                                    )\r\n                            except:\r\n                                pass\r\n\r\n                        for tax_data in valid_taxes:\r\n                            purchase_invoice.append(\"taxes\", tax_data)\r\n\r\n                except Exception as e:\r\n                    frappe.log_error(f\"Error applying purchase tax template: {str(e)}\")\r\n                    frappe.msgprint(\r\n                        f\"Warning: Could not apply purchase tax template {service_row.tax_template}. Invoice created without taxes.\"\r\n                    )\r\n\r\n            # Final validation\r\n            if not purchase_invoice.credit_to:\r\n                frappe.throw(\r\n                    f\"Payable account (credit_to) is required but not set for Purchase Invoice. Supplier: {service_row.service_provider}, Company: {default_company}\"\r\n                )\r\n\r\n            # Save and submit\r\n            purchase_invoice.run_method(\"set_missing_values\")\r\n            purchase_invoice.save()\r\n            purchase_invoice.submit()\r\n\r\n            # Update service row fields\r\n            service_row.invoiced = 1\r\n            service_row.reference_invoice = purchase_invoice.name\r\n            try:\r\n                service_row.tax_amount = purchase_invoice.total_taxes_and_charges or 0\r\n            except:\r\n                service_row.tax_amount = 0\r\n\r\n            invoices_created.append(purchase_invoice.name)\r\n\r\n        # Persist updates to child table without re-triggering save\r\n        if invoices_created:\r\n            for service_row in doc.outsource_services:\r\n                if service_row.invoiced and service_row.reference_invoice:\r\n                    frappe.db.set_value(\r\n                        \"Outsource Services\",\r\n                        service_row.name,\r\n                        {\r\n                            \"invoiced\": service_row.invoiced,\r\n                            \"reference_invoice\": service_row.reference_invoice,\r\n                            \"tax_amount\": service_row.tax_amount,\r\n                        },\r\n                    )\r\n\r\n            invoice_count = str(len(invoices_created))\r\n            frappe.msgprint(\r\n                \"Successfully created \" + invoice_count + \" Purchase Invoice(s) for Outsource Services after save\"\r\n            )\r\n\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-31 13:26:48.297269",
  "module": "Orbit",
  "name": "Projects Allocation Journal Entry Creation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Projects Allocation",
  "script": "# Projects Allocation Server Script - Journal Entry Creation\r\n# Script Type: DocType Event\r\n# Reference Document Type: Projects Allocation\r\n# DocType Event: on_submit\r\n\r\n# Get company - prioritize Projects Allocation company with fallbacks\r\ndefault_company = None\r\n\r\n# Method 1: Check if Projects Allocation has a company field\r\ntry:\r\n    if doc.company:\r\n        default_company = doc.company\r\nexcept:\r\n    pass\r\n\r\n# Method 2: Try user's default company\r\nif not default_company:\r\n    try:\r\n        user_defaults = frappe.db.get_value(\"User Permission\",\r\n            {\"user\": frappe.session.user, \"allow\": \"Company\"},\r\n            \"for_value\")\r\n        if user_defaults:\r\n            default_company = user_defaults\r\n    except:\r\n        pass\r\n\r\n# Method 3: Try global default company\r\nif not default_company:\r\n    try:\r\n        default_company = frappe.db.get_single_value(\"Global Defaults\", \"default_company\")\r\n    except:\r\n        pass\r\n\r\n# Method 4: Look for \"Orbit\" company specifically\r\nif not default_company:\r\n    try:\r\n        orbit_company = frappe.db.get_value(\"Company\", {\"name\": \"Orbit\"}, \"name\")\r\n        if orbit_company:\r\n            default_company = orbit_company\r\n    except:\r\n        pass\r\n\r\n# Method 5: Fallback to any company\r\nif not default_company:\r\n    try:\r\n        companies = frappe.get_all(\"Company\", limit=1)\r\n        if companies:\r\n            default_company = companies[0].name\r\n    except:\r\n        pass\r\n\r\nif not default_company:\r\n    frappe.throw(\"No company found. Please create a company first.\")\r\n\r\n# Log which company is being used for debugging\r\nfrappe.log_error(f\"Using company: {default_company} for Projects Allocation: {doc.name}\", \"Debug: Projects Allocation Company Selection\")\r\n\r\n# Track created journal entries\r\njournal_entries_created = []\r\n\r\n# Process Service Allocation Details\r\nfor service_row in doc.service_allocation:\r\n    try:\r\n        # Create Journal Entry for service allocation\r\n        journal_entry = frappe.new_doc(\"Journal Entry\")\r\n        journal_entry.company = default_company\r\n        journal_entry.posting_date = doc.date\r\n        journal_entry.user_remark = service_row.remark or f\"Service allocation for {service_row.item}\"\r\n        \r\n        # Get amounts from service row\r\n        allocated_amount = service_row.allocated_amount or 0\r\n        payment_amount = service_row.payment_amount or 0\r\n        payment_tax = service_row.payment_tax or 0\r\n        \r\n        # 1. Customer Debit To Credit (allocated_amount) - linked with customer and invoice\r\n        if service_row.customer_debit_to and allocated_amount > 0:\r\n            customer_debit_row = journal_entry.append(\"accounts\", {})\r\n            customer_debit_row.account = service_row.customer_debit_to\r\n            customer_debit_row.credit_in_account_currency = allocated_amount\r\n            customer_debit_row.party_type = \"Customer\"\r\n            customer_debit_row.party = doc.customer\r\n            \r\n            # Add invoice reference if available\r\n            if service_row.invoice:\r\n                customer_debit_row.reference_type = \"Sales Invoice\"\r\n                customer_debit_row.reference_name = service_row.invoice\r\n            \r\n            customer_debit_row.user_remark = service_row.remark or \"Service allocation\"\r\n        \r\n        # 2. Advance Account Debit (allocated_amount) - linked with customer\r\n        if service_row.advance_account and allocated_amount > 0:\r\n            advance_account_row = journal_entry.append(\"accounts\", {})\r\n            advance_account_row.account = service_row.advance_account\r\n            advance_account_row.debit_in_account_currency = allocated_amount\r\n            advance_account_row.party_type = \"Customer\"\r\n            advance_account_row.party = doc.customer\r\n            advance_account_row.is_advance = \"No\"\r\n            advance_account_row.user_remark = service_row.remark or \"Advance allocation\"\r\n        \r\n        # 3. Unearned Account Debit (payment_amount)\r\n        if service_row.unearned_account and payment_amount > 0:\r\n            unearned_account_row = journal_entry.append(\"accounts\", {})\r\n            unearned_account_row.account = service_row.unearned_account\r\n            unearned_account_row.debit_in_account_currency = payment_amount\r\n            unearned_account_row.user_remark = service_row.remark or \"Unearned revenue\"\r\n        \r\n        # 4. Revenue Account Credit (payment_amount)\r\n        if service_row.revenue_account and payment_amount > 0:\r\n            revenue_account_row = journal_entry.append(\"accounts\", {})\r\n            revenue_account_row.account = service_row.revenue_account\r\n            revenue_account_row.credit_in_account_currency = payment_amount\r\n            revenue_account_row.user_remark = service_row.remark or \"Revenue recognition\"\r\n        \r\n        # 5 & 6. Tax entries (only if payment_tax > 0)\r\n        if payment_tax > 0:\r\n            # Get tax account from first row in invoice taxes\r\n            invoice_tax_account = None\r\n            if service_row.invoice:\r\n                try:\r\n                    invoice_doc = frappe.get_doc(\"Sales Invoice\", service_row.invoice)\r\n                    if invoice_doc.taxes and len(invoice_doc.taxes) > 0:\r\n                        invoice_tax_account = invoice_doc.taxes[0].account_head\r\n                except:\r\n                    pass\r\n            \r\n            # 5. Invoice Tax Account Debit (payment_tax)\r\n            if invoice_tax_account:\r\n                tax_debit_row = journal_entry.append(\"accounts\", {})\r\n                tax_debit_row.account = invoice_tax_account\r\n                tax_debit_row.debit_in_account_currency = payment_tax\r\n                tax_debit_row.user_remark = service_row.remark or \"Tax allocation\"\r\n            \r\n            # 6. Tax Account Credit (payment_tax)\r\n            if doc.tax_account:\r\n                tax_credit_row = journal_entry.append(\"accounts\", {})\r\n                tax_credit_row.account = doc.tax_account\r\n                tax_credit_row.credit_in_account_currency = payment_tax\r\n                tax_credit_row.user_remark = service_row.remark or \"Tax liability\"\r\n        \r\n        # Save and submit journal entry\r\n        journal_entry.save()\r\n        journal_entry.submit()\r\n        journal_entries_created.append(journal_entry.name)\r\n\r\n        # Update Project Agreement based on allocation type\r\n        if service_row.project_agreement_reference:\r\n            try:\r\n                project_agreement_doc = frappe.get_doc(\"Project Agreement\", service_row.project_agreement_reference)\r\n\r\n                # 1. Update based on allocate_from type\r\n                if service_row.allocate_from == \"Gov. Fees\":\r\n                    # Add to expenses_log table\r\n                    new_expense_row = project_agreement_doc.append(\"expenses_log\", {})\r\n                    new_expense_row.date = doc.date\r\n                    new_expense_row.amount = allocated_amount\r\n                    new_expense_row.description = service_row.remark or f\"Allocated From {doc.name}\"\r\n                    new_expense_row.transaction_type = \"Allocated\"\r\n                    \r\n                    # Recalculate expense_amount: sum of amount in expenses_log table\r\n                    expense_amount_total = 0\r\n                    for expense_row in project_agreement_doc.expenses_log:\r\n                        expense_amount_total = expense_amount_total + (expense_row.amount or 0)\r\n                    \r\n                    project_agreement_doc.expense_amount = expense_amount_total\r\n                    \r\n                    # Update advance_balance: total_government_fees - expense_amount\r\n                    total_government_fees = project_agreement_doc.total_government_fees or 0\r\n                    advance_balance = total_government_fees - expense_amount_total\r\n                    project_agreement_doc.advance_balance = advance_balance\r\n\r\n                elif service_row.allocate_from == \"Trust Fees\":\r\n                    # Add to trust_fees_log table\r\n                    new_trust_fee_row = project_agreement_doc.append(\"trust_fees_log\", {})\r\n                    new_trust_fee_row.date = doc.date\r\n                    new_trust_fee_row.amount = allocated_amount\r\n                    new_trust_fee_row.description = service_row.remark or f\"Allocated From {doc.name}\"\r\n                    new_trust_fee_row.transaction_type = \"Allocated\"\r\n                    \r\n                    # Recalculate total_claimed_trust_fees: sum of amount in trust_fees_log table\r\n                    total_claimed_trust_fees = 0\r\n                    for trust_fee_row in project_agreement_doc.trust_fees_log:\r\n                        total_claimed_trust_fees = total_claimed_trust_fees + (trust_fee_row.amount or 0)\r\n                    \r\n                    project_agreement_doc.total_claimed_trust_fees = total_claimed_trust_fees\r\n                    \r\n                    # Update trust_fees_balance: total_trust_fees - total_claimed_trust_fees\r\n                    total_trust_fees = project_agreement_doc.total_trust_fees or 0\r\n                    trust_fees_balance = total_trust_fees - total_claimed_trust_fees\r\n                    project_agreement_doc.trust_fees_balance = trust_fees_balance\r\n\r\n                # 2. Update payment_log for every row in service_allocation\r\n                new_payment_row = project_agreement_doc.append(\"payment_log\", {})\r\n                new_payment_row.date = doc.date\r\n                new_payment_row.payment_amount = payment_amount\r\n                new_payment_row.payment_tax = payment_tax\r\n                new_payment_row.transaction_type = \"Allocation\"\r\n                new_payment_row.item = service_row.item\r\n                new_payment_row.remark = service_row.remark or f\"Allocation payment for {service_row.item}\"\r\n                new_payment_row.reference = journal_entry.name\r\n\r\n                # Recalculate payment totals: sum of payment_amount and payment_tax in payment_log table\r\n                total_received = 0\r\n                received_tax = 0\r\n                for payment_row in project_agreement_doc.payment_log:\r\n                    payment_amount = payment_row.payment_amount or 0\r\n                    payment_tax = payment_row.payment_tax or 0\r\n                    total_received = total_received + payment_amount\r\n                    received_tax = received_tax + payment_tax\r\n\r\n                project_agreement_doc.total_received = total_received\r\n                project_agreement_doc.received_tax = received_tax\r\n\r\n                # Calculate unclaimed_amount: total_services_amount - total_received\r\n                total_services_amount = project_agreement_doc.total_services_amount or 0\r\n                unclaimed_amount = total_services_amount - total_received\r\n                project_agreement_doc.unclaimed_amount = unclaimed_amount\r\n\r\n                # Save project agreement (don't submit as it might already be submitted)\r\n                project_agreement_doc.save()\r\n\r\n            except Exception as e:\r\n                frappe.log_error(f\"Error updating Project Agreement: {str(e)}\", \"Projects Allocation Agreement Update Error\")\r\n                # Don't throw error here as the journal entry was created successfully\r\n\r\n    except Exception as e:\r\n        frappe.log_error(f\"Error creating journal entry for service allocation: {str(e)}\", \"Projects Allocation Service Error\")\r\n        frappe.throw(f\"Error creating journal entry for service allocation {service_row.item}: {str(e)}\")\r\n\r\n# Success message\r\nif journal_entries_created:\r\n    journal_count = len(journal_entries_created)\r\n    frappe.msgprint(f\"Successfully created {journal_count} Journal Entry(ies) for Projects Allocation {doc.name}\")\r\nelse:\r\n    frappe.msgprint(\"No journal entries were created.\")\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-31 13:26:48.519624",
  "module": "Orbit",
  "name": "Outsource Payment Journal Entry Creation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Outsource Payment",
  "script": "# Outsource Payment Server Script - Journal Entry Creation\r\n# Script Type: DocType Event\r\n# Reference Document Type: Outsource Payment\r\n# DocType Event: on_submit\r\n\r\n# Get company - prioritize Outsource Payment company with fallbacks\r\ndefault_company = None\r\n\r\n# Method 1: Check if Outsource Payment has a company field\r\ntry:\r\n    if doc.company:\r\n        default_company = doc.company\r\nexcept:\r\n    pass\r\n\r\n# Method 2: Try user's default company\r\nif not default_company:\r\n    try:\r\n        user_defaults = frappe.db.get_value(\"User Permission\",\r\n            {\"user\": frappe.session.user, \"allow\": \"Company\"},\r\n            \"for_value\")\r\n        if user_defaults:\r\n            default_company = user_defaults\r\n    except:\r\n        pass\r\n\r\n# Method 3: Try global default company\r\nif not default_company:\r\n    try:\r\n        default_company = frappe.db.get_single_value(\"Global Defaults\", \"default_company\")\r\n    except:\r\n        pass\r\n\r\n# Method 4: Look for \"Orbit\" company specifically\r\nif not default_company:\r\n    try:\r\n        orbit_company = frappe.db.get_value(\"Company\", {\"name\": \"Orbit\"}, \"name\")\r\n        if orbit_company:\r\n            default_company = orbit_company\r\n    except:\r\n        pass\r\n\r\n# Method 5: Fallback to any company\r\nif not default_company:\r\n    try:\r\n        companies = frappe.get_all(\"Company\", limit=1)\r\n        if companies:\r\n            default_company = companies[0].name\r\n    except:\r\n        pass\r\n\r\nif not default_company:\r\n    frappe.throw(\"No company found. Please create a company first.\")\r\n\r\n# Log which company is being used for debugging\r\nfrappe.log_error(f\"Using company: {default_company} for Outsource Payment: {doc.name}\", \"Debug: Outsource Payment Company Selection\")\r\n\r\n# Track created journal entries\r\njournal_entries_created = []\r\n\r\n# Process Outsource Services Payment Details\r\nfor service_row in doc.outsource_services_payment:\r\n    try:\r\n        # Create Journal Entry for outsource service payment\r\n        journal_entry = frappe.new_doc(\"Journal Entry\")\r\n        journal_entry.company = default_company\r\n        journal_entry.posting_date = doc.date\r\n        journal_entry.user_remark = service_row.remark or f\"Outsource payment for {service_row.item}\"\r\n        \r\n        # Calculate total amount\r\n        total_amount = (service_row.payment_amount or 0) + (service_row.payment_tax or 0)\r\n        payment_amount = service_row.payment_amount or 0\r\n        payment_tax = service_row.payment_tax or 0\r\n        \r\n        # 1. Supplier Account Debit (payment_amount + payment_tax) - linked with supplier and invoice\r\n        if service_row.supplier_account:\r\n            supplier_account_row = journal_entry.append(\"accounts\", {})\r\n            supplier_account_row.account = service_row.supplier_account\r\n            supplier_account_row.debit_in_account_currency = total_amount\r\n            supplier_account_row.party_type = \"Supplier\"\r\n            supplier_account_row.party = doc.supplier\r\n\r\n            # Add invoice reference if available\r\n            if service_row.invoice:\r\n                supplier_account_row.reference_type = \"Purchase Invoice\"\r\n                supplier_account_row.reference_name = service_row.invoice\r\n\r\n            supplier_account_row.user_remark = service_row.remark or \"Outsource payment\"\r\n        \r\n        # 2. Pay From Account Credit (payment_amount + payment_tax)\r\n        if doc.pay_from_account:\r\n            pay_from_account_row = journal_entry.append(\"accounts\", {})\r\n            pay_from_account_row.account = doc.pay_from_account\r\n            pay_from_account_row.credit_in_account_currency = total_amount\r\n            pay_from_account_row.user_remark = service_row.remark or \"Outsource payment made\"\r\n        \r\n        # Save and submit journal entry\r\n        journal_entry.save()\r\n        journal_entry.submit()\r\n        journal_entries_created.append(journal_entry.name)\r\n\r\n        # Update Project Agreement with new outsource payment log entry\r\n        if service_row.project_agreement:\r\n            try:\r\n                project_agreement_doc = frappe.get_doc(\"Project Agreement\", service_row.project_agreement)\r\n\r\n                # Add to outsource_payment_log table\r\n                new_payment_row = project_agreement_doc.append(\"outsource_payment_log\", {})\r\n                new_payment_row.date = doc.date\r\n                new_payment_row.engineer = doc.supplier\r\n                new_payment_row.item = service_row.item\r\n                new_payment_row.payment_amount = service_row.payment_amount or 0\r\n                new_payment_row.payment_tax = service_row.payment_tax or 0\r\n                new_payment_row.remark = service_row.remark or f\"Outsource payment for {service_row.item}\"\r\n                new_payment_row.reference = journal_entry.name\r\n\r\n                # Recalculate totals in Project Agreement\r\n                # Calculate total_paid: sum of payment_amount in outsource_payment_log table\r\n                total_paid = 0\r\n                total_paid_taxes = 0\r\n                for payment_row in project_agreement_doc.outsource_payment_log:\r\n                    payment_amount = payment_row.payment_amount or 0\r\n                    payment_tax = payment_row.payment_tax or 0\r\n                    total_paid = total_paid + payment_amount\r\n                    total_paid_taxes = total_paid_taxes + payment_tax\r\n\r\n                project_agreement_doc.total_paid = total_paid\r\n                project_agreement_doc.total_paid_taxes = total_paid_taxes\r\n\r\n                # Calculate pending_to_pay: total_requested_services - total_paid - total_paid_taxes\r\n                total_requested_services = project_agreement_doc.total_requested_services or 0\r\n                pending_to_pay = total_requested_services - total_paid - total_paid_taxes\r\n                project_agreement_doc.pending_to_pay = pending_to_pay\r\n\r\n                # Save project agreement (don't submit as it might already be submitted)\r\n                project_agreement_doc.save()\r\n\r\n            except Exception as e:\r\n                frappe.log_error(f\"Error updating Project Agreement: {str(e)}\", \"Outsource Payment Agreement Update Error\")\r\n                # Don't throw error here as the journal entry was created successfully\r\n\r\n    except Exception as e:\r\n        frappe.log_error(f\"Error creating journal entry for outsource payment: {str(e)}\", \"Outsource Payment Service Error\")\r\n        frappe.throw(f\"Error creating journal entry for outsource payment {service_row.item}: {str(e)}\")\r\n\r\n# Success message\r\nif journal_entries_created:\r\n    journal_count = len(journal_entries_created)\r\n    frappe.msgprint(f\"Successfully created {journal_count} Journal Entry(ies) for Outsource Payment {doc.name}\")\r\nelse:\r\n    frappe.msgprint(\"No journal entries were created.\")\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-31 13:26:47.983962",
  "module": "Orbit",
  "name": "Project Services Adjustment Journal Entry Creation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Project Services Adjustment",
  "script": "# Project Services Adjustment Server Script - Journal Entry Creation\r\n# Script Type: DocType Event\r\n# Reference Document Type: Project Services Adjustment\r\n# DocType Event: on_submit\r\n\r\n# Get company - prioritize Project Services Adjustment company with fallbacks\r\ndefault_company = None\r\n\r\n# Method 1: Check if Project Services Adjustment has a company field\r\ntry:\r\n    if doc.company:\r\n        default_company = doc.company\r\nexcept:\r\n    pass\r\n\r\n# Method 2: Try user's default company\r\nif not default_company:\r\n    try:\r\n        user_defaults = frappe.db.get_value(\"User Permission\",\r\n            {\"user\": frappe.session.user, \"allow\": \"Company\"},\r\n            \"for_value\")\r\n        if user_defaults:\r\n            default_company = user_defaults\r\n    except:\r\n        pass\r\n\r\n# Method 3: Try global default company\r\nif not default_company:\r\n    try:\r\n        default_company = frappe.db.get_single_value(\"Global Defaults\", \"default_company\")\r\n    except:\r\n        pass\r\n\r\n# Method 4: Look for \"Orbit\" company specifically\r\nif not default_company:\r\n    try:\r\n        orbit_company = frappe.db.get_value(\"Company\", {\"name\": \"Orbit\"}, \"name\")\r\n        if orbit_company:\r\n            default_company = orbit_company\r\n    except:\r\n        pass\r\n\r\n# Method 5: Fallback to any company\r\nif not default_company:\r\n    try:\r\n        companies = frappe.get_all(\"Company\", limit=1)\r\n        if companies:\r\n            default_company = companies[0].name\r\n    except:\r\n        pass\r\n\r\nif not default_company:\r\n    frappe.throw(\"No company found. Please create a company first.\")\r\n\r\n# Log which company is being used for debugging\r\nfrappe.log_error(f\"Using company: {default_company} for Project Services Adjustment: {doc.name}\", \"Debug: Project Services Adjustment Company Selection\")\r\n\r\n# Track created journal entries\r\njournal_entries_created = []\r\n\r\n# Get mode of payment account for returns\r\nmode_of_payment_account = None\r\nif doc.mode_of_payment:\r\n    try:\r\n        # Get default account from mode of payment\r\n        mode_account = frappe.db.get_value(\"Mode of Payment Account\", \r\n            {\"parent\": doc.mode_of_payment, \"company\": default_company}, \r\n            \"default_account\")\r\n        if mode_account:\r\n            mode_of_payment_account = mode_account\r\n    except:\r\n        frappe.log_error(f\"Error getting mode of payment account for {doc.mode_of_payment}\", \"Project Services Adjustment Mode of Payment Error\")\r\n\r\n# 1. Process Government Fees Return\r\nif doc.return_gov_fees and doc.gov_fees_balance and doc.gov_fees_balance > 0:\r\n    try:\r\n        # Create Journal Entry for government fees return\r\n        journal_entry = frappe.new_doc(\"Journal Entry\")\r\n        journal_entry.company = default_company\r\n        journal_entry.posting_date = doc.date\r\n        journal_entry.user_remark = \"Government fees return\"\r\n\r\n        # Gov Fees Account Debit - linked with customer, is_advance = No\r\n        if doc.gov_fees_account:\r\n            gov_fees_debit_row = journal_entry.append(\"accounts\", {})\r\n            gov_fees_debit_row.account = doc.gov_fees_account\r\n            gov_fees_debit_row.debit_in_account_currency = doc.gov_fees_balance\r\n            gov_fees_debit_row.party_type = \"Customer\"\r\n            gov_fees_debit_row.party = doc.customer\r\n            gov_fees_debit_row.is_advance = \"No\"\r\n            gov_fees_debit_row.user_remark = \"Government fees return\"\r\n\r\n        # Mode of Payment Default Account Credit\r\n        if mode_of_payment_account:\r\n            payment_credit_row = journal_entry.append(\"accounts\", {})\r\n            payment_credit_row.account = mode_of_payment_account\r\n            payment_credit_row.credit_in_account_currency = doc.gov_fees_balance\r\n            payment_credit_row.user_remark = \"Government fees return payment\"\r\n\r\n        # Save and submit journal entry\r\n        journal_entry.save()\r\n        journal_entry.submit()\r\n        journal_entries_created.append(journal_entry.name)\r\n\r\n        # Update Project Agreement - Add to expenses_log table\r\n        if doc.project_agreement:\r\n            try:\r\n                project_agreement_doc = frappe.get_doc(\"Project Agreement\", doc.project_agreement)\r\n\r\n                # Add new row to expenses_log table\r\n                new_expense_log_row = project_agreement_doc.append(\"expenses_log\", {})\r\n                new_expense_log_row.date = doc.date\r\n                new_expense_log_row.amount = doc.gov_fees_balance\r\n                new_expense_log_row.transaction_type = \"Return\"\r\n                new_expense_log_row.description = f\"Government fees return - JE: {journal_entry.name}\"\r\n                # Note: reference field not set to avoid linking issues\r\n\r\n                # Update advance_balance: current - returned amount\r\n                current_advance_balance = project_agreement_doc.advance_balance or 0\r\n                project_agreement_doc.advance_balance = current_advance_balance - doc.gov_fees_balance\r\n\r\n                # Update expense_amount: current + returned amount (as it reduces available advance)\r\n                current_expense_amount = project_agreement_doc.expense_amount or 0\r\n                project_agreement_doc.expense_amount = current_expense_amount + doc.gov_fees_balance\r\n\r\n                # Save project agreement\r\n                project_agreement_doc.save()\r\n\r\n            except Exception as e:\r\n                frappe.log_error(f\"Error updating Project Agreement for gov fees return: {str(e)}\", \"Project Services Adjustment Gov Fees Return Error\")\r\n\r\n    except Exception as e:\r\n        frappe.log_error(f\"Error creating journal entry for government fees return: {str(e)}\", \"Project Services Adjustment Gov Fees Return Error\")\r\n        frappe.throw(f\"Error creating journal entry for government fees return: {str(e)}\")\r\n\r\n# 2. Process Trust Fees Return\r\nif doc.return_trust_fees and doc.trust_fees_balance and doc.trust_fees_balance > 0:\r\n    try:\r\n        # Create Journal Entry for trust fees return\r\n        journal_entry = frappe.new_doc(\"Journal Entry\")\r\n        journal_entry.company = default_company\r\n        journal_entry.posting_date = doc.date\r\n        journal_entry.user_remark = \"Trust fees return\"\r\n\r\n        # Trust Fees Account Debit - linked with customer, is_advance = No\r\n        if doc.trust_fees_account:\r\n            trust_fees_debit_row = journal_entry.append(\"accounts\", {})\r\n            trust_fees_debit_row.account = doc.trust_fees_account\r\n            trust_fees_debit_row.debit_in_account_currency = doc.trust_fees_balance\r\n            trust_fees_debit_row.party_type = \"Customer\"\r\n            trust_fees_debit_row.party = doc.customer\r\n            trust_fees_debit_row.is_advance = \"No\"\r\n            trust_fees_debit_row.user_remark = \"Trust fees return\"\r\n\r\n        # Mode of Payment Default Account Credit\r\n        if mode_of_payment_account:\r\n            payment_credit_row = journal_entry.append(\"accounts\", {})\r\n            payment_credit_row.account = mode_of_payment_account\r\n            payment_credit_row.credit_in_account_currency = doc.trust_fees_balance\r\n            payment_credit_row.user_remark = \"Trust fees return payment\"\r\n\r\n        # Save and submit journal entry\r\n        journal_entry.save()\r\n        journal_entry.submit()\r\n        journal_entries_created.append(journal_entry.name)\r\n\r\n        # Update Project Agreement - Add to trust_fees_log table\r\n        if doc.project_agreement:\r\n            try:\r\n                project_agreement_doc = frappe.get_doc(\"Project Agreement\", doc.project_agreement)\r\n\r\n                # Add new row to trust_fees_log table\r\n                new_trust_fees_log_row = project_agreement_doc.append(\"trust_fees_log\", {})\r\n                new_trust_fees_log_row.date = doc.date\r\n                new_trust_fees_log_row.amount = doc.trust_fees_balance\r\n                new_trust_fees_log_row.transaction_type = \"Return\"\r\n                new_trust_fees_log_row.description = f\"Trust fees return - JE: {journal_entry.name}\"\r\n                # Note: reference field not set to avoid linking issues\r\n\r\n                # Update total_claimed_trust_fees: current + returned amount\r\n                current_claimed_trust_fees = project_agreement_doc.total_claimed_trust_fees or 0\r\n                project_agreement_doc.total_claimed_trust_fees = current_claimed_trust_fees + doc.trust_fees_balance\r\n\r\n                # Update trust_fees_balance: current - returned amount\r\n                current_trust_balance = project_agreement_doc.trust_fees_balance or 0\r\n                project_agreement_doc.trust_fees_balance = current_trust_balance - doc.trust_fees_balance\r\n\r\n                # Save project agreement\r\n                project_agreement_doc.save()\r\n\r\n            except Exception as e:\r\n                frappe.log_error(f\"Error updating Project Agreement for trust fees return: {str(e)}\", \"Project Services Adjustment Trust Fees Return Error\")\r\n\r\n    except Exception as e:\r\n        frappe.log_error(f\"Error creating journal entry for trust fees return: {str(e)}\", \"Project Services Adjustment Trust Fees Return Error\")\r\n        frappe.throw(f\"Error creating journal entry for trust fees return: {str(e)}\")\r\n\r\n# Function to update Project Agreement totals including new cancelled fields\r\ndef update_project_agreement_totals(project_agreement_doc):\r\n    \"\"\"Update all calculated totals in Project Agreement including cancelled amounts\"\"\"\r\n    try:\r\n        # Recalculate total_received and received_tax from payment_log\r\n        total_received = 0\r\n        received_tax = 0\r\n        cancelled_amount = 0\r\n        cancelled_taxes = 0\r\n        \r\n        for payment_row in project_agreement_doc.payment_log:\r\n            payment_amount = payment_row.payment_amount or 0\r\n            payment_tax = payment_row.payment_tax or 0\r\n            transaction_type = payment_row.transaction_type or \"\"\r\n            \r\n            if transaction_type in [\"Payment\", \"Allocation\"]:\r\n                # Regular payments\r\n                total_received = total_received + payment_amount\r\n                received_tax = received_tax + payment_tax\r\n            elif transaction_type in [\"Return\", \"Cancel Due\", \"Discount\"]:\r\n                # Cancelled/returned amounts\r\n                cancelled_amount = cancelled_amount + payment_amount\r\n                cancelled_taxes = cancelled_taxes + payment_tax\r\n\r\n        project_agreement_doc.total_received = total_received\r\n        project_agreement_doc.received_tax = received_tax\r\n        project_agreement_doc.cancelled_amount = cancelled_amount\r\n        project_agreement_doc.cancelled_taxes = cancelled_taxes\r\n\r\n        # Calculate unclaimed_amount: total_services_amount - total_received - cancelled_amount\r\n        total_services_amount = project_agreement_doc.total_services_amount or 0\r\n        unclaimed_amount = total_services_amount - total_received - cancelled_amount\r\n        project_agreement_doc.unclaimed_amount = unclaimed_amount\r\n\r\n        # Save project agreement\r\n        project_agreement_doc.save()\r\n\r\n    except Exception as e:\r\n        frappe.log_error(f\"Error updating project agreement totals: {str(e)}\", \"Project Services Adjustment Totals Update Error\")\r\n\r\n# 3. Process Adjustment Services\r\nfor adjustment_row in doc.adjustment_services:\r\n    try:\r\n        # Get invoice details for customer debit account\r\n        invoice_doc = None\r\n        customer_debit_account = None\r\n        if adjustment_row.invoice:\r\n            try:\r\n                invoice_doc = frappe.get_doc(\"Sales Invoice\", adjustment_row.invoice)\r\n                customer_debit_account = invoice_doc.debit_to\r\n            except:\r\n                frappe.log_error(f\"Error getting invoice details for {adjustment_row.invoice}\", \"Project Services Adjustment Invoice Error\")\r\n                continue\r\n\r\n        # a) Discount Transaction\r\n        if adjustment_row.transaction_type == \"Discount\":\r\n            # Create Journal Entry for discount\r\n            journal_entry = frappe.new_doc(\"Journal Entry\")\r\n            journal_entry.company = default_company\r\n            journal_entry.posting_date = doc.date\r\n            journal_entry.user_remark = f\"Discount adjustment for {adjustment_row.item}\"\r\n\r\n            # Customer Debit Account Credit with discount_amount - linked with customer and invoice\r\n            if customer_debit_account and adjustment_row.discount_amount:\r\n                customer_credit_row = journal_entry.append(\"accounts\", {})\r\n                customer_credit_row.account = customer_debit_account\r\n                customer_credit_row.credit_in_account_currency = adjustment_row.discount_amount\r\n                customer_credit_row.party_type = \"Customer\"\r\n                customer_credit_row.party = doc.customer\r\n                customer_credit_row.is_advance = \"No\"\r\n                if invoice_doc:\r\n                    customer_credit_row.reference_type = \"Sales Invoice\"\r\n                    customer_credit_row.reference_name = adjustment_row.invoice\r\n                customer_credit_row.user_remark = f\"Discount for {adjustment_row.item}\"\r\n\r\n            # Unearned Account Debit with outstanding_amount\r\n            if adjustment_row.unearned_account and adjustment_row.outstanding_amount:\r\n                unearned_debit_row = journal_entry.append(\"accounts\", {})\r\n                unearned_debit_row.account = adjustment_row.unearned_account\r\n                unearned_debit_row.debit_in_account_currency = adjustment_row.outstanding_amount\r\n                unearned_debit_row.user_remark = f\"Unearned revenue adjustment for {adjustment_row.item}\"\r\n\r\n            # Tax Account Debit with outstanding_tax\r\n            if adjustment_row.tax_account and adjustment_row.outstanding_tax:\r\n                tax_debit_row = journal_entry.append(\"accounts\", {})\r\n                tax_debit_row.account = adjustment_row.tax_account\r\n                tax_debit_row.debit_in_account_currency = adjustment_row.outstanding_tax\r\n                tax_debit_row.user_remark = f\"Tax adjustment for {adjustment_row.item}\"\r\n\r\n            # Save and submit journal entry\r\n            journal_entry.save()\r\n            journal_entry.submit()\r\n            journal_entries_created.append(journal_entry.name)\r\n\r\n            # Update Project Agreement - Add to payment_log\r\n            if doc.project_agreement:\r\n                try:\r\n                    project_agreement_doc = frappe.get_doc(\"Project Agreement\", doc.project_agreement)\r\n\r\n                    # Add new row to payment_log table\r\n                    new_payment_row = project_agreement_doc.append(\"payment_log\", {})\r\n                    new_payment_row.date = doc.date\r\n                    new_payment_row.item = adjustment_row.item\r\n                    new_payment_row.payment_amount = adjustment_row.outstanding_amount or 0\r\n                    new_payment_row.payment_tax = adjustment_row.outstanding_tax or 0\r\n                    new_payment_row.transaction_type = \"Discount\"\r\n                    new_payment_row.remark = adjustment_row.remark or f\"Discount for {adjustment_row.item}\"\r\n                    new_payment_row.reference = journal_entry.name\r\n\r\n                    # Update totals\r\n                    update_project_agreement_totals(project_agreement_doc)\r\n\r\n                except Exception as e:\r\n                    frappe.log_error(f\"Error updating Project Agreement for discount: {str(e)}\", \"Project Services Adjustment Discount Update Error\")\r\n\r\n        # b) Cancel Due Transaction\r\n        elif adjustment_row.transaction_type == \"Cancel Due\":\r\n            # Create Journal Entry for cancel due\r\n            journal_entry = frappe.new_doc(\"Journal Entry\")\r\n            journal_entry.company = default_company\r\n            journal_entry.posting_date = doc.date\r\n            journal_entry.user_remark = f\"Cancel due adjustment for {adjustment_row.item}\"\r\n\r\n            # Customer Debit Account Credit with outstanding - linked with customer and invoice\r\n            if customer_debit_account and adjustment_row.outstanding:\r\n                customer_credit_row = journal_entry.append(\"accounts\", {})\r\n                customer_credit_row.account = customer_debit_account\r\n                customer_credit_row.credit_in_account_currency = adjustment_row.outstanding\r\n                customer_credit_row.party_type = \"Customer\"\r\n                customer_credit_row.party = doc.customer\r\n                customer_credit_row.is_advance = \"No\"\r\n                if invoice_doc:\r\n                    customer_credit_row.reference_type = \"Sales Invoice\"\r\n                    customer_credit_row.reference_name = adjustment_row.invoice\r\n                customer_credit_row.user_remark = f\"Cancel due for {adjustment_row.item}\"\r\n\r\n            # Unearned Account Debit with outstanding_amount\r\n            if adjustment_row.unearned_account and adjustment_row.outstanding_amount:\r\n                unearned_debit_row = journal_entry.append(\"accounts\", {})\r\n                unearned_debit_row.account = adjustment_row.unearned_account\r\n                unearned_debit_row.debit_in_account_currency = adjustment_row.outstanding_amount\r\n                unearned_debit_row.user_remark = f\"Unearned revenue cancel due for {adjustment_row.item}\"\r\n\r\n            # Tax Account Debit with outstanding_tax\r\n            if adjustment_row.tax_account and adjustment_row.outstanding_tax:\r\n                tax_debit_row = journal_entry.append(\"accounts\", {})\r\n                tax_debit_row.account = adjustment_row.tax_account\r\n                tax_debit_row.debit_in_account_currency = adjustment_row.outstanding_tax\r\n                tax_debit_row.user_remark = f\"Tax cancel due for {adjustment_row.item}\"\r\n\r\n            # Save and submit journal entry\r\n            journal_entry.save()\r\n            journal_entry.submit()\r\n            journal_entries_created.append(journal_entry.name)\r\n\r\n            # Update Project Agreement - Add to payment_log\r\n            if doc.project_agreement:\r\n                try:\r\n                    project_agreement_doc = frappe.get_doc(\"Project Agreement\", doc.project_agreement)\r\n\r\n                    # Add new row to payment_log table\r\n                    new_payment_row = project_agreement_doc.append(\"payment_log\", {})\r\n                    new_payment_row.date = doc.date\r\n                    new_payment_row.item = adjustment_row.item\r\n                    new_payment_row.payment_amount = adjustment_row.outstanding_amount or 0\r\n                    new_payment_row.payment_tax = adjustment_row.outstanding_tax or 0\r\n                    new_payment_row.transaction_type = \"Cancel Due\"\r\n                    new_payment_row.remark = adjustment_row.remark or f\"Cancel due for {adjustment_row.item}\"\r\n                    new_payment_row.reference = journal_entry.name\r\n\r\n                    # Update totals\r\n                    update_project_agreement_totals(project_agreement_doc)\r\n\r\n                except Exception as e:\r\n                    frappe.log_error(f\"Error updating Project Agreement for cancel due: {str(e)}\", \"Project Services Adjustment Cancel Due Update Error\")\r\n\r\n        # c) Return All Without Taxes Transaction\r\n        elif adjustment_row.transaction_type == \"Return All Without Taxes\":\r\n            # Create Journal Entry for return all without taxes\r\n            journal_entry = frappe.new_doc(\"Journal Entry\")\r\n            journal_entry.company = default_company\r\n            journal_entry.posting_date = doc.date\r\n            journal_entry.user_remark = f\"Return all without taxes for {adjustment_row.item}\"\r\n\r\n            # 1. Mode of Payment Default Account Credit with paid_amount\r\n            if mode_of_payment_account and adjustment_row.paid_amount:\r\n                payment_credit_row = journal_entry.append(\"accounts\", {})\r\n                payment_credit_row.account = mode_of_payment_account\r\n                payment_credit_row.credit_in_account_currency = adjustment_row.paid_amount\r\n                payment_credit_row.user_remark = f\"Return payment for {adjustment_row.item}\"\r\n\r\n            # 2. Customer Debit Account Credit with 'outstanding' field\r\n            if customer_debit_account and adjustment_row.outstanding:\r\n                customer_credit_row = journal_entry.append(\"accounts\", {})\r\n                customer_credit_row.account = customer_debit_account\r\n                customer_credit_row.credit_in_account_currency = adjustment_row.outstanding\r\n                customer_credit_row.party_type = \"Customer\"\r\n                customer_credit_row.party = doc.customer\r\n                customer_credit_row.is_advance = \"No\"\r\n                if invoice_doc:\r\n                    customer_credit_row.reference_type = \"Sales Invoice\"\r\n                    customer_credit_row.reference_name = adjustment_row.invoice\r\n                customer_credit_row.user_remark = f\"Return outstanding for {adjustment_row.item}\"\r\n\r\n            # 3. Unearned Account Debit with (outstanding_amount - paid_amount)\r\n            unearned_debit_amount = (adjustment_row.outstanding_amount or 0) - (adjustment_row.paid_amount or 0)\r\n            if adjustment_row.unearned_account and unearned_debit_amount > 0:\r\n                unearned_debit_row = journal_entry.append(\"accounts\", {})\r\n                unearned_debit_row.account = adjustment_row.unearned_account\r\n                unearned_debit_row.debit_in_account_currency = unearned_debit_amount\r\n                unearned_debit_row.user_remark = f\"Unearned revenue return for {adjustment_row.item}\"\r\n\r\n            # 4. Revenue Account Debit with paid_amount\r\n            if adjustment_row.revenue_account and adjustment_row.paid_amount:\r\n                revenue_debit_row = journal_entry.append(\"accounts\", {})\r\n                revenue_debit_row.account = adjustment_row.revenue_account\r\n                revenue_debit_row.debit_in_account_currency = adjustment_row.paid_amount\r\n                revenue_debit_row.user_remark = f\"Revenue return for {adjustment_row.item}\"\r\n\r\n            # 5. Tax Account Debit with outstanding_tax\r\n            if adjustment_row.tax_account and adjustment_row.outstanding_tax:\r\n                tax_debit_row = journal_entry.append(\"accounts\", {})\r\n                tax_debit_row.account = adjustment_row.tax_account\r\n                tax_debit_row.debit_in_account_currency = adjustment_row.outstanding_tax\r\n                tax_debit_row.user_remark = f\"Tax return for {adjustment_row.item}\"\r\n\r\n            # Save and submit journal entry\r\n            journal_entry.save()\r\n            journal_entry.submit()\r\n            journal_entries_created.append(journal_entry.name)\r\n\r\n            # Update Project Agreement - Add to payment_log\r\n            if doc.project_agreement:\r\n                try:\r\n                    project_agreement_doc = frappe.get_doc(\"Project Agreement\", doc.project_agreement)\r\n\r\n                    # Add new row to payment_log table\r\n                    new_payment_row = project_agreement_doc.append(\"payment_log\", {})\r\n                    new_payment_row.date = doc.date\r\n                    new_payment_row.item = adjustment_row.item\r\n                    new_payment_row.payment_amount = unearned_debit_amount  # (outstanding_amount - paid_amount)\r\n                    new_payment_row.payment_tax = adjustment_row.outstanding_tax or 0\r\n                    new_payment_row.transaction_type = \"Return\"\r\n                    new_payment_row.remark = adjustment_row.remark or f\"Return all without taxes for {adjustment_row.item}\"\r\n                    new_payment_row.reference = journal_entry.name\r\n\r\n                    # Update totals\r\n                    update_project_agreement_totals(project_agreement_doc)\r\n\r\n                except Exception as e:\r\n                    frappe.log_error(f\"Error updating Project Agreement for return: {str(e)}\", \"Project Services Adjustment Return Update Error\")\r\n\r\n    except Exception as e:\r\n        frappe.log_error(f\"Error processing adjustment service {adjustment_row.item}: {str(e)}\", \"Project Services Adjustment Service Error\")\r\n        frappe.throw(f\"Error processing adjustment service {adjustment_row.item}: {str(e)}\")\r\n\r\n# Success message\r\nif journal_entries_created:\r\n    journal_count = len(journal_entries_created)\r\n    frappe.msgprint(f\"Successfully created {journal_count} Journal Entry(ies) for Project Services Adjustment {doc.name}\")\r\nelse:\r\n    frappe.msgprint(\"No journal entries were created.\")\r\n",
  "script_type": "DocType Event"
 }
]